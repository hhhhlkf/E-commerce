/* taskInfo.h
   Generated by wsdl2h 2.8.117 from http://localhost:8090/WholeMapper?wsdl and typemap.dat
   2021-12-18 16:24:29 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on taskInfo.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.linexus.com/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

lkf1 = "http://service.linexus.com/"
lkf2 = "http://dao.linexus.com/"

*/

#define SOAP_NAMESPACE_OF_lkf2	"http://dao.linexus.com/"
//gsoap lkf2  schema namespace:	http://dao.linexus.com/
//gsoap lkf2  schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class lkf2__addProduct;

class lkf2__product;

class lkf2__addProductResponse;

class lkf2__deleteProductTypeByName;

class lkf2__deleteProductTypeByNameResponse;

class lkf2__getOrderList;

class lkf2__getOrderListResponse;

class lkf2__order;

class lkf2__getProductListByInfo;

class lkf2__getProductListByInfoResponse;

class lkf2__updateClient;

class lkf2__client;

class lkf2__updateClientResponse;

class lkf2__deleteClientByNameAndPwd;

class lkf2__deleteClientByNameAndPwdResponse;

class lkf2__deleteProductByInfo;

class lkf2__deleteProductByInfoResponse;

class lkf2__getOrderLikeList;

class lkf2__getOrderLikeListResponse;

class lkf2__getClientLikeList;

class lkf2__getClientLikeListResponse;

class lkf2__getProductTypeByProName;

class lkf2__getProductTypeByProNameResponse;

class lkf2__productType;

class lkf2__getClientList;

class lkf2__getClientListResponse;

class lkf2__getOrderListByInfo;

class lkf2__getOrderListByInfoResponse;

class lkf2__addProductType;

class lkf2__addProductTypeResponse;

class lkf2__updateProductByInfo;

class lkf2__updateProductByInfoResponse;

class lkf2__getProductLikeList;

class lkf2__getProductLikeListResponse;

class lkf2__addOrder;

class lkf2__addOrderResponse;

class lkf2__getClientByNameAndPwd;

class lkf2__getClientByNameAndPwdResponse;

class lkf2__deleteShoppingCart;

class lkf2__deleteShoppingCartResponse;

class lkf2__getProductList;

class lkf2__getProductListResponse;

class lkf2__InsertClient;

class lkf2__InsertClientResponse;

class lkf2__getOrderListHistory;

class lkf2__getOrderListHistoryResponse;

class lkf2__updateHistory;

class lkf2__updateHistoryResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://dao.linexus.com/":addProduct is a complexType.
///
/// @note class lkf2__addProduct operations:
/// - lkf2__addProduct* soap_new_lkf2__addProduct(soap*) allocate and default initialize
/// - lkf2__addProduct* soap_new_lkf2__addProduct(soap*, int num) allocate and default initialize an array
/// - lkf2__addProduct* soap_new_req_lkf2__addProduct(soap*, ...) allocate, set required members
/// - lkf2__addProduct* soap_new_set_lkf2__addProduct(soap*, ...) allocate, set all public members
/// - lkf2__addProduct::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addProduct(soap*, lkf2__addProduct*) deserialize from a stream
/// - int soap_write_lkf2__addProduct(soap*, lkf2__addProduct*) serialize to a stream
/// - lkf2__addProduct* lkf2__addProduct::soap_dup(soap*) returns deep copy of lkf2__addProduct, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addProduct::soap_del() deep deletes lkf2__addProduct data members, use only after lkf2__addProduct::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addProduct::soap_type() returns SOAP_TYPE_lkf2__addProduct or derived type identifier
class lkf2__addProduct
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    lkf2__product*                       arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":product is a complexType.
///
/// @note class lkf2__product operations:
/// - lkf2__product* soap_new_lkf2__product(soap*) allocate and default initialize
/// - lkf2__product* soap_new_lkf2__product(soap*, int num) allocate and default initialize an array
/// - lkf2__product* soap_new_req_lkf2__product(soap*, ...) allocate, set required members
/// - lkf2__product* soap_new_set_lkf2__product(soap*, ...) allocate, set all public members
/// - lkf2__product::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__product(soap*, lkf2__product*) deserialize from a stream
/// - int soap_write_lkf2__product(soap*, lkf2__product*) serialize to a stream
/// - lkf2__product* lkf2__product::soap_dup(soap*) returns deep copy of lkf2__product, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__product::soap_del() deep deletes lkf2__product data members, use only after lkf2__product::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__product::soap_type() returns SOAP_TYPE_lkf2__product or derived type identifier
class lkf2__product
{ public:
/// Element "productBuyNum" of type xs:int.
    int                                  productBuyNum                  1;	///< Required element.
/// Element "productDiscount" of type xs:float.
    float                                productDiscount                1;	///< Required element.
/// Element "productId" of type xs:int.
    int                                  productId                      1;	///< Required element.
/// Element "productImage" of type xs:string.
    std::string*                         productImage                   0;	///< Optional element.
/// Element "productName" of type xs:string.
    std::string*                         productName                    0;	///< Optional element.
/// Element "productNum" of type xs:int.
    int                                  productNum                     1;	///< Required element.
/// Element "productPrice" of type xs:int.
    int                                  productPrice                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductResponse is a complexType.
///
/// @note class lkf2__addProductResponse operations:
/// - lkf2__addProductResponse* soap_new_lkf2__addProductResponse(soap*) allocate and default initialize
/// - lkf2__addProductResponse* soap_new_lkf2__addProductResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__addProductResponse* soap_new_req_lkf2__addProductResponse(soap*, ...) allocate, set required members
/// - lkf2__addProductResponse* soap_new_set_lkf2__addProductResponse(soap*, ...) allocate, set all public members
/// - lkf2__addProductResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addProductResponse(soap*, lkf2__addProductResponse*) deserialize from a stream
/// - int soap_write_lkf2__addProductResponse(soap*, lkf2__addProductResponse*) serialize to a stream
/// - lkf2__addProductResponse* lkf2__addProductResponse::soap_dup(soap*) returns deep copy of lkf2__addProductResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addProductResponse::soap_del() deep deletes lkf2__addProductResponse data members, use only after lkf2__addProductResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addProductResponse::soap_type() returns SOAP_TYPE_lkf2__addProductResponse or derived type identifier
class lkf2__addProductResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductTypeByName is a complexType.
///
/// @note class lkf2__deleteProductTypeByName operations:
/// - lkf2__deleteProductTypeByName* soap_new_lkf2__deleteProductTypeByName(soap*) allocate and default initialize
/// - lkf2__deleteProductTypeByName* soap_new_lkf2__deleteProductTypeByName(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteProductTypeByName* soap_new_req_lkf2__deleteProductTypeByName(soap*, ...) allocate, set required members
/// - lkf2__deleteProductTypeByName* soap_new_set_lkf2__deleteProductTypeByName(soap*, ...) allocate, set all public members
/// - lkf2__deleteProductTypeByName::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteProductTypeByName(soap*, lkf2__deleteProductTypeByName*) deserialize from a stream
/// - int soap_write_lkf2__deleteProductTypeByName(soap*, lkf2__deleteProductTypeByName*) serialize to a stream
/// - lkf2__deleteProductTypeByName* lkf2__deleteProductTypeByName::soap_dup(soap*) returns deep copy of lkf2__deleteProductTypeByName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteProductTypeByName::soap_del() deep deletes lkf2__deleteProductTypeByName data members, use only after lkf2__deleteProductTypeByName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteProductTypeByName::soap_type() returns SOAP_TYPE_lkf2__deleteProductTypeByName or derived type identifier
class lkf2__deleteProductTypeByName
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductTypeByNameResponse is a complexType.
///
/// @note class lkf2__deleteProductTypeByNameResponse operations:
/// - lkf2__deleteProductTypeByNameResponse* soap_new_lkf2__deleteProductTypeByNameResponse(soap*) allocate and default initialize
/// - lkf2__deleteProductTypeByNameResponse* soap_new_lkf2__deleteProductTypeByNameResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteProductTypeByNameResponse* soap_new_req_lkf2__deleteProductTypeByNameResponse(soap*, ...) allocate, set required members
/// - lkf2__deleteProductTypeByNameResponse* soap_new_set_lkf2__deleteProductTypeByNameResponse(soap*, ...) allocate, set all public members
/// - lkf2__deleteProductTypeByNameResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteProductTypeByNameResponse(soap*, lkf2__deleteProductTypeByNameResponse*) deserialize from a stream
/// - int soap_write_lkf2__deleteProductTypeByNameResponse(soap*, lkf2__deleteProductTypeByNameResponse*) serialize to a stream
/// - lkf2__deleteProductTypeByNameResponse* lkf2__deleteProductTypeByNameResponse::soap_dup(soap*) returns deep copy of lkf2__deleteProductTypeByNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteProductTypeByNameResponse::soap_del() deep deletes lkf2__deleteProductTypeByNameResponse data members, use only after lkf2__deleteProductTypeByNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteProductTypeByNameResponse::soap_type() returns SOAP_TYPE_lkf2__deleteProductTypeByNameResponse or derived type identifier
class lkf2__deleteProductTypeByNameResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderList is a complexType.
///
/// @note class lkf2__getOrderList operations:
/// - lkf2__getOrderList* soap_new_lkf2__getOrderList(soap*) allocate and default initialize
/// - lkf2__getOrderList* soap_new_lkf2__getOrderList(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderList* soap_new_req_lkf2__getOrderList(soap*, ...) allocate, set required members
/// - lkf2__getOrderList* soap_new_set_lkf2__getOrderList(soap*, ...) allocate, set all public members
/// - lkf2__getOrderList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderList(soap*, lkf2__getOrderList*) deserialize from a stream
/// - int soap_write_lkf2__getOrderList(soap*, lkf2__getOrderList*) serialize to a stream
/// - lkf2__getOrderList* lkf2__getOrderList::soap_dup(soap*) returns deep copy of lkf2__getOrderList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderList::soap_del() deep deletes lkf2__getOrderList data members, use only after lkf2__getOrderList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderList::soap_type() returns SOAP_TYPE_lkf2__getOrderList or derived type identifier
class lkf2__getOrderList
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListResponse is a complexType.
///
/// @note class lkf2__getOrderListResponse operations:
/// - lkf2__getOrderListResponse* soap_new_lkf2__getOrderListResponse(soap*) allocate and default initialize
/// - lkf2__getOrderListResponse* soap_new_lkf2__getOrderListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderListResponse* soap_new_req_lkf2__getOrderListResponse(soap*, ...) allocate, set required members
/// - lkf2__getOrderListResponse* soap_new_set_lkf2__getOrderListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getOrderListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderListResponse(soap*, lkf2__getOrderListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getOrderListResponse(soap*, lkf2__getOrderListResponse*) serialize to a stream
/// - lkf2__getOrderListResponse* lkf2__getOrderListResponse::soap_dup(soap*) returns deep copy of lkf2__getOrderListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderListResponse::soap_del() deep deletes lkf2__getOrderListResponse data members, use only after lkf2__getOrderListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderListResponse::soap_type() returns SOAP_TYPE_lkf2__getOrderListResponse or derived type identifier
class lkf2__getOrderListResponse
{ public:
/// Vector of lkf2__order* of length 0..unbounded.
    std::vector<lkf2__order*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":order is a complexType.
///
/// @note class lkf2__order operations:
/// - lkf2__order* soap_new_lkf2__order(soap*) allocate and default initialize
/// - lkf2__order* soap_new_lkf2__order(soap*, int num) allocate and default initialize an array
/// - lkf2__order* soap_new_req_lkf2__order(soap*, ...) allocate, set required members
/// - lkf2__order* soap_new_set_lkf2__order(soap*, ...) allocate, set all public members
/// - lkf2__order::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__order(soap*, lkf2__order*) deserialize from a stream
/// - int soap_write_lkf2__order(soap*, lkf2__order*) serialize to a stream
/// - lkf2__order* lkf2__order::soap_dup(soap*) returns deep copy of lkf2__order, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__order::soap_del() deep deletes lkf2__order data members, use only after lkf2__order::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__order::soap_type() returns SOAP_TYPE_lkf2__order or derived type identifier
class lkf2__order
{ public:
/// Element "orderCheck" of type xs:int.
    int                                  orderCheck                     1;	///< Required element.
/// Element "orderClient" of type xs:string.
    std::string*                         orderClient                    0;	///< Optional element.
/// Element "orderClientId" of type xs:int.
    int                                  orderClientId                  1;	///< Required element.
/// Element "orderCost" of type xs:decimal.
    xsd__decimal*                        orderCost                      0;	///< Optional element.
/// Element "orderHide" of type xs:int.
    int                                  orderHide                      1;	///< Required element.
/// Element "orderId" of type xs:int.
    int                                  orderId                        1;	///< Required element.
/// Element "orderProductId" of type xs:int.
    int                                  orderProductId                 1;	///< Required element.
/// Element "orderProductName" of type xs:string.
    std::string*                         orderProductName               0;	///< Optional element.
/// Element "orderProductNum" of type xs:int.
    int                                  orderProductNum                1;	///< Required element.
/// Element "orderProductStyle" of type xs:string.
    std::string*                         orderProductStyle              0;	///< Optional element.
/// Element "orderTime" of type xs:dateTime.
    time_t*                              orderTime                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListByInfo is a complexType.
///
/// @note class lkf2__getProductListByInfo operations:
/// - lkf2__getProductListByInfo* soap_new_lkf2__getProductListByInfo(soap*) allocate and default initialize
/// - lkf2__getProductListByInfo* soap_new_lkf2__getProductListByInfo(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductListByInfo* soap_new_req_lkf2__getProductListByInfo(soap*, ...) allocate, set required members
/// - lkf2__getProductListByInfo* soap_new_set_lkf2__getProductListByInfo(soap*, ...) allocate, set all public members
/// - lkf2__getProductListByInfo::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductListByInfo(soap*, lkf2__getProductListByInfo*) deserialize from a stream
/// - int soap_write_lkf2__getProductListByInfo(soap*, lkf2__getProductListByInfo*) serialize to a stream
/// - lkf2__getProductListByInfo* lkf2__getProductListByInfo::soap_dup(soap*) returns deep copy of lkf2__getProductListByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductListByInfo::soap_del() deep deletes lkf2__getProductListByInfo data members, use only after lkf2__getProductListByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductListByInfo::soap_type() returns SOAP_TYPE_lkf2__getProductListByInfo or derived type identifier
class lkf2__getProductListByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    lkf2__product*                       arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListByInfoResponse is a complexType.
///
/// @note class lkf2__getProductListByInfoResponse operations:
/// - lkf2__getProductListByInfoResponse* soap_new_lkf2__getProductListByInfoResponse(soap*) allocate and default initialize
/// - lkf2__getProductListByInfoResponse* soap_new_lkf2__getProductListByInfoResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductListByInfoResponse* soap_new_req_lkf2__getProductListByInfoResponse(soap*, ...) allocate, set required members
/// - lkf2__getProductListByInfoResponse* soap_new_set_lkf2__getProductListByInfoResponse(soap*, ...) allocate, set all public members
/// - lkf2__getProductListByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductListByInfoResponse(soap*, lkf2__getProductListByInfoResponse*) deserialize from a stream
/// - int soap_write_lkf2__getProductListByInfoResponse(soap*, lkf2__getProductListByInfoResponse*) serialize to a stream
/// - lkf2__getProductListByInfoResponse* lkf2__getProductListByInfoResponse::soap_dup(soap*) returns deep copy of lkf2__getProductListByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductListByInfoResponse::soap_del() deep deletes lkf2__getProductListByInfoResponse data members, use only after lkf2__getProductListByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductListByInfoResponse::soap_type() returns SOAP_TYPE_lkf2__getProductListByInfoResponse or derived type identifier
class lkf2__getProductListByInfoResponse
{ public:
/// Vector of lkf2__product* of length 0..unbounded.
    std::vector<lkf2__product*         > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateClient is a complexType.
///
/// @note class lkf2__updateClient operations:
/// - lkf2__updateClient* soap_new_lkf2__updateClient(soap*) allocate and default initialize
/// - lkf2__updateClient* soap_new_lkf2__updateClient(soap*, int num) allocate and default initialize an array
/// - lkf2__updateClient* soap_new_req_lkf2__updateClient(soap*, ...) allocate, set required members
/// - lkf2__updateClient* soap_new_set_lkf2__updateClient(soap*, ...) allocate, set all public members
/// - lkf2__updateClient::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateClient(soap*, lkf2__updateClient*) deserialize from a stream
/// - int soap_write_lkf2__updateClient(soap*, lkf2__updateClient*) serialize to a stream
/// - lkf2__updateClient* lkf2__updateClient::soap_dup(soap*) returns deep copy of lkf2__updateClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateClient::soap_del() deep deletes lkf2__updateClient data members, use only after lkf2__updateClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateClient::soap_type() returns SOAP_TYPE_lkf2__updateClient or derived type identifier
class lkf2__updateClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    lkf2__client*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":client is a complexType.
///
/// @note class lkf2__client operations:
/// - lkf2__client* soap_new_lkf2__client(soap*) allocate and default initialize
/// - lkf2__client* soap_new_lkf2__client(soap*, int num) allocate and default initialize an array
/// - lkf2__client* soap_new_req_lkf2__client(soap*, ...) allocate, set required members
/// - lkf2__client* soap_new_set_lkf2__client(soap*, ...) allocate, set all public members
/// - lkf2__client::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__client(soap*, lkf2__client*) deserialize from a stream
/// - int soap_write_lkf2__client(soap*, lkf2__client*) serialize to a stream
/// - lkf2__client* lkf2__client::soap_dup(soap*) returns deep copy of lkf2__client, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__client::soap_del() deep deletes lkf2__client data members, use only after lkf2__client::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__client::soap_type() returns SOAP_TYPE_lkf2__client or derived type identifier
class lkf2__client
{ public:
/// Element "clientBought" of type xs:int.
    int                                  clientBought                   1;	///< Required element.
/// Element "clientEmail" of type xs:string.
    std::string*                         clientEmail                    0;	///< Optional element.
/// Element "clientId" of type xs:int.
    int                                  clientId                       1;	///< Required element.
/// Element "clientImage" of type xs:string.
    std::string*                         clientImage                    0;	///< Optional element.
/// Element "clientName" of type xs:string.
    std::string*                         clientName                     0;	///< Optional element.
/// Element "clientPhone" of type xs:string.
    std::string*                         clientPhone                    0;	///< Optional element.
/// Element "clientPwd" of type xs:string.
    std::string*                         clientPwd                      0;	///< Optional element.
/// Element "clientSignTime" of type xs:dateTime.
    time_t*                              clientSignTime                 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateClientResponse is a complexType.
///
/// @note class lkf2__updateClientResponse operations:
/// - lkf2__updateClientResponse* soap_new_lkf2__updateClientResponse(soap*) allocate and default initialize
/// - lkf2__updateClientResponse* soap_new_lkf2__updateClientResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__updateClientResponse* soap_new_req_lkf2__updateClientResponse(soap*, ...) allocate, set required members
/// - lkf2__updateClientResponse* soap_new_set_lkf2__updateClientResponse(soap*, ...) allocate, set all public members
/// - lkf2__updateClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateClientResponse(soap*, lkf2__updateClientResponse*) deserialize from a stream
/// - int soap_write_lkf2__updateClientResponse(soap*, lkf2__updateClientResponse*) serialize to a stream
/// - lkf2__updateClientResponse* lkf2__updateClientResponse::soap_dup(soap*) returns deep copy of lkf2__updateClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateClientResponse::soap_del() deep deletes lkf2__updateClientResponse data members, use only after lkf2__updateClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateClientResponse::soap_type() returns SOAP_TYPE_lkf2__updateClientResponse or derived type identifier
class lkf2__updateClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteClientByNameAndPwd is a complexType.
///
/// @note class lkf2__deleteClientByNameAndPwd operations:
/// - lkf2__deleteClientByNameAndPwd* soap_new_lkf2__deleteClientByNameAndPwd(soap*) allocate and default initialize
/// - lkf2__deleteClientByNameAndPwd* soap_new_lkf2__deleteClientByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteClientByNameAndPwd* soap_new_req_lkf2__deleteClientByNameAndPwd(soap*, ...) allocate, set required members
/// - lkf2__deleteClientByNameAndPwd* soap_new_set_lkf2__deleteClientByNameAndPwd(soap*, ...) allocate, set all public members
/// - lkf2__deleteClientByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteClientByNameAndPwd(soap*, lkf2__deleteClientByNameAndPwd*) deserialize from a stream
/// - int soap_write_lkf2__deleteClientByNameAndPwd(soap*, lkf2__deleteClientByNameAndPwd*) serialize to a stream
/// - lkf2__deleteClientByNameAndPwd* lkf2__deleteClientByNameAndPwd::soap_dup(soap*) returns deep copy of lkf2__deleteClientByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteClientByNameAndPwd::soap_del() deep deletes lkf2__deleteClientByNameAndPwd data members, use only after lkf2__deleteClientByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteClientByNameAndPwd::soap_type() returns SOAP_TYPE_lkf2__deleteClientByNameAndPwd or derived type identifier
class lkf2__deleteClientByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteClientByNameAndPwdResponse is a complexType.
///
/// @note class lkf2__deleteClientByNameAndPwdResponse operations:
/// - lkf2__deleteClientByNameAndPwdResponse* soap_new_lkf2__deleteClientByNameAndPwdResponse(soap*) allocate and default initialize
/// - lkf2__deleteClientByNameAndPwdResponse* soap_new_lkf2__deleteClientByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteClientByNameAndPwdResponse* soap_new_req_lkf2__deleteClientByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - lkf2__deleteClientByNameAndPwdResponse* soap_new_set_lkf2__deleteClientByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - lkf2__deleteClientByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteClientByNameAndPwdResponse(soap*, lkf2__deleteClientByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_lkf2__deleteClientByNameAndPwdResponse(soap*, lkf2__deleteClientByNameAndPwdResponse*) serialize to a stream
/// - lkf2__deleteClientByNameAndPwdResponse* lkf2__deleteClientByNameAndPwdResponse::soap_dup(soap*) returns deep copy of lkf2__deleteClientByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteClientByNameAndPwdResponse::soap_del() deep deletes lkf2__deleteClientByNameAndPwdResponse data members, use only after lkf2__deleteClientByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteClientByNameAndPwdResponse::soap_type() returns SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse or derived type identifier
class lkf2__deleteClientByNameAndPwdResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductByInfo is a complexType.
///
/// @note class lkf2__deleteProductByInfo operations:
/// - lkf2__deleteProductByInfo* soap_new_lkf2__deleteProductByInfo(soap*) allocate and default initialize
/// - lkf2__deleteProductByInfo* soap_new_lkf2__deleteProductByInfo(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteProductByInfo* soap_new_req_lkf2__deleteProductByInfo(soap*, ...) allocate, set required members
/// - lkf2__deleteProductByInfo* soap_new_set_lkf2__deleteProductByInfo(soap*, ...) allocate, set all public members
/// - lkf2__deleteProductByInfo::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteProductByInfo(soap*, lkf2__deleteProductByInfo*) deserialize from a stream
/// - int soap_write_lkf2__deleteProductByInfo(soap*, lkf2__deleteProductByInfo*) serialize to a stream
/// - lkf2__deleteProductByInfo* lkf2__deleteProductByInfo::soap_dup(soap*) returns deep copy of lkf2__deleteProductByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteProductByInfo::soap_del() deep deletes lkf2__deleteProductByInfo data members, use only after lkf2__deleteProductByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteProductByInfo::soap_type() returns SOAP_TYPE_lkf2__deleteProductByInfo or derived type identifier
class lkf2__deleteProductByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    lkf2__product*                       arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteProductByInfoResponse is a complexType.
///
/// @note class lkf2__deleteProductByInfoResponse operations:
/// - lkf2__deleteProductByInfoResponse* soap_new_lkf2__deleteProductByInfoResponse(soap*) allocate and default initialize
/// - lkf2__deleteProductByInfoResponse* soap_new_lkf2__deleteProductByInfoResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteProductByInfoResponse* soap_new_req_lkf2__deleteProductByInfoResponse(soap*, ...) allocate, set required members
/// - lkf2__deleteProductByInfoResponse* soap_new_set_lkf2__deleteProductByInfoResponse(soap*, ...) allocate, set all public members
/// - lkf2__deleteProductByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteProductByInfoResponse(soap*, lkf2__deleteProductByInfoResponse*) deserialize from a stream
/// - int soap_write_lkf2__deleteProductByInfoResponse(soap*, lkf2__deleteProductByInfoResponse*) serialize to a stream
/// - lkf2__deleteProductByInfoResponse* lkf2__deleteProductByInfoResponse::soap_dup(soap*) returns deep copy of lkf2__deleteProductByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteProductByInfoResponse::soap_del() deep deletes lkf2__deleteProductByInfoResponse data members, use only after lkf2__deleteProductByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteProductByInfoResponse::soap_type() returns SOAP_TYPE_lkf2__deleteProductByInfoResponse or derived type identifier
class lkf2__deleteProductByInfoResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderLikeList is a complexType.
///
/// @note class lkf2__getOrderLikeList operations:
/// - lkf2__getOrderLikeList* soap_new_lkf2__getOrderLikeList(soap*) allocate and default initialize
/// - lkf2__getOrderLikeList* soap_new_lkf2__getOrderLikeList(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderLikeList* soap_new_req_lkf2__getOrderLikeList(soap*, ...) allocate, set required members
/// - lkf2__getOrderLikeList* soap_new_set_lkf2__getOrderLikeList(soap*, ...) allocate, set all public members
/// - lkf2__getOrderLikeList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderLikeList(soap*, lkf2__getOrderLikeList*) deserialize from a stream
/// - int soap_write_lkf2__getOrderLikeList(soap*, lkf2__getOrderLikeList*) serialize to a stream
/// - lkf2__getOrderLikeList* lkf2__getOrderLikeList::soap_dup(soap*) returns deep copy of lkf2__getOrderLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderLikeList::soap_del() deep deletes lkf2__getOrderLikeList data members, use only after lkf2__getOrderLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderLikeList::soap_type() returns SOAP_TYPE_lkf2__getOrderLikeList or derived type identifier
class lkf2__getOrderLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderLikeListResponse is a complexType.
///
/// @note class lkf2__getOrderLikeListResponse operations:
/// - lkf2__getOrderLikeListResponse* soap_new_lkf2__getOrderLikeListResponse(soap*) allocate and default initialize
/// - lkf2__getOrderLikeListResponse* soap_new_lkf2__getOrderLikeListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderLikeListResponse* soap_new_req_lkf2__getOrderLikeListResponse(soap*, ...) allocate, set required members
/// - lkf2__getOrderLikeListResponse* soap_new_set_lkf2__getOrderLikeListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getOrderLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderLikeListResponse(soap*, lkf2__getOrderLikeListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getOrderLikeListResponse(soap*, lkf2__getOrderLikeListResponse*) serialize to a stream
/// - lkf2__getOrderLikeListResponse* lkf2__getOrderLikeListResponse::soap_dup(soap*) returns deep copy of lkf2__getOrderLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderLikeListResponse::soap_del() deep deletes lkf2__getOrderLikeListResponse data members, use only after lkf2__getOrderLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderLikeListResponse::soap_type() returns SOAP_TYPE_lkf2__getOrderLikeListResponse or derived type identifier
class lkf2__getOrderLikeListResponse
{ public:
/// Vector of lkf2__order* of length 0..unbounded.
    std::vector<lkf2__order*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientLikeList is a complexType.
///
/// @note class lkf2__getClientLikeList operations:
/// - lkf2__getClientLikeList* soap_new_lkf2__getClientLikeList(soap*) allocate and default initialize
/// - lkf2__getClientLikeList* soap_new_lkf2__getClientLikeList(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientLikeList* soap_new_req_lkf2__getClientLikeList(soap*, ...) allocate, set required members
/// - lkf2__getClientLikeList* soap_new_set_lkf2__getClientLikeList(soap*, ...) allocate, set all public members
/// - lkf2__getClientLikeList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientLikeList(soap*, lkf2__getClientLikeList*) deserialize from a stream
/// - int soap_write_lkf2__getClientLikeList(soap*, lkf2__getClientLikeList*) serialize to a stream
/// - lkf2__getClientLikeList* lkf2__getClientLikeList::soap_dup(soap*) returns deep copy of lkf2__getClientLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientLikeList::soap_del() deep deletes lkf2__getClientLikeList data members, use only after lkf2__getClientLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientLikeList::soap_type() returns SOAP_TYPE_lkf2__getClientLikeList or derived type identifier
class lkf2__getClientLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientLikeListResponse is a complexType.
///
/// @note class lkf2__getClientLikeListResponse operations:
/// - lkf2__getClientLikeListResponse* soap_new_lkf2__getClientLikeListResponse(soap*) allocate and default initialize
/// - lkf2__getClientLikeListResponse* soap_new_lkf2__getClientLikeListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientLikeListResponse* soap_new_req_lkf2__getClientLikeListResponse(soap*, ...) allocate, set required members
/// - lkf2__getClientLikeListResponse* soap_new_set_lkf2__getClientLikeListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getClientLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientLikeListResponse(soap*, lkf2__getClientLikeListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getClientLikeListResponse(soap*, lkf2__getClientLikeListResponse*) serialize to a stream
/// - lkf2__getClientLikeListResponse* lkf2__getClientLikeListResponse::soap_dup(soap*) returns deep copy of lkf2__getClientLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientLikeListResponse::soap_del() deep deletes lkf2__getClientLikeListResponse data members, use only after lkf2__getClientLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientLikeListResponse::soap_type() returns SOAP_TYPE_lkf2__getClientLikeListResponse or derived type identifier
class lkf2__getClientLikeListResponse
{ public:
/// Vector of lkf2__client* of length 0..unbounded.
    std::vector<lkf2__client*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductTypeByProName is a complexType.
///
/// @note class lkf2__getProductTypeByProName operations:
/// - lkf2__getProductTypeByProName* soap_new_lkf2__getProductTypeByProName(soap*) allocate and default initialize
/// - lkf2__getProductTypeByProName* soap_new_lkf2__getProductTypeByProName(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductTypeByProName* soap_new_req_lkf2__getProductTypeByProName(soap*, ...) allocate, set required members
/// - lkf2__getProductTypeByProName* soap_new_set_lkf2__getProductTypeByProName(soap*, ...) allocate, set all public members
/// - lkf2__getProductTypeByProName::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductTypeByProName(soap*, lkf2__getProductTypeByProName*) deserialize from a stream
/// - int soap_write_lkf2__getProductTypeByProName(soap*, lkf2__getProductTypeByProName*) serialize to a stream
/// - lkf2__getProductTypeByProName* lkf2__getProductTypeByProName::soap_dup(soap*) returns deep copy of lkf2__getProductTypeByProName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductTypeByProName::soap_del() deep deletes lkf2__getProductTypeByProName data members, use only after lkf2__getProductTypeByProName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductTypeByProName::soap_type() returns SOAP_TYPE_lkf2__getProductTypeByProName or derived type identifier
class lkf2__getProductTypeByProName
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductTypeByProNameResponse is a complexType.
///
/// @note class lkf2__getProductTypeByProNameResponse operations:
/// - lkf2__getProductTypeByProNameResponse* soap_new_lkf2__getProductTypeByProNameResponse(soap*) allocate and default initialize
/// - lkf2__getProductTypeByProNameResponse* soap_new_lkf2__getProductTypeByProNameResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductTypeByProNameResponse* soap_new_req_lkf2__getProductTypeByProNameResponse(soap*, ...) allocate, set required members
/// - lkf2__getProductTypeByProNameResponse* soap_new_set_lkf2__getProductTypeByProNameResponse(soap*, ...) allocate, set all public members
/// - lkf2__getProductTypeByProNameResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductTypeByProNameResponse(soap*, lkf2__getProductTypeByProNameResponse*) deserialize from a stream
/// - int soap_write_lkf2__getProductTypeByProNameResponse(soap*, lkf2__getProductTypeByProNameResponse*) serialize to a stream
/// - lkf2__getProductTypeByProNameResponse* lkf2__getProductTypeByProNameResponse::soap_dup(soap*) returns deep copy of lkf2__getProductTypeByProNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductTypeByProNameResponse::soap_del() deep deletes lkf2__getProductTypeByProNameResponse data members, use only after lkf2__getProductTypeByProNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductTypeByProNameResponse::soap_type() returns SOAP_TYPE_lkf2__getProductTypeByProNameResponse or derived type identifier
class lkf2__getProductTypeByProNameResponse
{ public:
/// Vector of lkf2__productType* of length 0..unbounded.
    std::vector<lkf2__productType*     > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":productType is a complexType.
///
/// @note class lkf2__productType operations:
/// - lkf2__productType* soap_new_lkf2__productType(soap*) allocate and default initialize
/// - lkf2__productType* soap_new_lkf2__productType(soap*, int num) allocate and default initialize an array
/// - lkf2__productType* soap_new_req_lkf2__productType(soap*, ...) allocate, set required members
/// - lkf2__productType* soap_new_set_lkf2__productType(soap*, ...) allocate, set all public members
/// - lkf2__productType::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__productType(soap*, lkf2__productType*) deserialize from a stream
/// - int soap_write_lkf2__productType(soap*, lkf2__productType*) serialize to a stream
/// - lkf2__productType* lkf2__productType::soap_dup(soap*) returns deep copy of lkf2__productType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__productType::soap_del() deep deletes lkf2__productType data members, use only after lkf2__productType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__productType::soap_type() returns SOAP_TYPE_lkf2__productType or derived type identifier
class lkf2__productType
{ public:
/// Element "typeId" of type xs:int.
    int                                  typeId                         1;	///< Required element.
/// Element "typeName" of type xs:string.
    std::string*                         typeName                       0;	///< Optional element.
/// Element "typeProduct" of type xs:string.
    std::string*                         typeProduct                    0;	///< Optional element.
/// Element "typeProductId" of type xs:int.
    int                                  typeProductId                  1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientList is a complexType.
///
/// @note class lkf2__getClientList operations:
/// - lkf2__getClientList* soap_new_lkf2__getClientList(soap*) allocate and default initialize
/// - lkf2__getClientList* soap_new_lkf2__getClientList(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientList* soap_new_req_lkf2__getClientList(soap*, ...) allocate, set required members
/// - lkf2__getClientList* soap_new_set_lkf2__getClientList(soap*, ...) allocate, set all public members
/// - lkf2__getClientList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientList(soap*, lkf2__getClientList*) deserialize from a stream
/// - int soap_write_lkf2__getClientList(soap*, lkf2__getClientList*) serialize to a stream
/// - lkf2__getClientList* lkf2__getClientList::soap_dup(soap*) returns deep copy of lkf2__getClientList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientList::soap_del() deep deletes lkf2__getClientList data members, use only after lkf2__getClientList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientList::soap_type() returns SOAP_TYPE_lkf2__getClientList or derived type identifier
class lkf2__getClientList
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientListResponse is a complexType.
///
/// @note class lkf2__getClientListResponse operations:
/// - lkf2__getClientListResponse* soap_new_lkf2__getClientListResponse(soap*) allocate and default initialize
/// - lkf2__getClientListResponse* soap_new_lkf2__getClientListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientListResponse* soap_new_req_lkf2__getClientListResponse(soap*, ...) allocate, set required members
/// - lkf2__getClientListResponse* soap_new_set_lkf2__getClientListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getClientListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientListResponse(soap*, lkf2__getClientListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getClientListResponse(soap*, lkf2__getClientListResponse*) serialize to a stream
/// - lkf2__getClientListResponse* lkf2__getClientListResponse::soap_dup(soap*) returns deep copy of lkf2__getClientListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientListResponse::soap_del() deep deletes lkf2__getClientListResponse data members, use only after lkf2__getClientListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientListResponse::soap_type() returns SOAP_TYPE_lkf2__getClientListResponse or derived type identifier
class lkf2__getClientListResponse
{ public:
/// Vector of lkf2__client* of length 0..unbounded.
    std::vector<lkf2__client*          > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListByInfo is a complexType.
///
/// @note class lkf2__getOrderListByInfo operations:
/// - lkf2__getOrderListByInfo* soap_new_lkf2__getOrderListByInfo(soap*) allocate and default initialize
/// - lkf2__getOrderListByInfo* soap_new_lkf2__getOrderListByInfo(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderListByInfo* soap_new_req_lkf2__getOrderListByInfo(soap*, ...) allocate, set required members
/// - lkf2__getOrderListByInfo* soap_new_set_lkf2__getOrderListByInfo(soap*, ...) allocate, set all public members
/// - lkf2__getOrderListByInfo::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderListByInfo(soap*, lkf2__getOrderListByInfo*) deserialize from a stream
/// - int soap_write_lkf2__getOrderListByInfo(soap*, lkf2__getOrderListByInfo*) serialize to a stream
/// - lkf2__getOrderListByInfo* lkf2__getOrderListByInfo::soap_dup(soap*) returns deep copy of lkf2__getOrderListByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderListByInfo::soap_del() deep deletes lkf2__getOrderListByInfo data members, use only after lkf2__getOrderListByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderListByInfo::soap_type() returns SOAP_TYPE_lkf2__getOrderListByInfo or derived type identifier
class lkf2__getOrderListByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    lkf2__order*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListByInfoResponse is a complexType.
///
/// @note class lkf2__getOrderListByInfoResponse operations:
/// - lkf2__getOrderListByInfoResponse* soap_new_lkf2__getOrderListByInfoResponse(soap*) allocate and default initialize
/// - lkf2__getOrderListByInfoResponse* soap_new_lkf2__getOrderListByInfoResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderListByInfoResponse* soap_new_req_lkf2__getOrderListByInfoResponse(soap*, ...) allocate, set required members
/// - lkf2__getOrderListByInfoResponse* soap_new_set_lkf2__getOrderListByInfoResponse(soap*, ...) allocate, set all public members
/// - lkf2__getOrderListByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderListByInfoResponse(soap*, lkf2__getOrderListByInfoResponse*) deserialize from a stream
/// - int soap_write_lkf2__getOrderListByInfoResponse(soap*, lkf2__getOrderListByInfoResponse*) serialize to a stream
/// - lkf2__getOrderListByInfoResponse* lkf2__getOrderListByInfoResponse::soap_dup(soap*) returns deep copy of lkf2__getOrderListByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderListByInfoResponse::soap_del() deep deletes lkf2__getOrderListByInfoResponse data members, use only after lkf2__getOrderListByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderListByInfoResponse::soap_type() returns SOAP_TYPE_lkf2__getOrderListByInfoResponse or derived type identifier
class lkf2__getOrderListByInfoResponse
{ public:
/// Vector of lkf2__order* of length 0..unbounded.
    std::vector<lkf2__order*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductType is a complexType.
///
/// @note class lkf2__addProductType operations:
/// - lkf2__addProductType* soap_new_lkf2__addProductType(soap*) allocate and default initialize
/// - lkf2__addProductType* soap_new_lkf2__addProductType(soap*, int num) allocate and default initialize an array
/// - lkf2__addProductType* soap_new_req_lkf2__addProductType(soap*, ...) allocate, set required members
/// - lkf2__addProductType* soap_new_set_lkf2__addProductType(soap*, ...) allocate, set all public members
/// - lkf2__addProductType::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addProductType(soap*, lkf2__addProductType*) deserialize from a stream
/// - int soap_write_lkf2__addProductType(soap*, lkf2__addProductType*) serialize to a stream
/// - lkf2__addProductType* lkf2__addProductType::soap_dup(soap*) returns deep copy of lkf2__addProductType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addProductType::soap_del() deep deletes lkf2__addProductType data members, use only after lkf2__addProductType::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addProductType::soap_type() returns SOAP_TYPE_lkf2__addProductType or derived type identifier
class lkf2__addProductType
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":productType.
    lkf2__productType*                   arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addProductTypeResponse is a complexType.
///
/// @note class lkf2__addProductTypeResponse operations:
/// - lkf2__addProductTypeResponse* soap_new_lkf2__addProductTypeResponse(soap*) allocate and default initialize
/// - lkf2__addProductTypeResponse* soap_new_lkf2__addProductTypeResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__addProductTypeResponse* soap_new_req_lkf2__addProductTypeResponse(soap*, ...) allocate, set required members
/// - lkf2__addProductTypeResponse* soap_new_set_lkf2__addProductTypeResponse(soap*, ...) allocate, set all public members
/// - lkf2__addProductTypeResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addProductTypeResponse(soap*, lkf2__addProductTypeResponse*) deserialize from a stream
/// - int soap_write_lkf2__addProductTypeResponse(soap*, lkf2__addProductTypeResponse*) serialize to a stream
/// - lkf2__addProductTypeResponse* lkf2__addProductTypeResponse::soap_dup(soap*) returns deep copy of lkf2__addProductTypeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addProductTypeResponse::soap_del() deep deletes lkf2__addProductTypeResponse data members, use only after lkf2__addProductTypeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addProductTypeResponse::soap_type() returns SOAP_TYPE_lkf2__addProductTypeResponse or derived type identifier
class lkf2__addProductTypeResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateProductByInfo is a complexType.
///
/// @note class lkf2__updateProductByInfo operations:
/// - lkf2__updateProductByInfo* soap_new_lkf2__updateProductByInfo(soap*) allocate and default initialize
/// - lkf2__updateProductByInfo* soap_new_lkf2__updateProductByInfo(soap*, int num) allocate and default initialize an array
/// - lkf2__updateProductByInfo* soap_new_req_lkf2__updateProductByInfo(soap*, ...) allocate, set required members
/// - lkf2__updateProductByInfo* soap_new_set_lkf2__updateProductByInfo(soap*, ...) allocate, set all public members
/// - lkf2__updateProductByInfo::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateProductByInfo(soap*, lkf2__updateProductByInfo*) deserialize from a stream
/// - int soap_write_lkf2__updateProductByInfo(soap*, lkf2__updateProductByInfo*) serialize to a stream
/// - lkf2__updateProductByInfo* lkf2__updateProductByInfo::soap_dup(soap*) returns deep copy of lkf2__updateProductByInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateProductByInfo::soap_del() deep deletes lkf2__updateProductByInfo data members, use only after lkf2__updateProductByInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateProductByInfo::soap_type() returns SOAP_TYPE_lkf2__updateProductByInfo or derived type identifier
class lkf2__updateProductByInfo
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":product.
    lkf2__product*                       arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateProductByInfoResponse is a complexType.
///
/// @note class lkf2__updateProductByInfoResponse operations:
/// - lkf2__updateProductByInfoResponse* soap_new_lkf2__updateProductByInfoResponse(soap*) allocate and default initialize
/// - lkf2__updateProductByInfoResponse* soap_new_lkf2__updateProductByInfoResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__updateProductByInfoResponse* soap_new_req_lkf2__updateProductByInfoResponse(soap*, ...) allocate, set required members
/// - lkf2__updateProductByInfoResponse* soap_new_set_lkf2__updateProductByInfoResponse(soap*, ...) allocate, set all public members
/// - lkf2__updateProductByInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateProductByInfoResponse(soap*, lkf2__updateProductByInfoResponse*) deserialize from a stream
/// - int soap_write_lkf2__updateProductByInfoResponse(soap*, lkf2__updateProductByInfoResponse*) serialize to a stream
/// - lkf2__updateProductByInfoResponse* lkf2__updateProductByInfoResponse::soap_dup(soap*) returns deep copy of lkf2__updateProductByInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateProductByInfoResponse::soap_del() deep deletes lkf2__updateProductByInfoResponse data members, use only after lkf2__updateProductByInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateProductByInfoResponse::soap_type() returns SOAP_TYPE_lkf2__updateProductByInfoResponse or derived type identifier
class lkf2__updateProductByInfoResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductLikeList is a complexType.
///
/// @note class lkf2__getProductLikeList operations:
/// - lkf2__getProductLikeList* soap_new_lkf2__getProductLikeList(soap*) allocate and default initialize
/// - lkf2__getProductLikeList* soap_new_lkf2__getProductLikeList(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductLikeList* soap_new_req_lkf2__getProductLikeList(soap*, ...) allocate, set required members
/// - lkf2__getProductLikeList* soap_new_set_lkf2__getProductLikeList(soap*, ...) allocate, set all public members
/// - lkf2__getProductLikeList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductLikeList(soap*, lkf2__getProductLikeList*) deserialize from a stream
/// - int soap_write_lkf2__getProductLikeList(soap*, lkf2__getProductLikeList*) serialize to a stream
/// - lkf2__getProductLikeList* lkf2__getProductLikeList::soap_dup(soap*) returns deep copy of lkf2__getProductLikeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductLikeList::soap_del() deep deletes lkf2__getProductLikeList data members, use only after lkf2__getProductLikeList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductLikeList::soap_type() returns SOAP_TYPE_lkf2__getProductLikeList or derived type identifier
class lkf2__getProductLikeList
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductLikeListResponse is a complexType.
///
/// @note class lkf2__getProductLikeListResponse operations:
/// - lkf2__getProductLikeListResponse* soap_new_lkf2__getProductLikeListResponse(soap*) allocate and default initialize
/// - lkf2__getProductLikeListResponse* soap_new_lkf2__getProductLikeListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductLikeListResponse* soap_new_req_lkf2__getProductLikeListResponse(soap*, ...) allocate, set required members
/// - lkf2__getProductLikeListResponse* soap_new_set_lkf2__getProductLikeListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getProductLikeListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductLikeListResponse(soap*, lkf2__getProductLikeListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getProductLikeListResponse(soap*, lkf2__getProductLikeListResponse*) serialize to a stream
/// - lkf2__getProductLikeListResponse* lkf2__getProductLikeListResponse::soap_dup(soap*) returns deep copy of lkf2__getProductLikeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductLikeListResponse::soap_del() deep deletes lkf2__getProductLikeListResponse data members, use only after lkf2__getProductLikeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductLikeListResponse::soap_type() returns SOAP_TYPE_lkf2__getProductLikeListResponse or derived type identifier
class lkf2__getProductLikeListResponse
{ public:
/// Vector of lkf2__product* of length 0..unbounded.
    std::vector<lkf2__product*         > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addOrder is a complexType.
///
/// @note class lkf2__addOrder operations:
/// - lkf2__addOrder* soap_new_lkf2__addOrder(soap*) allocate and default initialize
/// - lkf2__addOrder* soap_new_lkf2__addOrder(soap*, int num) allocate and default initialize an array
/// - lkf2__addOrder* soap_new_req_lkf2__addOrder(soap*, ...) allocate, set required members
/// - lkf2__addOrder* soap_new_set_lkf2__addOrder(soap*, ...) allocate, set all public members
/// - lkf2__addOrder::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addOrder(soap*, lkf2__addOrder*) deserialize from a stream
/// - int soap_write_lkf2__addOrder(soap*, lkf2__addOrder*) serialize to a stream
/// - lkf2__addOrder* lkf2__addOrder::soap_dup(soap*) returns deep copy of lkf2__addOrder, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addOrder::soap_del() deep deletes lkf2__addOrder data members, use only after lkf2__addOrder::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addOrder::soap_type() returns SOAP_TYPE_lkf2__addOrder or derived type identifier
class lkf2__addOrder
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    lkf2__order*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":addOrderResponse is a complexType.
///
/// @note class lkf2__addOrderResponse operations:
/// - lkf2__addOrderResponse* soap_new_lkf2__addOrderResponse(soap*) allocate and default initialize
/// - lkf2__addOrderResponse* soap_new_lkf2__addOrderResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__addOrderResponse* soap_new_req_lkf2__addOrderResponse(soap*, ...) allocate, set required members
/// - lkf2__addOrderResponse* soap_new_set_lkf2__addOrderResponse(soap*, ...) allocate, set all public members
/// - lkf2__addOrderResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__addOrderResponse(soap*, lkf2__addOrderResponse*) deserialize from a stream
/// - int soap_write_lkf2__addOrderResponse(soap*, lkf2__addOrderResponse*) serialize to a stream
/// - lkf2__addOrderResponse* lkf2__addOrderResponse::soap_dup(soap*) returns deep copy of lkf2__addOrderResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__addOrderResponse::soap_del() deep deletes lkf2__addOrderResponse data members, use only after lkf2__addOrderResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__addOrderResponse::soap_type() returns SOAP_TYPE_lkf2__addOrderResponse or derived type identifier
class lkf2__addOrderResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientByNameAndPwd is a complexType.
///
/// @note class lkf2__getClientByNameAndPwd operations:
/// - lkf2__getClientByNameAndPwd* soap_new_lkf2__getClientByNameAndPwd(soap*) allocate and default initialize
/// - lkf2__getClientByNameAndPwd* soap_new_lkf2__getClientByNameAndPwd(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientByNameAndPwd* soap_new_req_lkf2__getClientByNameAndPwd(soap*, ...) allocate, set required members
/// - lkf2__getClientByNameAndPwd* soap_new_set_lkf2__getClientByNameAndPwd(soap*, ...) allocate, set all public members
/// - lkf2__getClientByNameAndPwd::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientByNameAndPwd(soap*, lkf2__getClientByNameAndPwd*) deserialize from a stream
/// - int soap_write_lkf2__getClientByNameAndPwd(soap*, lkf2__getClientByNameAndPwd*) serialize to a stream
/// - lkf2__getClientByNameAndPwd* lkf2__getClientByNameAndPwd::soap_dup(soap*) returns deep copy of lkf2__getClientByNameAndPwd, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientByNameAndPwd::soap_del() deep deletes lkf2__getClientByNameAndPwd data members, use only after lkf2__getClientByNameAndPwd::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientByNameAndPwd::soap_type() returns SOAP_TYPE_lkf2__getClientByNameAndPwd or derived type identifier
class lkf2__getClientByNameAndPwd
{ public:
/// Element "arg0" of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element "arg1" of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getClientByNameAndPwdResponse is a complexType.
///
/// @note class lkf2__getClientByNameAndPwdResponse operations:
/// - lkf2__getClientByNameAndPwdResponse* soap_new_lkf2__getClientByNameAndPwdResponse(soap*) allocate and default initialize
/// - lkf2__getClientByNameAndPwdResponse* soap_new_lkf2__getClientByNameAndPwdResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getClientByNameAndPwdResponse* soap_new_req_lkf2__getClientByNameAndPwdResponse(soap*, ...) allocate, set required members
/// - lkf2__getClientByNameAndPwdResponse* soap_new_set_lkf2__getClientByNameAndPwdResponse(soap*, ...) allocate, set all public members
/// - lkf2__getClientByNameAndPwdResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getClientByNameAndPwdResponse(soap*, lkf2__getClientByNameAndPwdResponse*) deserialize from a stream
/// - int soap_write_lkf2__getClientByNameAndPwdResponse(soap*, lkf2__getClientByNameAndPwdResponse*) serialize to a stream
/// - lkf2__getClientByNameAndPwdResponse* lkf2__getClientByNameAndPwdResponse::soap_dup(soap*) returns deep copy of lkf2__getClientByNameAndPwdResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getClientByNameAndPwdResponse::soap_del() deep deletes lkf2__getClientByNameAndPwdResponse data members, use only after lkf2__getClientByNameAndPwdResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getClientByNameAndPwdResponse::soap_type() returns SOAP_TYPE_lkf2__getClientByNameAndPwdResponse or derived type identifier
class lkf2__getClientByNameAndPwdResponse
{ public:
/// Element "return" of type "http://dao.linexus.com/":client.
    lkf2__client*                        return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShoppingCart is a complexType.
///
/// @note class lkf2__deleteShoppingCart operations:
/// - lkf2__deleteShoppingCart* soap_new_lkf2__deleteShoppingCart(soap*) allocate and default initialize
/// - lkf2__deleteShoppingCart* soap_new_lkf2__deleteShoppingCart(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteShoppingCart* soap_new_req_lkf2__deleteShoppingCart(soap*, ...) allocate, set required members
/// - lkf2__deleteShoppingCart* soap_new_set_lkf2__deleteShoppingCart(soap*, ...) allocate, set all public members
/// - lkf2__deleteShoppingCart::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteShoppingCart(soap*, lkf2__deleteShoppingCart*) deserialize from a stream
/// - int soap_write_lkf2__deleteShoppingCart(soap*, lkf2__deleteShoppingCart*) serialize to a stream
/// - lkf2__deleteShoppingCart* lkf2__deleteShoppingCart::soap_dup(soap*) returns deep copy of lkf2__deleteShoppingCart, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteShoppingCart::soap_del() deep deletes lkf2__deleteShoppingCart data members, use only after lkf2__deleteShoppingCart::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteShoppingCart::soap_type() returns SOAP_TYPE_lkf2__deleteShoppingCart or derived type identifier
class lkf2__deleteShoppingCart
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    lkf2__order*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":deleteShoppingCartResponse is a complexType.
///
/// @note class lkf2__deleteShoppingCartResponse operations:
/// - lkf2__deleteShoppingCartResponse* soap_new_lkf2__deleteShoppingCartResponse(soap*) allocate and default initialize
/// - lkf2__deleteShoppingCartResponse* soap_new_lkf2__deleteShoppingCartResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__deleteShoppingCartResponse* soap_new_req_lkf2__deleteShoppingCartResponse(soap*, ...) allocate, set required members
/// - lkf2__deleteShoppingCartResponse* soap_new_set_lkf2__deleteShoppingCartResponse(soap*, ...) allocate, set all public members
/// - lkf2__deleteShoppingCartResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__deleteShoppingCartResponse(soap*, lkf2__deleteShoppingCartResponse*) deserialize from a stream
/// - int soap_write_lkf2__deleteShoppingCartResponse(soap*, lkf2__deleteShoppingCartResponse*) serialize to a stream
/// - lkf2__deleteShoppingCartResponse* lkf2__deleteShoppingCartResponse::soap_dup(soap*) returns deep copy of lkf2__deleteShoppingCartResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__deleteShoppingCartResponse::soap_del() deep deletes lkf2__deleteShoppingCartResponse data members, use only after lkf2__deleteShoppingCartResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__deleteShoppingCartResponse::soap_type() returns SOAP_TYPE_lkf2__deleteShoppingCartResponse or derived type identifier
class lkf2__deleteShoppingCartResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductList is a complexType.
///
/// @note class lkf2__getProductList operations:
/// - lkf2__getProductList* soap_new_lkf2__getProductList(soap*) allocate and default initialize
/// - lkf2__getProductList* soap_new_lkf2__getProductList(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductList* soap_new_req_lkf2__getProductList(soap*, ...) allocate, set required members
/// - lkf2__getProductList* soap_new_set_lkf2__getProductList(soap*, ...) allocate, set all public members
/// - lkf2__getProductList::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductList(soap*, lkf2__getProductList*) deserialize from a stream
/// - int soap_write_lkf2__getProductList(soap*, lkf2__getProductList*) serialize to a stream
/// - lkf2__getProductList* lkf2__getProductList::soap_dup(soap*) returns deep copy of lkf2__getProductList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductList::soap_del() deep deletes lkf2__getProductList data members, use only after lkf2__getProductList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductList::soap_type() returns SOAP_TYPE_lkf2__getProductList or derived type identifier
class lkf2__getProductList
{ public:
/// Element "arg0" of type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getProductListResponse is a complexType.
///
/// @note class lkf2__getProductListResponse operations:
/// - lkf2__getProductListResponse* soap_new_lkf2__getProductListResponse(soap*) allocate and default initialize
/// - lkf2__getProductListResponse* soap_new_lkf2__getProductListResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getProductListResponse* soap_new_req_lkf2__getProductListResponse(soap*, ...) allocate, set required members
/// - lkf2__getProductListResponse* soap_new_set_lkf2__getProductListResponse(soap*, ...) allocate, set all public members
/// - lkf2__getProductListResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getProductListResponse(soap*, lkf2__getProductListResponse*) deserialize from a stream
/// - int soap_write_lkf2__getProductListResponse(soap*, lkf2__getProductListResponse*) serialize to a stream
/// - lkf2__getProductListResponse* lkf2__getProductListResponse::soap_dup(soap*) returns deep copy of lkf2__getProductListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getProductListResponse::soap_del() deep deletes lkf2__getProductListResponse data members, use only after lkf2__getProductListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getProductListResponse::soap_type() returns SOAP_TYPE_lkf2__getProductListResponse or derived type identifier
class lkf2__getProductListResponse
{ public:
/// Vector of lkf2__product* of length 0..unbounded.
    std::vector<lkf2__product*         > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertClient is a complexType.
///
/// @note class lkf2__InsertClient operations:
/// - lkf2__InsertClient* soap_new_lkf2__InsertClient(soap*) allocate and default initialize
/// - lkf2__InsertClient* soap_new_lkf2__InsertClient(soap*, int num) allocate and default initialize an array
/// - lkf2__InsertClient* soap_new_req_lkf2__InsertClient(soap*, ...) allocate, set required members
/// - lkf2__InsertClient* soap_new_set_lkf2__InsertClient(soap*, ...) allocate, set all public members
/// - lkf2__InsertClient::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__InsertClient(soap*, lkf2__InsertClient*) deserialize from a stream
/// - int soap_write_lkf2__InsertClient(soap*, lkf2__InsertClient*) serialize to a stream
/// - lkf2__InsertClient* lkf2__InsertClient::soap_dup(soap*) returns deep copy of lkf2__InsertClient, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__InsertClient::soap_del() deep deletes lkf2__InsertClient data members, use only after lkf2__InsertClient::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__InsertClient::soap_type() returns SOAP_TYPE_lkf2__InsertClient or derived type identifier
class lkf2__InsertClient
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":client.
    lkf2__client*                        arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":InsertClientResponse is a complexType.
///
/// @note class lkf2__InsertClientResponse operations:
/// - lkf2__InsertClientResponse* soap_new_lkf2__InsertClientResponse(soap*) allocate and default initialize
/// - lkf2__InsertClientResponse* soap_new_lkf2__InsertClientResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__InsertClientResponse* soap_new_req_lkf2__InsertClientResponse(soap*, ...) allocate, set required members
/// - lkf2__InsertClientResponse* soap_new_set_lkf2__InsertClientResponse(soap*, ...) allocate, set all public members
/// - lkf2__InsertClientResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__InsertClientResponse(soap*, lkf2__InsertClientResponse*) deserialize from a stream
/// - int soap_write_lkf2__InsertClientResponse(soap*, lkf2__InsertClientResponse*) serialize to a stream
/// - lkf2__InsertClientResponse* lkf2__InsertClientResponse::soap_dup(soap*) returns deep copy of lkf2__InsertClientResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__InsertClientResponse::soap_del() deep deletes lkf2__InsertClientResponse data members, use only after lkf2__InsertClientResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__InsertClientResponse::soap_type() returns SOAP_TYPE_lkf2__InsertClientResponse or derived type identifier
class lkf2__InsertClientResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListHistory is a complexType.
///
/// @note class lkf2__getOrderListHistory operations:
/// - lkf2__getOrderListHistory* soap_new_lkf2__getOrderListHistory(soap*) allocate and default initialize
/// - lkf2__getOrderListHistory* soap_new_lkf2__getOrderListHistory(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderListHistory* soap_new_req_lkf2__getOrderListHistory(soap*, ...) allocate, set required members
/// - lkf2__getOrderListHistory* soap_new_set_lkf2__getOrderListHistory(soap*, ...) allocate, set all public members
/// - lkf2__getOrderListHistory::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderListHistory(soap*, lkf2__getOrderListHistory*) deserialize from a stream
/// - int soap_write_lkf2__getOrderListHistory(soap*, lkf2__getOrderListHistory*) serialize to a stream
/// - lkf2__getOrderListHistory* lkf2__getOrderListHistory::soap_dup(soap*) returns deep copy of lkf2__getOrderListHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderListHistory::soap_del() deep deletes lkf2__getOrderListHistory data members, use only after lkf2__getOrderListHistory::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderListHistory::soap_type() returns SOAP_TYPE_lkf2__getOrderListHistory or derived type identifier
class lkf2__getOrderListHistory
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":getOrderListHistoryResponse is a complexType.
///
/// @note class lkf2__getOrderListHistoryResponse operations:
/// - lkf2__getOrderListHistoryResponse* soap_new_lkf2__getOrderListHistoryResponse(soap*) allocate and default initialize
/// - lkf2__getOrderListHistoryResponse* soap_new_lkf2__getOrderListHistoryResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__getOrderListHistoryResponse* soap_new_req_lkf2__getOrderListHistoryResponse(soap*, ...) allocate, set required members
/// - lkf2__getOrderListHistoryResponse* soap_new_set_lkf2__getOrderListHistoryResponse(soap*, ...) allocate, set all public members
/// - lkf2__getOrderListHistoryResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__getOrderListHistoryResponse(soap*, lkf2__getOrderListHistoryResponse*) deserialize from a stream
/// - int soap_write_lkf2__getOrderListHistoryResponse(soap*, lkf2__getOrderListHistoryResponse*) serialize to a stream
/// - lkf2__getOrderListHistoryResponse* lkf2__getOrderListHistoryResponse::soap_dup(soap*) returns deep copy of lkf2__getOrderListHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__getOrderListHistoryResponse::soap_del() deep deletes lkf2__getOrderListHistoryResponse data members, use only after lkf2__getOrderListHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__getOrderListHistoryResponse::soap_type() returns SOAP_TYPE_lkf2__getOrderListHistoryResponse or derived type identifier
class lkf2__getOrderListHistoryResponse
{ public:
/// Vector of lkf2__order* of length 0..unbounded.
    std::vector<lkf2__order*           > return_                        0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateHistory is a complexType.
///
/// @note class lkf2__updateHistory operations:
/// - lkf2__updateHistory* soap_new_lkf2__updateHistory(soap*) allocate and default initialize
/// - lkf2__updateHistory* soap_new_lkf2__updateHistory(soap*, int num) allocate and default initialize an array
/// - lkf2__updateHistory* soap_new_req_lkf2__updateHistory(soap*, ...) allocate, set required members
/// - lkf2__updateHistory* soap_new_set_lkf2__updateHistory(soap*, ...) allocate, set all public members
/// - lkf2__updateHistory::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateHistory(soap*, lkf2__updateHistory*) deserialize from a stream
/// - int soap_write_lkf2__updateHistory(soap*, lkf2__updateHistory*) serialize to a stream
/// - lkf2__updateHistory* lkf2__updateHistory::soap_dup(soap*) returns deep copy of lkf2__updateHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateHistory::soap_del() deep deletes lkf2__updateHistory data members, use only after lkf2__updateHistory::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateHistory::soap_type() returns SOAP_TYPE_lkf2__updateHistory or derived type identifier
class lkf2__updateHistory
{ public:
/// Element "arg0" of type "http://dao.linexus.com/":order.
    lkf2__order*                         arg0                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://dao.linexus.com/":updateHistoryResponse is a complexType.
///
/// @note class lkf2__updateHistoryResponse operations:
/// - lkf2__updateHistoryResponse* soap_new_lkf2__updateHistoryResponse(soap*) allocate and default initialize
/// - lkf2__updateHistoryResponse* soap_new_lkf2__updateHistoryResponse(soap*, int num) allocate and default initialize an array
/// - lkf2__updateHistoryResponse* soap_new_req_lkf2__updateHistoryResponse(soap*, ...) allocate, set required members
/// - lkf2__updateHistoryResponse* soap_new_set_lkf2__updateHistoryResponse(soap*, ...) allocate, set all public members
/// - lkf2__updateHistoryResponse::soap_default(soap*) default initialize members
/// - int soap_read_lkf2__updateHistoryResponse(soap*, lkf2__updateHistoryResponse*) deserialize from a stream
/// - int soap_write_lkf2__updateHistoryResponse(soap*, lkf2__updateHistoryResponse*) serialize to a stream
/// - lkf2__updateHistoryResponse* lkf2__updateHistoryResponse::soap_dup(soap*) returns deep copy of lkf2__updateHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - lkf2__updateHistoryResponse::soap_del() deep deletes lkf2__updateHistoryResponse data members, use only after lkf2__updateHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int lkf2__updateHistoryResponse::soap_type() returns SOAP_TYPE_lkf2__updateHistoryResponse or derived type identifier
class lkf2__updateHistoryResponse
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://dao.linexus.com/":InsertClient of type "http://dao.linexus.com/":InsertClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":InsertClientResponse of type "http://dao.linexus.com/":InsertClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addOrder of type "http://dao.linexus.com/":addOrder.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addOrderResponse of type "http://dao.linexus.com/":addOrderResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProduct of type "http://dao.linexus.com/":addProduct.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductResponse of type "http://dao.linexus.com/":addProductResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductType of type "http://dao.linexus.com/":addProductType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":addProductTypeResponse of type "http://dao.linexus.com/":addProductTypeResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteClientByNameAndPwd of type "http://dao.linexus.com/":deleteClientByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteClientByNameAndPwdResponse of type "http://dao.linexus.com/":deleteClientByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductByInfo of type "http://dao.linexus.com/":deleteProductByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductByInfoResponse of type "http://dao.linexus.com/":deleteProductByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductTypeByName of type "http://dao.linexus.com/":deleteProductTypeByName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteProductTypeByNameResponse of type "http://dao.linexus.com/":deleteProductTypeByNameResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShoppingCart of type "http://dao.linexus.com/":deleteShoppingCart.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":deleteShoppingCartResponse of type "http://dao.linexus.com/":deleteShoppingCartResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientByNameAndPwd of type "http://dao.linexus.com/":getClientByNameAndPwd.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientByNameAndPwdResponse of type "http://dao.linexus.com/":getClientByNameAndPwdResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientLikeList of type "http://dao.linexus.com/":getClientLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientLikeListResponse of type "http://dao.linexus.com/":getClientLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientList of type "http://dao.linexus.com/":getClientList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getClientListResponse of type "http://dao.linexus.com/":getClientListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderLikeList of type "http://dao.linexus.com/":getOrderLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderLikeListResponse of type "http://dao.linexus.com/":getOrderLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderList of type "http://dao.linexus.com/":getOrderList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListByInfo of type "http://dao.linexus.com/":getOrderListByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListByInfoResponse of type "http://dao.linexus.com/":getOrderListByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListHistory of type "http://dao.linexus.com/":getOrderListHistory.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListHistoryResponse of type "http://dao.linexus.com/":getOrderListHistoryResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getOrderListResponse of type "http://dao.linexus.com/":getOrderListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductLikeList of type "http://dao.linexus.com/":getProductLikeList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductLikeListResponse of type "http://dao.linexus.com/":getProductLikeListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductList of type "http://dao.linexus.com/":getProductList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListByInfo of type "http://dao.linexus.com/":getProductListByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListByInfoResponse of type "http://dao.linexus.com/":getProductListByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductListResponse of type "http://dao.linexus.com/":getProductListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductTypeByProName of type "http://dao.linexus.com/":getProductTypeByProName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":getProductTypeByProNameResponse of type "http://dao.linexus.com/":getProductTypeByProNameResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateClient of type "http://dao.linexus.com/":updateClient.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateClientResponse of type "http://dao.linexus.com/":updateClientResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateHistory of type "http://dao.linexus.com/":updateHistory.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateHistoryResponse of type "http://dao.linexus.com/":updateHistoryResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateProductByInfo of type "http://dao.linexus.com/":updateProductByInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://dao.linexus.com/":updateProductByInfoResponse of type "http://dao.linexus.com/":updateProductByInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://dao.linexus.com/                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap lkf1 service name:	WholeMapperSoapBinding 
//gsoap lkf1 service type:	WholeMapper 
//gsoap lkf1 service port:	http://localhost:8090/WholeMapper 
//gsoap lkf1 service namespace:	http://service.linexus.com/ 
//gsoap lkf1 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WholeMapper Definitions

@section WholeMapper_bindings Service Bindings

  - @ref WholeMapperSoapBinding

@section WholeMapper_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page WholeMapperSoapBinding Binding "WholeMapperSoapBinding"

@section WholeMapperSoapBinding_operations Operations of Binding "WholeMapperSoapBinding"

  - @ref __lkf1__addProduct

  - @ref __lkf1__deleteProductTypeByName

  - @ref __lkf1__getOrderList

  - @ref __lkf1__getProductListByInfo

  - @ref __lkf1__updateClient

  - @ref __lkf1__deleteClientByNameAndPwd

  - @ref __lkf1__deleteProductByInfo

  - @ref __lkf1__getOrderLikeList

  - @ref __lkf1__getClientLikeList

  - @ref __lkf1__getProductTypeByProName

  - @ref __lkf1__getClientList

  - @ref __lkf1__getOrderListByInfo

  - @ref __lkf1__addProductType

  - @ref __lkf1__updateProductByInfo

  - @ref __lkf1__getProductLikeList

  - @ref __lkf1__addOrder

  - @ref __lkf1__getClientByNameAndPwd

  - @ref __lkf1__deleteShoppingCart

  - @ref __lkf1__getProductList

  - @ref __lkf1__InsertClient

  - @ref __lkf1__getOrderListHistory

  - @ref __lkf1__updateHistory

@section WholeMapperSoapBinding_ports Default endpoints of Binding "WholeMapperSoapBinding"

  - http://localhost:8090/WholeMapper

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WholeMapperSoapBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__addProduct                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__addProduct" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__addProduct(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__addProduct*                   lkf2__addProduct_,
    // output parameters:
    lkf2__addProductResponse           &lkf2__addProductResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__addProduct(
    struct soap *soap,
    // input parameters:
    lkf2__addProduct*                   lkf2__addProduct_,
    // output parameters:
    lkf2__addProductResponse           &lkf2__addProductResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	addProduct SOAP
//gsoap lkf1 service method-style:	addProduct document
//gsoap lkf1 service method-encoding:	addProduct literal
//gsoap lkf1 service method-action:	addProduct ""
//gsoap lkf1 service method-output-action:	addProduct Response
int __lkf1__addProduct(
    lkf2__addProduct*                   lkf2__addProduct_,	///< Input parameter
    lkf2__addProductResponse           &lkf2__addProductResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__deleteProductTypeByName                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__deleteProductTypeByName" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__deleteProductTypeByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__deleteProductTypeByName*      lkf2__deleteProductTypeByName_,
    // output parameters:
    lkf2__deleteProductTypeByNameResponse&lkf2__deleteProductTypeByNameResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__deleteProductTypeByName(
    struct soap *soap,
    // input parameters:
    lkf2__deleteProductTypeByName*      lkf2__deleteProductTypeByName_,
    // output parameters:
    lkf2__deleteProductTypeByNameResponse&lkf2__deleteProductTypeByNameResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	deleteProductTypeByName SOAP
//gsoap lkf1 service method-style:	deleteProductTypeByName document
//gsoap lkf1 service method-encoding:	deleteProductTypeByName literal
//gsoap lkf1 service method-action:	deleteProductTypeByName ""
//gsoap lkf1 service method-output-action:	deleteProductTypeByName Response
int __lkf1__deleteProductTypeByName(
    lkf2__deleteProductTypeByName*      lkf2__deleteProductTypeByName_,	///< Input parameter
    lkf2__deleteProductTypeByNameResponse&lkf2__deleteProductTypeByNameResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getOrderList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getOrderList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getOrderList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getOrderList*                 lkf2__getOrderList_,
    // output parameters:
    lkf2__getOrderListResponse         &lkf2__getOrderListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getOrderList(
    struct soap *soap,
    // input parameters:
    lkf2__getOrderList*                 lkf2__getOrderList_,
    // output parameters:
    lkf2__getOrderListResponse         &lkf2__getOrderListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getOrderList SOAP
//gsoap lkf1 service method-style:	getOrderList document
//gsoap lkf1 service method-encoding:	getOrderList literal
//gsoap lkf1 service method-action:	getOrderList ""
//gsoap lkf1 service method-output-action:	getOrderList Response
int __lkf1__getOrderList(
    lkf2__getOrderList*                 lkf2__getOrderList_,	///< Input parameter
    lkf2__getOrderListResponse         &lkf2__getOrderListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getProductListByInfo                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getProductListByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getProductListByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getProductListByInfo*         lkf2__getProductListByInfo_,
    // output parameters:
    lkf2__getProductListByInfoResponse &lkf2__getProductListByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getProductListByInfo(
    struct soap *soap,
    // input parameters:
    lkf2__getProductListByInfo*         lkf2__getProductListByInfo_,
    // output parameters:
    lkf2__getProductListByInfoResponse &lkf2__getProductListByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getProductListByInfo SOAP
//gsoap lkf1 service method-style:	getProductListByInfo document
//gsoap lkf1 service method-encoding:	getProductListByInfo literal
//gsoap lkf1 service method-action:	getProductListByInfo ""
//gsoap lkf1 service method-output-action:	getProductListByInfo Response
int __lkf1__getProductListByInfo(
    lkf2__getProductListByInfo*         lkf2__getProductListByInfo_,	///< Input parameter
    lkf2__getProductListByInfoResponse &lkf2__getProductListByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__updateClient                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__updateClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__updateClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__updateClient*                 lkf2__updateClient_,
    // output parameters:
    lkf2__updateClientResponse         &lkf2__updateClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__updateClient(
    struct soap *soap,
    // input parameters:
    lkf2__updateClient*                 lkf2__updateClient_,
    // output parameters:
    lkf2__updateClientResponse         &lkf2__updateClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	updateClient SOAP
//gsoap lkf1 service method-style:	updateClient document
//gsoap lkf1 service method-encoding:	updateClient literal
//gsoap lkf1 service method-action:	updateClient ""
//gsoap lkf1 service method-output-action:	updateClient Response
int __lkf1__updateClient(
    lkf2__updateClient*                 lkf2__updateClient_,	///< Input parameter
    lkf2__updateClientResponse         &lkf2__updateClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__deleteClientByNameAndPwd                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__deleteClientByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__deleteClientByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__deleteClientByNameAndPwd*     lkf2__deleteClientByNameAndPwd_,
    // output parameters:
    lkf2__deleteClientByNameAndPwdResponse&lkf2__deleteClientByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__deleteClientByNameAndPwd(
    struct soap *soap,
    // input parameters:
    lkf2__deleteClientByNameAndPwd*     lkf2__deleteClientByNameAndPwd_,
    // output parameters:
    lkf2__deleteClientByNameAndPwdResponse&lkf2__deleteClientByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	deleteClientByNameAndPwd SOAP
//gsoap lkf1 service method-style:	deleteClientByNameAndPwd document
//gsoap lkf1 service method-encoding:	deleteClientByNameAndPwd literal
//gsoap lkf1 service method-action:	deleteClientByNameAndPwd ""
//gsoap lkf1 service method-output-action:	deleteClientByNameAndPwd Response
int __lkf1__deleteClientByNameAndPwd(
    lkf2__deleteClientByNameAndPwd*     lkf2__deleteClientByNameAndPwd_,	///< Input parameter
    lkf2__deleteClientByNameAndPwdResponse&lkf2__deleteClientByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__deleteProductByInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__deleteProductByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__deleteProductByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__deleteProductByInfo*          lkf2__deleteProductByInfo_,
    // output parameters:
    lkf2__deleteProductByInfoResponse  &lkf2__deleteProductByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__deleteProductByInfo(
    struct soap *soap,
    // input parameters:
    lkf2__deleteProductByInfo*          lkf2__deleteProductByInfo_,
    // output parameters:
    lkf2__deleteProductByInfoResponse  &lkf2__deleteProductByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	deleteProductByInfo SOAP
//gsoap lkf1 service method-style:	deleteProductByInfo document
//gsoap lkf1 service method-encoding:	deleteProductByInfo literal
//gsoap lkf1 service method-action:	deleteProductByInfo ""
//gsoap lkf1 service method-output-action:	deleteProductByInfo Response
int __lkf1__deleteProductByInfo(
    lkf2__deleteProductByInfo*          lkf2__deleteProductByInfo_,	///< Input parameter
    lkf2__deleteProductByInfoResponse  &lkf2__deleteProductByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getOrderLikeList                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getOrderLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getOrderLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getOrderLikeList*             lkf2__getOrderLikeList_,
    // output parameters:
    lkf2__getOrderLikeListResponse     &lkf2__getOrderLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getOrderLikeList(
    struct soap *soap,
    // input parameters:
    lkf2__getOrderLikeList*             lkf2__getOrderLikeList_,
    // output parameters:
    lkf2__getOrderLikeListResponse     &lkf2__getOrderLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getOrderLikeList SOAP
//gsoap lkf1 service method-style:	getOrderLikeList document
//gsoap lkf1 service method-encoding:	getOrderLikeList literal
//gsoap lkf1 service method-action:	getOrderLikeList ""
//gsoap lkf1 service method-output-action:	getOrderLikeList Response
int __lkf1__getOrderLikeList(
    lkf2__getOrderLikeList*             lkf2__getOrderLikeList_,	///< Input parameter
    lkf2__getOrderLikeListResponse     &lkf2__getOrderLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getClientLikeList                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getClientLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getClientLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getClientLikeList*            lkf2__getClientLikeList_,
    // output parameters:
    lkf2__getClientLikeListResponse    &lkf2__getClientLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getClientLikeList(
    struct soap *soap,
    // input parameters:
    lkf2__getClientLikeList*            lkf2__getClientLikeList_,
    // output parameters:
    lkf2__getClientLikeListResponse    &lkf2__getClientLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getClientLikeList SOAP
//gsoap lkf1 service method-style:	getClientLikeList document
//gsoap lkf1 service method-encoding:	getClientLikeList literal
//gsoap lkf1 service method-action:	getClientLikeList ""
//gsoap lkf1 service method-output-action:	getClientLikeList Response
int __lkf1__getClientLikeList(
    lkf2__getClientLikeList*            lkf2__getClientLikeList_,	///< Input parameter
    lkf2__getClientLikeListResponse    &lkf2__getClientLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getProductTypeByProName                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getProductTypeByProName" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getProductTypeByProName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getProductTypeByProName*      lkf2__getProductTypeByProName_,
    // output parameters:
    lkf2__getProductTypeByProNameResponse&lkf2__getProductTypeByProNameResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getProductTypeByProName(
    struct soap *soap,
    // input parameters:
    lkf2__getProductTypeByProName*      lkf2__getProductTypeByProName_,
    // output parameters:
    lkf2__getProductTypeByProNameResponse&lkf2__getProductTypeByProNameResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getProductTypeByProName SOAP
//gsoap lkf1 service method-style:	getProductTypeByProName document
//gsoap lkf1 service method-encoding:	getProductTypeByProName literal
//gsoap lkf1 service method-action:	getProductTypeByProName ""
//gsoap lkf1 service method-output-action:	getProductTypeByProName Response
int __lkf1__getProductTypeByProName(
    lkf2__getProductTypeByProName*      lkf2__getProductTypeByProName_,	///< Input parameter
    lkf2__getProductTypeByProNameResponse&lkf2__getProductTypeByProNameResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getClientList                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getClientList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getClientList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getClientList*                lkf2__getClientList_,
    // output parameters:
    lkf2__getClientListResponse        &lkf2__getClientListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getClientList(
    struct soap *soap,
    // input parameters:
    lkf2__getClientList*                lkf2__getClientList_,
    // output parameters:
    lkf2__getClientListResponse        &lkf2__getClientListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getClientList SOAP
//gsoap lkf1 service method-style:	getClientList document
//gsoap lkf1 service method-encoding:	getClientList literal
//gsoap lkf1 service method-action:	getClientList ""
//gsoap lkf1 service method-output-action:	getClientList Response
int __lkf1__getClientList(
    lkf2__getClientList*                lkf2__getClientList_,	///< Input parameter
    lkf2__getClientListResponse        &lkf2__getClientListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getOrderListByInfo                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getOrderListByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getOrderListByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getOrderListByInfo*           lkf2__getOrderListByInfo_,
    // output parameters:
    lkf2__getOrderListByInfoResponse   &lkf2__getOrderListByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getOrderListByInfo(
    struct soap *soap,
    // input parameters:
    lkf2__getOrderListByInfo*           lkf2__getOrderListByInfo_,
    // output parameters:
    lkf2__getOrderListByInfoResponse   &lkf2__getOrderListByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getOrderListByInfo SOAP
//gsoap lkf1 service method-style:	getOrderListByInfo document
//gsoap lkf1 service method-encoding:	getOrderListByInfo literal
//gsoap lkf1 service method-action:	getOrderListByInfo ""
//gsoap lkf1 service method-output-action:	getOrderListByInfo Response
int __lkf1__getOrderListByInfo(
    lkf2__getOrderListByInfo*           lkf2__getOrderListByInfo_,	///< Input parameter
    lkf2__getOrderListByInfoResponse   &lkf2__getOrderListByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__addProductType                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__addProductType" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__addProductType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__addProductType*               lkf2__addProductType_,
    // output parameters:
    lkf2__addProductTypeResponse       &lkf2__addProductTypeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__addProductType(
    struct soap *soap,
    // input parameters:
    lkf2__addProductType*               lkf2__addProductType_,
    // output parameters:
    lkf2__addProductTypeResponse       &lkf2__addProductTypeResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	addProductType SOAP
//gsoap lkf1 service method-style:	addProductType document
//gsoap lkf1 service method-encoding:	addProductType literal
//gsoap lkf1 service method-action:	addProductType ""
//gsoap lkf1 service method-output-action:	addProductType Response
int __lkf1__addProductType(
    lkf2__addProductType*               lkf2__addProductType_,	///< Input parameter
    lkf2__addProductTypeResponse       &lkf2__addProductTypeResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__updateProductByInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__updateProductByInfo" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__updateProductByInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__updateProductByInfo*          lkf2__updateProductByInfo_,
    // output parameters:
    lkf2__updateProductByInfoResponse  &lkf2__updateProductByInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__updateProductByInfo(
    struct soap *soap,
    // input parameters:
    lkf2__updateProductByInfo*          lkf2__updateProductByInfo_,
    // output parameters:
    lkf2__updateProductByInfoResponse  &lkf2__updateProductByInfoResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	updateProductByInfo SOAP
//gsoap lkf1 service method-style:	updateProductByInfo document
//gsoap lkf1 service method-encoding:	updateProductByInfo literal
//gsoap lkf1 service method-action:	updateProductByInfo ""
//gsoap lkf1 service method-output-action:	updateProductByInfo Response
int __lkf1__updateProductByInfo(
    lkf2__updateProductByInfo*          lkf2__updateProductByInfo_,	///< Input parameter
    lkf2__updateProductByInfoResponse  &lkf2__updateProductByInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getProductLikeList                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getProductLikeList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getProductLikeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getProductLikeList*           lkf2__getProductLikeList_,
    // output parameters:
    lkf2__getProductLikeListResponse   &lkf2__getProductLikeListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getProductLikeList(
    struct soap *soap,
    // input parameters:
    lkf2__getProductLikeList*           lkf2__getProductLikeList_,
    // output parameters:
    lkf2__getProductLikeListResponse   &lkf2__getProductLikeListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getProductLikeList SOAP
//gsoap lkf1 service method-style:	getProductLikeList document
//gsoap lkf1 service method-encoding:	getProductLikeList literal
//gsoap lkf1 service method-action:	getProductLikeList ""
//gsoap lkf1 service method-output-action:	getProductLikeList Response
int __lkf1__getProductLikeList(
    lkf2__getProductLikeList*           lkf2__getProductLikeList_,	///< Input parameter
    lkf2__getProductLikeListResponse   &lkf2__getProductLikeListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__addOrder                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__addOrder" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__addOrder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__addOrder*                     lkf2__addOrder_,
    // output parameters:
    lkf2__addOrderResponse             &lkf2__addOrderResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__addOrder(
    struct soap *soap,
    // input parameters:
    lkf2__addOrder*                     lkf2__addOrder_,
    // output parameters:
    lkf2__addOrderResponse             &lkf2__addOrderResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	addOrder SOAP
//gsoap lkf1 service method-style:	addOrder document
//gsoap lkf1 service method-encoding:	addOrder literal
//gsoap lkf1 service method-action:	addOrder ""
//gsoap lkf1 service method-output-action:	addOrder Response
int __lkf1__addOrder(
    lkf2__addOrder*                     lkf2__addOrder_,	///< Input parameter
    lkf2__addOrderResponse             &lkf2__addOrderResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getClientByNameAndPwd                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getClientByNameAndPwd" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getClientByNameAndPwd(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getClientByNameAndPwd*        lkf2__getClientByNameAndPwd_,
    // output parameters:
    lkf2__getClientByNameAndPwdResponse&lkf2__getClientByNameAndPwdResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getClientByNameAndPwd(
    struct soap *soap,
    // input parameters:
    lkf2__getClientByNameAndPwd*        lkf2__getClientByNameAndPwd_,
    // output parameters:
    lkf2__getClientByNameAndPwdResponse&lkf2__getClientByNameAndPwdResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getClientByNameAndPwd SOAP
//gsoap lkf1 service method-style:	getClientByNameAndPwd document
//gsoap lkf1 service method-encoding:	getClientByNameAndPwd literal
//gsoap lkf1 service method-action:	getClientByNameAndPwd ""
//gsoap lkf1 service method-output-action:	getClientByNameAndPwd Response
int __lkf1__getClientByNameAndPwd(
    lkf2__getClientByNameAndPwd*        lkf2__getClientByNameAndPwd_,	///< Input parameter
    lkf2__getClientByNameAndPwdResponse&lkf2__getClientByNameAndPwdResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__deleteShoppingCart                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__deleteShoppingCart" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__deleteShoppingCart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__deleteShoppingCart*           lkf2__deleteShoppingCart_,
    // output parameters:
    lkf2__deleteShoppingCartResponse   &lkf2__deleteShoppingCartResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__deleteShoppingCart(
    struct soap *soap,
    // input parameters:
    lkf2__deleteShoppingCart*           lkf2__deleteShoppingCart_,
    // output parameters:
    lkf2__deleteShoppingCartResponse   &lkf2__deleteShoppingCartResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	deleteShoppingCart SOAP
//gsoap lkf1 service method-style:	deleteShoppingCart document
//gsoap lkf1 service method-encoding:	deleteShoppingCart literal
//gsoap lkf1 service method-action:	deleteShoppingCart ""
//gsoap lkf1 service method-output-action:	deleteShoppingCart Response
int __lkf1__deleteShoppingCart(
    lkf2__deleteShoppingCart*           lkf2__deleteShoppingCart_,	///< Input parameter
    lkf2__deleteShoppingCartResponse   &lkf2__deleteShoppingCartResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getProductList                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getProductList" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getProductList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getProductList*               lkf2__getProductList_,
    // output parameters:
    lkf2__getProductListResponse       &lkf2__getProductListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getProductList(
    struct soap *soap,
    // input parameters:
    lkf2__getProductList*               lkf2__getProductList_,
    // output parameters:
    lkf2__getProductListResponse       &lkf2__getProductListResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getProductList SOAP
//gsoap lkf1 service method-style:	getProductList document
//gsoap lkf1 service method-encoding:	getProductList literal
//gsoap lkf1 service method-action:	getProductList ""
//gsoap lkf1 service method-output-action:	getProductList Response
int __lkf1__getProductList(
    lkf2__getProductList*               lkf2__getProductList_,	///< Input parameter
    lkf2__getProductListResponse       &lkf2__getProductListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__InsertClient                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__InsertClient" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__InsertClient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__InsertClient*                 lkf2__InsertClient_,
    // output parameters:
    lkf2__InsertClientResponse         &lkf2__InsertClientResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__InsertClient(
    struct soap *soap,
    // input parameters:
    lkf2__InsertClient*                 lkf2__InsertClient_,
    // output parameters:
    lkf2__InsertClientResponse         &lkf2__InsertClientResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	InsertClient SOAP
//gsoap lkf1 service method-style:	InsertClient document
//gsoap lkf1 service method-encoding:	InsertClient literal
//gsoap lkf1 service method-action:	InsertClient ""
//gsoap lkf1 service method-output-action:	InsertClient Response
int __lkf1__InsertClient(
    lkf2__InsertClient*                 lkf2__InsertClient_,	///< Input parameter
    lkf2__InsertClientResponse         &lkf2__InsertClientResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__getOrderListHistory                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__getOrderListHistory" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__getOrderListHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__getOrderListHistory*          lkf2__getOrderListHistory_,
    // output parameters:
    lkf2__getOrderListHistoryResponse  &lkf2__getOrderListHistoryResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__getOrderListHistory(
    struct soap *soap,
    // input parameters:
    lkf2__getOrderListHistory*          lkf2__getOrderListHistory_,
    // output parameters:
    lkf2__getOrderListHistoryResponse  &lkf2__getOrderListHistoryResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	getOrderListHistory SOAP
//gsoap lkf1 service method-style:	getOrderListHistory document
//gsoap lkf1 service method-encoding:	getOrderListHistory literal
//gsoap lkf1 service method-action:	getOrderListHistory ""
//gsoap lkf1 service method-output-action:	getOrderListHistory Response
int __lkf1__getOrderListHistory(
    lkf2__getOrderListHistory*          lkf2__getOrderListHistory_,	///< Input parameter
    lkf2__getOrderListHistoryResponse  &lkf2__getOrderListHistoryResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __lkf1__updateHistory                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__lkf1__updateHistory" of service binding "WholeMapperSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8090/WholeMapper

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___lkf1__updateHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    lkf2__updateHistory*                lkf2__updateHistory_,
    // output parameters:
    lkf2__updateHistoryResponse        &lkf2__updateHistoryResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __lkf1__updateHistory(
    struct soap *soap,
    // input parameters:
    lkf2__updateHistory*                lkf2__updateHistory_,
    // output parameters:
    lkf2__updateHistoryResponse        &lkf2__updateHistoryResponse_
  );
@endcode

C++ proxy class (defined in soapWholeMapperSoapBindingProxy.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWholeMapperSoapBindingService.h generated with soapcpp2):
@code
  class WholeMapperSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap lkf1 service method-protocol:	updateHistory SOAP
//gsoap lkf1 service method-style:	updateHistory document
//gsoap lkf1 service method-encoding:	updateHistory literal
//gsoap lkf1 service method-action:	updateHistory ""
//gsoap lkf1 service method-output-action:	updateHistory Response
int __lkf1__updateHistory(
    lkf2__updateHistory*                lkf2__updateHistory_,	///< Input parameter
    lkf2__updateHistoryResponse        &lkf2__updateHistoryResponse_	///< Output parameter
);

/** @page WholeMapperSoapBinding Binding "WholeMapperSoapBinding"

@section WholeMapperSoapBinding_policy_enablers Policy Enablers of Binding "WholeMapperSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section lkf2 Top-level root elements of schema "http://dao.linexus.com/"

  - <lkf2:InsertClient> (use wsdl2h option -g to auto-generate type _lkf2__InsertClient)

  - <lkf2:InsertClientResponse> (use wsdl2h option -g to auto-generate type _lkf2__InsertClientResponse)

  - <lkf2:addOrder> (use wsdl2h option -g to auto-generate type _lkf2__addOrder)

  - <lkf2:addOrderResponse> (use wsdl2h option -g to auto-generate type _lkf2__addOrderResponse)

  - <lkf2:addProduct> (use wsdl2h option -g to auto-generate type _lkf2__addProduct)

  - <lkf2:addProductResponse> (use wsdl2h option -g to auto-generate type _lkf2__addProductResponse)

  - <lkf2:addProductType> (use wsdl2h option -g to auto-generate type _lkf2__addProductType)

  - <lkf2:addProductTypeResponse> (use wsdl2h option -g to auto-generate type _lkf2__addProductTypeResponse)

  - <lkf2:deleteClientByNameAndPwd> (use wsdl2h option -g to auto-generate type _lkf2__deleteClientByNameAndPwd)

  - <lkf2:deleteClientByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _lkf2__deleteClientByNameAndPwdResponse)

  - <lkf2:deleteProductByInfo> (use wsdl2h option -g to auto-generate type _lkf2__deleteProductByInfo)

  - <lkf2:deleteProductByInfoResponse> (use wsdl2h option -g to auto-generate type _lkf2__deleteProductByInfoResponse)

  - <lkf2:deleteProductTypeByName> (use wsdl2h option -g to auto-generate type _lkf2__deleteProductTypeByName)

  - <lkf2:deleteProductTypeByNameResponse> (use wsdl2h option -g to auto-generate type _lkf2__deleteProductTypeByNameResponse)

  - <lkf2:deleteShoppingCart> (use wsdl2h option -g to auto-generate type _lkf2__deleteShoppingCart)

  - <lkf2:deleteShoppingCartResponse> (use wsdl2h option -g to auto-generate type _lkf2__deleteShoppingCartResponse)

  - <lkf2:getClientByNameAndPwd> (use wsdl2h option -g to auto-generate type _lkf2__getClientByNameAndPwd)

  - <lkf2:getClientByNameAndPwdResponse> (use wsdl2h option -g to auto-generate type _lkf2__getClientByNameAndPwdResponse)

  - <lkf2:getClientLikeList> (use wsdl2h option -g to auto-generate type _lkf2__getClientLikeList)

  - <lkf2:getClientLikeListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getClientLikeListResponse)

  - <lkf2:getClientList> (use wsdl2h option -g to auto-generate type _lkf2__getClientList)

  - <lkf2:getClientListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getClientListResponse)

  - <lkf2:getOrderLikeList> (use wsdl2h option -g to auto-generate type _lkf2__getOrderLikeList)

  - <lkf2:getOrderLikeListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getOrderLikeListResponse)

  - <lkf2:getOrderList> (use wsdl2h option -g to auto-generate type _lkf2__getOrderList)

  - <lkf2:getOrderListByInfo> (use wsdl2h option -g to auto-generate type _lkf2__getOrderListByInfo)

  - <lkf2:getOrderListByInfoResponse> (use wsdl2h option -g to auto-generate type _lkf2__getOrderListByInfoResponse)

  - <lkf2:getOrderListHistory> (use wsdl2h option -g to auto-generate type _lkf2__getOrderListHistory)

  - <lkf2:getOrderListHistoryResponse> (use wsdl2h option -g to auto-generate type _lkf2__getOrderListHistoryResponse)

  - <lkf2:getOrderListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getOrderListResponse)

  - <lkf2:getProductLikeList> (use wsdl2h option -g to auto-generate type _lkf2__getProductLikeList)

  - <lkf2:getProductLikeListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getProductLikeListResponse)

  - <lkf2:getProductList> (use wsdl2h option -g to auto-generate type _lkf2__getProductList)

  - <lkf2:getProductListByInfo> (use wsdl2h option -g to auto-generate type _lkf2__getProductListByInfo)

  - <lkf2:getProductListByInfoResponse> (use wsdl2h option -g to auto-generate type _lkf2__getProductListByInfoResponse)

  - <lkf2:getProductListResponse> (use wsdl2h option -g to auto-generate type _lkf2__getProductListResponse)

  - <lkf2:getProductTypeByProName> (use wsdl2h option -g to auto-generate type _lkf2__getProductTypeByProName)

  - <lkf2:getProductTypeByProNameResponse> (use wsdl2h option -g to auto-generate type _lkf2__getProductTypeByProNameResponse)

  - <lkf2:updateClient> (use wsdl2h option -g to auto-generate type _lkf2__updateClient)

  - <lkf2:updateClientResponse> (use wsdl2h option -g to auto-generate type _lkf2__updateClientResponse)

  - <lkf2:updateHistory> (use wsdl2h option -g to auto-generate type _lkf2__updateHistory)

  - <lkf2:updateHistoryResponse> (use wsdl2h option -g to auto-generate type _lkf2__updateHistoryResponse)

  - <lkf2:updateProductByInfo> (use wsdl2h option -g to auto-generate type _lkf2__updateProductByInfo)

  - <lkf2:updateProductByInfoResponse> (use wsdl2h option -g to auto-generate type _lkf2__updateProductByInfoResponse)

*/

/* End of taskInfo.h */
