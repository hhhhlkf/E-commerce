/* soapH.h
   Generated by gSOAP 2.8.117 for taskInfo.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/
//本文件内所有代码为生成文件，如无必要不需要进行修改
#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateHistoryResponse_DEFINED
#define SOAP_TYPE_lkf2__updateHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateHistoryResponse(struct soap*, const char*, int, const lkf2__updateHistoryResponse *, const char*);
SOAP_FMAC3 lkf2__updateHistoryResponse * SOAP_FMAC4 soap_in_lkf2__updateHistoryResponse(struct soap*, const char*, lkf2__updateHistoryResponse *, const char*);
SOAP_FMAC1 lkf2__updateHistoryResponse * SOAP_FMAC2 soap_instantiate_lkf2__updateHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateHistoryResponse * soap_new_lkf2__updateHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateHistoryResponse * soap_new_req_lkf2__updateHistoryResponse(
	struct soap *soap)
{
	lkf2__updateHistoryResponse *_p = ::soap_new_lkf2__updateHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateHistoryResponse * soap_new_set_lkf2__updateHistoryResponse(
	struct soap *soap)
{
	lkf2__updateHistoryResponse *_p = ::soap_new_lkf2__updateHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__updateHistoryResponse(struct soap *soap, lkf2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateHistoryResponse(struct soap *soap, const char *URL, lkf2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateHistoryResponse(struct soap *soap, const char *URL, lkf2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateHistoryResponse(struct soap *soap, const char *URL, lkf2__updateHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__updateHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateHistoryResponse * SOAP_FMAC4 soap_get_lkf2__updateHistoryResponse(struct soap*, lkf2__updateHistoryResponse *, const char*, const char*);

inline int soap_read_lkf2__updateHistoryResponse(struct soap *soap, lkf2__updateHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateHistoryResponse(struct soap *soap, const char *URL, lkf2__updateHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateHistoryResponse(struct soap *soap, lkf2__updateHistoryResponse *p)
{
	if (::soap_read_lkf2__updateHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateHistory_DEFINED
#define SOAP_TYPE_lkf2__updateHistory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateHistory(struct soap*, const char*, int, const lkf2__updateHistory *, const char*);
SOAP_FMAC3 lkf2__updateHistory * SOAP_FMAC4 soap_in_lkf2__updateHistory(struct soap*, const char*, lkf2__updateHistory *, const char*);
SOAP_FMAC1 lkf2__updateHistory * SOAP_FMAC2 soap_instantiate_lkf2__updateHistory(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateHistory * soap_new_lkf2__updateHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateHistory(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateHistory * soap_new_req_lkf2__updateHistory(
	struct soap *soap)
{
	lkf2__updateHistory *_p = ::soap_new_lkf2__updateHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateHistory * soap_new_set_lkf2__updateHistory(
	struct soap *soap,
	lkf2__order *arg0)
{
	lkf2__updateHistory *_p = ::soap_new_lkf2__updateHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__updateHistory::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__updateHistory(struct soap *soap, lkf2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistory", p->soap_type() == SOAP_TYPE_lkf2__updateHistory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateHistory(struct soap *soap, const char *URL, lkf2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistory", p->soap_type() == SOAP_TYPE_lkf2__updateHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateHistory(struct soap *soap, const char *URL, lkf2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistory", p->soap_type() == SOAP_TYPE_lkf2__updateHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateHistory(struct soap *soap, const char *URL, lkf2__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateHistory", p->soap_type() == SOAP_TYPE_lkf2__updateHistory ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateHistory * SOAP_FMAC4 soap_get_lkf2__updateHistory(struct soap*, lkf2__updateHistory *, const char*, const char*);

inline int soap_read_lkf2__updateHistory(struct soap *soap, lkf2__updateHistory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateHistory(struct soap *soap, const char *URL, lkf2__updateHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateHistory(struct soap *soap, lkf2__updateHistory *p)
{
	if (::soap_read_lkf2__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderListHistoryResponse_DEFINED
#define SOAP_TYPE_lkf2__getOrderListHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderListHistoryResponse(struct soap*, const char*, int, const lkf2__getOrderListHistoryResponse *, const char*);
SOAP_FMAC3 lkf2__getOrderListHistoryResponse * SOAP_FMAC4 soap_in_lkf2__getOrderListHistoryResponse(struct soap*, const char*, lkf2__getOrderListHistoryResponse *, const char*);
SOAP_FMAC1 lkf2__getOrderListHistoryResponse * SOAP_FMAC2 soap_instantiate_lkf2__getOrderListHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderListHistoryResponse * soap_new_lkf2__getOrderListHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderListHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderListHistoryResponse * soap_new_req_lkf2__getOrderListHistoryResponse(
	struct soap *soap)
{
	lkf2__getOrderListHistoryResponse *_p = ::soap_new_lkf2__getOrderListHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderListHistoryResponse * soap_new_set_lkf2__getOrderListHistoryResponse(
	struct soap *soap,
	const std::vector<lkf2__order *> & return_)
{
	lkf2__getOrderListHistoryResponse *_p = ::soap_new_lkf2__getOrderListHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderListHistoryResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderListHistoryResponse(struct soap *soap, lkf2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderListHistoryResponse(struct soap *soap, const char *URL, lkf2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderListHistoryResponse(struct soap *soap, const char *URL, lkf2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderListHistoryResponse(struct soap *soap, const char *URL, lkf2__getOrderListHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistoryResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderListHistoryResponse * SOAP_FMAC4 soap_get_lkf2__getOrderListHistoryResponse(struct soap*, lkf2__getOrderListHistoryResponse *, const char*, const char*);

inline int soap_read_lkf2__getOrderListHistoryResponse(struct soap *soap, lkf2__getOrderListHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderListHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderListHistoryResponse(struct soap *soap, const char *URL, lkf2__getOrderListHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderListHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderListHistoryResponse(struct soap *soap, lkf2__getOrderListHistoryResponse *p)
{
	if (::soap_read_lkf2__getOrderListHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderListHistory_DEFINED
#define SOAP_TYPE_lkf2__getOrderListHistory_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderListHistory(struct soap*, const char*, int, const lkf2__getOrderListHistory *, const char*);
SOAP_FMAC3 lkf2__getOrderListHistory * SOAP_FMAC4 soap_in_lkf2__getOrderListHistory(struct soap*, const char*, lkf2__getOrderListHistory *, const char*);
SOAP_FMAC1 lkf2__getOrderListHistory * SOAP_FMAC2 soap_instantiate_lkf2__getOrderListHistory(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderListHistory * soap_new_lkf2__getOrderListHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderListHistory(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderListHistory * soap_new_req_lkf2__getOrderListHistory(
	struct soap *soap)
{
	lkf2__getOrderListHistory *_p = ::soap_new_lkf2__getOrderListHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderListHistory * soap_new_set_lkf2__getOrderListHistory(
	struct soap *soap)
{
	lkf2__getOrderListHistory *_p = ::soap_new_lkf2__getOrderListHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__getOrderListHistory(struct soap *soap, lkf2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistory", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistory ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderListHistory(struct soap *soap, const char *URL, lkf2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistory", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderListHistory(struct soap *soap, const char *URL, lkf2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistory", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistory ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderListHistory(struct soap *soap, const char *URL, lkf2__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListHistory", p->soap_type() == SOAP_TYPE_lkf2__getOrderListHistory ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderListHistory * SOAP_FMAC4 soap_get_lkf2__getOrderListHistory(struct soap*, lkf2__getOrderListHistory *, const char*, const char*);

inline int soap_read_lkf2__getOrderListHistory(struct soap *soap, lkf2__getOrderListHistory *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderListHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderListHistory(struct soap *soap, const char *URL, lkf2__getOrderListHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderListHistory(struct soap *soap, lkf2__getOrderListHistory *p)
{
	if (::soap_read_lkf2__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__InsertClientResponse_DEFINED
#define SOAP_TYPE_lkf2__InsertClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__InsertClientResponse(struct soap*, const char*, int, const lkf2__InsertClientResponse *, const char*);
SOAP_FMAC3 lkf2__InsertClientResponse * SOAP_FMAC4 soap_in_lkf2__InsertClientResponse(struct soap*, const char*, lkf2__InsertClientResponse *, const char*);
SOAP_FMAC1 lkf2__InsertClientResponse * SOAP_FMAC2 soap_instantiate_lkf2__InsertClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__InsertClientResponse * soap_new_lkf2__InsertClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__InsertClientResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__InsertClientResponse * soap_new_req_lkf2__InsertClientResponse(
	struct soap *soap)
{
	lkf2__InsertClientResponse *_p = ::soap_new_lkf2__InsertClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__InsertClientResponse * soap_new_set_lkf2__InsertClientResponse(
	struct soap *soap)
{
	lkf2__InsertClientResponse *_p = ::soap_new_lkf2__InsertClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__InsertClientResponse(struct soap *soap, lkf2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClientResponse", p->soap_type() == SOAP_TYPE_lkf2__InsertClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__InsertClientResponse(struct soap *soap, const char *URL, lkf2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClientResponse", p->soap_type() == SOAP_TYPE_lkf2__InsertClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__InsertClientResponse(struct soap *soap, const char *URL, lkf2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClientResponse", p->soap_type() == SOAP_TYPE_lkf2__InsertClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__InsertClientResponse(struct soap *soap, const char *URL, lkf2__InsertClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClientResponse", p->soap_type() == SOAP_TYPE_lkf2__InsertClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__InsertClientResponse * SOAP_FMAC4 soap_get_lkf2__InsertClientResponse(struct soap*, lkf2__InsertClientResponse *, const char*, const char*);

inline int soap_read_lkf2__InsertClientResponse(struct soap *soap, lkf2__InsertClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__InsertClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__InsertClientResponse(struct soap *soap, const char *URL, lkf2__InsertClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__InsertClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__InsertClientResponse(struct soap *soap, lkf2__InsertClientResponse *p)
{
	if (::soap_read_lkf2__InsertClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__InsertClient_DEFINED
#define SOAP_TYPE_lkf2__InsertClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__InsertClient(struct soap*, const char*, int, const lkf2__InsertClient *, const char*);
SOAP_FMAC3 lkf2__InsertClient * SOAP_FMAC4 soap_in_lkf2__InsertClient(struct soap*, const char*, lkf2__InsertClient *, const char*);
SOAP_FMAC1 lkf2__InsertClient * SOAP_FMAC2 soap_instantiate_lkf2__InsertClient(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__InsertClient * soap_new_lkf2__InsertClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__InsertClient(soap, n, NULL, NULL, NULL);
}

inline lkf2__InsertClient * soap_new_req_lkf2__InsertClient(
	struct soap *soap)
{
	lkf2__InsertClient *_p = ::soap_new_lkf2__InsertClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__InsertClient * soap_new_set_lkf2__InsertClient(
	struct soap *soap,
	lkf2__client *arg0)
{
	lkf2__InsertClient *_p = ::soap_new_lkf2__InsertClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__InsertClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__InsertClient(struct soap *soap, lkf2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClient", p->soap_type() == SOAP_TYPE_lkf2__InsertClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__InsertClient(struct soap *soap, const char *URL, lkf2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClient", p->soap_type() == SOAP_TYPE_lkf2__InsertClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__InsertClient(struct soap *soap, const char *URL, lkf2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClient", p->soap_type() == SOAP_TYPE_lkf2__InsertClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__InsertClient(struct soap *soap, const char *URL, lkf2__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:InsertClient", p->soap_type() == SOAP_TYPE_lkf2__InsertClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__InsertClient * SOAP_FMAC4 soap_get_lkf2__InsertClient(struct soap*, lkf2__InsertClient *, const char*, const char*);

inline int soap_read_lkf2__InsertClient(struct soap *soap, lkf2__InsertClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__InsertClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__InsertClient(struct soap *soap, const char *URL, lkf2__InsertClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__InsertClient(struct soap *soap, lkf2__InsertClient *p)
{
	if (::soap_read_lkf2__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductListResponse_DEFINED
#define SOAP_TYPE_lkf2__getProductListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductListResponse(struct soap*, const char*, int, const lkf2__getProductListResponse *, const char*);
SOAP_FMAC3 lkf2__getProductListResponse * SOAP_FMAC4 soap_in_lkf2__getProductListResponse(struct soap*, const char*, lkf2__getProductListResponse *, const char*);
SOAP_FMAC1 lkf2__getProductListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getProductListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductListResponse * soap_new_lkf2__getProductListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductListResponse * soap_new_req_lkf2__getProductListResponse(
	struct soap *soap)
{
	lkf2__getProductListResponse *_p = ::soap_new_lkf2__getProductListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductListResponse * soap_new_set_lkf2__getProductListResponse(
	struct soap *soap,
	const std::vector<lkf2__product *> & return_)
{
	lkf2__getProductListResponse *_p = ::soap_new_lkf2__getProductListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getProductListResponse(struct soap *soap, lkf2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductListResponse(struct soap *soap, const char *URL, lkf2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductListResponse(struct soap *soap, const char *URL, lkf2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductListResponse(struct soap *soap, const char *URL, lkf2__getProductListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductListResponse * SOAP_FMAC4 soap_get_lkf2__getProductListResponse(struct soap*, lkf2__getProductListResponse *, const char*, const char*);

inline int soap_read_lkf2__getProductListResponse(struct soap *soap, lkf2__getProductListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductListResponse(struct soap *soap, const char *URL, lkf2__getProductListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductListResponse(struct soap *soap, lkf2__getProductListResponse *p)
{
	if (::soap_read_lkf2__getProductListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductList_DEFINED
#define SOAP_TYPE_lkf2__getProductList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductList(struct soap*, const char*, int, const lkf2__getProductList *, const char*);
SOAP_FMAC3 lkf2__getProductList * SOAP_FMAC4 soap_in_lkf2__getProductList(struct soap*, const char*, lkf2__getProductList *, const char*);
SOAP_FMAC1 lkf2__getProductList * SOAP_FMAC2 soap_instantiate_lkf2__getProductList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductList * soap_new_lkf2__getProductList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductList * soap_new_req_lkf2__getProductList(
	struct soap *soap,
	int arg0)
{
	lkf2__getProductList *_p = ::soap_new_lkf2__getProductList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductList::arg0 = arg0;
	}
	return _p;
}

inline lkf2__getProductList * soap_new_set_lkf2__getProductList(
	struct soap *soap,
	int arg0)
{
	lkf2__getProductList *_p = ::soap_new_lkf2__getProductList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getProductList(struct soap *soap, lkf2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductList", p->soap_type() == SOAP_TYPE_lkf2__getProductList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductList(struct soap *soap, const char *URL, lkf2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductList", p->soap_type() == SOAP_TYPE_lkf2__getProductList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductList(struct soap *soap, const char *URL, lkf2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductList", p->soap_type() == SOAP_TYPE_lkf2__getProductList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductList(struct soap *soap, const char *URL, lkf2__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductList", p->soap_type() == SOAP_TYPE_lkf2__getProductList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductList * SOAP_FMAC4 soap_get_lkf2__getProductList(struct soap*, lkf2__getProductList *, const char*, const char*);

inline int soap_read_lkf2__getProductList(struct soap *soap, lkf2__getProductList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductList(struct soap *soap, const char *URL, lkf2__getProductList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductList(struct soap *soap, lkf2__getProductList *p)
{
	if (::soap_read_lkf2__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteShoppingCartResponse_DEFINED
#define SOAP_TYPE_lkf2__deleteShoppingCartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteShoppingCartResponse(struct soap*, const char*, int, const lkf2__deleteShoppingCartResponse *, const char*);
SOAP_FMAC3 lkf2__deleteShoppingCartResponse * SOAP_FMAC4 soap_in_lkf2__deleteShoppingCartResponse(struct soap*, const char*, lkf2__deleteShoppingCartResponse *, const char*);
SOAP_FMAC1 lkf2__deleteShoppingCartResponse * SOAP_FMAC2 soap_instantiate_lkf2__deleteShoppingCartResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteShoppingCartResponse * soap_new_lkf2__deleteShoppingCartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteShoppingCartResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteShoppingCartResponse * soap_new_req_lkf2__deleteShoppingCartResponse(
	struct soap *soap)
{
	lkf2__deleteShoppingCartResponse *_p = ::soap_new_lkf2__deleteShoppingCartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteShoppingCartResponse * soap_new_set_lkf2__deleteShoppingCartResponse(
	struct soap *soap)
{
	lkf2__deleteShoppingCartResponse *_p = ::soap_new_lkf2__deleteShoppingCartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__deleteShoppingCartResponse(struct soap *soap, lkf2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteShoppingCartResponse(struct soap *soap, const char *URL, lkf2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteShoppingCartResponse(struct soap *soap, const char *URL, lkf2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteShoppingCartResponse(struct soap *soap, const char *URL, lkf2__deleteShoppingCartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCartResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCartResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteShoppingCartResponse * SOAP_FMAC4 soap_get_lkf2__deleteShoppingCartResponse(struct soap*, lkf2__deleteShoppingCartResponse *, const char*, const char*);

inline int soap_read_lkf2__deleteShoppingCartResponse(struct soap *soap, lkf2__deleteShoppingCartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteShoppingCartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteShoppingCartResponse(struct soap *soap, const char *URL, lkf2__deleteShoppingCartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteShoppingCartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteShoppingCartResponse(struct soap *soap, lkf2__deleteShoppingCartResponse *p)
{
	if (::soap_read_lkf2__deleteShoppingCartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteShoppingCart_DEFINED
#define SOAP_TYPE_lkf2__deleteShoppingCart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteShoppingCart(struct soap*, const char*, int, const lkf2__deleteShoppingCart *, const char*);
SOAP_FMAC3 lkf2__deleteShoppingCart * SOAP_FMAC4 soap_in_lkf2__deleteShoppingCart(struct soap*, const char*, lkf2__deleteShoppingCart *, const char*);
SOAP_FMAC1 lkf2__deleteShoppingCart * SOAP_FMAC2 soap_instantiate_lkf2__deleteShoppingCart(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteShoppingCart * soap_new_lkf2__deleteShoppingCart(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteShoppingCart(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteShoppingCart * soap_new_req_lkf2__deleteShoppingCart(
	struct soap *soap)
{
	lkf2__deleteShoppingCart *_p = ::soap_new_lkf2__deleteShoppingCart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteShoppingCart * soap_new_set_lkf2__deleteShoppingCart(
	struct soap *soap,
	lkf2__order *arg0)
{
	lkf2__deleteShoppingCart *_p = ::soap_new_lkf2__deleteShoppingCart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__deleteShoppingCart::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__deleteShoppingCart(struct soap *soap, lkf2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteShoppingCart(struct soap *soap, const char *URL, lkf2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteShoppingCart(struct soap *soap, const char *URL, lkf2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteShoppingCart(struct soap *soap, const char *URL, lkf2__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteShoppingCart", p->soap_type() == SOAP_TYPE_lkf2__deleteShoppingCart ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteShoppingCart * SOAP_FMAC4 soap_get_lkf2__deleteShoppingCart(struct soap*, lkf2__deleteShoppingCart *, const char*, const char*);

inline int soap_read_lkf2__deleteShoppingCart(struct soap *soap, lkf2__deleteShoppingCart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteShoppingCart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteShoppingCart(struct soap *soap, const char *URL, lkf2__deleteShoppingCart *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteShoppingCart(struct soap *soap, lkf2__deleteShoppingCart *p)
{
	if (::soap_read_lkf2__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_lkf2__getClientByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientByNameAndPwdResponse(struct soap*, const char*, int, const lkf2__getClientByNameAndPwdResponse *, const char*);
SOAP_FMAC3 lkf2__getClientByNameAndPwdResponse * SOAP_FMAC4 soap_in_lkf2__getClientByNameAndPwdResponse(struct soap*, const char*, lkf2__getClientByNameAndPwdResponse *, const char*);
SOAP_FMAC1 lkf2__getClientByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_lkf2__getClientByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientByNameAndPwdResponse * soap_new_lkf2__getClientByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientByNameAndPwdResponse * soap_new_req_lkf2__getClientByNameAndPwdResponse(
	struct soap *soap)
{
	lkf2__getClientByNameAndPwdResponse *_p = ::soap_new_lkf2__getClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientByNameAndPwdResponse * soap_new_set_lkf2__getClientByNameAndPwdResponse(
	struct soap *soap,
	lkf2__client *return_)
{
	lkf2__getClientByNameAndPwdResponse *_p = ::soap_new_lkf2__getClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getClientByNameAndPwdResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getClientByNameAndPwdResponse(struct soap *soap, lkf2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientByNameAndPwdResponse * SOAP_FMAC4 soap_get_lkf2__getClientByNameAndPwdResponse(struct soap*, lkf2__getClientByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_lkf2__getClientByNameAndPwdResponse(struct soap *soap, lkf2__getClientByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientByNameAndPwdResponse(struct soap *soap, lkf2__getClientByNameAndPwdResponse *p)
{
	if (::soap_read_lkf2__getClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE_lkf2__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientByNameAndPwd(struct soap*, const char*, int, const lkf2__getClientByNameAndPwd *, const char*);
SOAP_FMAC3 lkf2__getClientByNameAndPwd * SOAP_FMAC4 soap_in_lkf2__getClientByNameAndPwd(struct soap*, const char*, lkf2__getClientByNameAndPwd *, const char*);
SOAP_FMAC1 lkf2__getClientByNameAndPwd * SOAP_FMAC2 soap_instantiate_lkf2__getClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientByNameAndPwd * soap_new_lkf2__getClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientByNameAndPwd * soap_new_req_lkf2__getClientByNameAndPwd(
	struct soap *soap)
{
	lkf2__getClientByNameAndPwd *_p = ::soap_new_lkf2__getClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientByNameAndPwd * soap_new_set_lkf2__getClientByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	lkf2__getClientByNameAndPwd *_p = ::soap_new_lkf2__getClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getClientByNameAndPwd::arg0 = arg0;
		_p->lkf2__getClientByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_lkf2__getClientByNameAndPwd(struct soap *soap, lkf2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__getClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientByNameAndPwd * SOAP_FMAC4 soap_get_lkf2__getClientByNameAndPwd(struct soap*, lkf2__getClientByNameAndPwd *, const char*, const char*);

inline int soap_read_lkf2__getClientByNameAndPwd(struct soap *soap, lkf2__getClientByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__getClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientByNameAndPwd(struct soap *soap, lkf2__getClientByNameAndPwd *p)
{
	if (::soap_read_lkf2__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addOrderResponse_DEFINED
#define SOAP_TYPE_lkf2__addOrderResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addOrderResponse(struct soap*, const char*, int, const lkf2__addOrderResponse *, const char*);
SOAP_FMAC3 lkf2__addOrderResponse * SOAP_FMAC4 soap_in_lkf2__addOrderResponse(struct soap*, const char*, lkf2__addOrderResponse *, const char*);
SOAP_FMAC1 lkf2__addOrderResponse * SOAP_FMAC2 soap_instantiate_lkf2__addOrderResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addOrderResponse * soap_new_lkf2__addOrderResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addOrderResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__addOrderResponse * soap_new_req_lkf2__addOrderResponse(
	struct soap *soap)
{
	lkf2__addOrderResponse *_p = ::soap_new_lkf2__addOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addOrderResponse * soap_new_set_lkf2__addOrderResponse(
	struct soap *soap)
{
	lkf2__addOrderResponse *_p = ::soap_new_lkf2__addOrderResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__addOrderResponse(struct soap *soap, lkf2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrderResponse", p->soap_type() == SOAP_TYPE_lkf2__addOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addOrderResponse(struct soap *soap, const char *URL, lkf2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrderResponse", p->soap_type() == SOAP_TYPE_lkf2__addOrderResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addOrderResponse(struct soap *soap, const char *URL, lkf2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrderResponse", p->soap_type() == SOAP_TYPE_lkf2__addOrderResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addOrderResponse(struct soap *soap, const char *URL, lkf2__addOrderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrderResponse", p->soap_type() == SOAP_TYPE_lkf2__addOrderResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addOrderResponse * SOAP_FMAC4 soap_get_lkf2__addOrderResponse(struct soap*, lkf2__addOrderResponse *, const char*, const char*);

inline int soap_read_lkf2__addOrderResponse(struct soap *soap, lkf2__addOrderResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addOrderResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addOrderResponse(struct soap *soap, const char *URL, lkf2__addOrderResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addOrderResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addOrderResponse(struct soap *soap, lkf2__addOrderResponse *p)
{
	if (::soap_read_lkf2__addOrderResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addOrder_DEFINED
#define SOAP_TYPE_lkf2__addOrder_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addOrder(struct soap*, const char*, int, const lkf2__addOrder *, const char*);
SOAP_FMAC3 lkf2__addOrder * SOAP_FMAC4 soap_in_lkf2__addOrder(struct soap*, const char*, lkf2__addOrder *, const char*);
SOAP_FMAC1 lkf2__addOrder * SOAP_FMAC2 soap_instantiate_lkf2__addOrder(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addOrder * soap_new_lkf2__addOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addOrder(soap, n, NULL, NULL, NULL);
}

inline lkf2__addOrder * soap_new_req_lkf2__addOrder(
	struct soap *soap)
{
	lkf2__addOrder *_p = ::soap_new_lkf2__addOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addOrder * soap_new_set_lkf2__addOrder(
	struct soap *soap,
	lkf2__order *arg0)
{
	lkf2__addOrder *_p = ::soap_new_lkf2__addOrder(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__addOrder::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__addOrder(struct soap *soap, lkf2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrder", p->soap_type() == SOAP_TYPE_lkf2__addOrder ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addOrder(struct soap *soap, const char *URL, lkf2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrder", p->soap_type() == SOAP_TYPE_lkf2__addOrder ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addOrder(struct soap *soap, const char *URL, lkf2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrder", p->soap_type() == SOAP_TYPE_lkf2__addOrder ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addOrder(struct soap *soap, const char *URL, lkf2__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addOrder", p->soap_type() == SOAP_TYPE_lkf2__addOrder ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addOrder * SOAP_FMAC4 soap_get_lkf2__addOrder(struct soap*, lkf2__addOrder *, const char*, const char*);

inline int soap_read_lkf2__addOrder(struct soap *soap, lkf2__addOrder *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addOrder(struct soap *soap, const char *URL, lkf2__addOrder *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addOrder(struct soap *soap, lkf2__addOrder *p)
{
	if (::soap_read_lkf2__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductLikeListResponse_DEFINED
#define SOAP_TYPE_lkf2__getProductLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductLikeListResponse(struct soap*, const char*, int, const lkf2__getProductLikeListResponse *, const char*);
SOAP_FMAC3 lkf2__getProductLikeListResponse * SOAP_FMAC4 soap_in_lkf2__getProductLikeListResponse(struct soap*, const char*, lkf2__getProductLikeListResponse *, const char*);
SOAP_FMAC1 lkf2__getProductLikeListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getProductLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductLikeListResponse * soap_new_lkf2__getProductLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductLikeListResponse * soap_new_req_lkf2__getProductLikeListResponse(
	struct soap *soap)
{
	lkf2__getProductLikeListResponse *_p = ::soap_new_lkf2__getProductLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductLikeListResponse * soap_new_set_lkf2__getProductLikeListResponse(
	struct soap *soap,
	const std::vector<lkf2__product *> & return_)
{
	lkf2__getProductLikeListResponse *_p = ::soap_new_lkf2__getProductLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getProductLikeListResponse(struct soap *soap, lkf2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductLikeListResponse(struct soap *soap, const char *URL, lkf2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductLikeListResponse(struct soap *soap, const char *URL, lkf2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductLikeListResponse(struct soap *soap, const char *URL, lkf2__getProductLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductLikeListResponse * SOAP_FMAC4 soap_get_lkf2__getProductLikeListResponse(struct soap*, lkf2__getProductLikeListResponse *, const char*, const char*);

inline int soap_read_lkf2__getProductLikeListResponse(struct soap *soap, lkf2__getProductLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductLikeListResponse(struct soap *soap, const char *URL, lkf2__getProductLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductLikeListResponse(struct soap *soap, lkf2__getProductLikeListResponse *p)
{
	if (::soap_read_lkf2__getProductLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductLikeList_DEFINED
#define SOAP_TYPE_lkf2__getProductLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductLikeList(struct soap*, const char*, int, const lkf2__getProductLikeList *, const char*);
SOAP_FMAC3 lkf2__getProductLikeList * SOAP_FMAC4 soap_in_lkf2__getProductLikeList(struct soap*, const char*, lkf2__getProductLikeList *, const char*);
SOAP_FMAC1 lkf2__getProductLikeList * SOAP_FMAC2 soap_instantiate_lkf2__getProductLikeList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductLikeList * soap_new_lkf2__getProductLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductLikeList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductLikeList * soap_new_req_lkf2__getProductLikeList(
	struct soap *soap)
{
	lkf2__getProductLikeList *_p = ::soap_new_lkf2__getProductLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductLikeList * soap_new_set_lkf2__getProductLikeList(
	struct soap *soap,
	std::string *arg0)
{
	lkf2__getProductLikeList *_p = ::soap_new_lkf2__getProductLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductLikeList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getProductLikeList(struct soap *soap, lkf2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeList", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductLikeList(struct soap *soap, const char *URL, lkf2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeList", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductLikeList(struct soap *soap, const char *URL, lkf2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeList", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductLikeList(struct soap *soap, const char *URL, lkf2__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductLikeList", p->soap_type() == SOAP_TYPE_lkf2__getProductLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductLikeList * SOAP_FMAC4 soap_get_lkf2__getProductLikeList(struct soap*, lkf2__getProductLikeList *, const char*, const char*);

inline int soap_read_lkf2__getProductLikeList(struct soap *soap, lkf2__getProductLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductLikeList(struct soap *soap, const char *URL, lkf2__getProductLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductLikeList(struct soap *soap, lkf2__getProductLikeList *p)
{
	if (::soap_read_lkf2__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateProductByInfoResponse_DEFINED
#define SOAP_TYPE_lkf2__updateProductByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateProductByInfoResponse(struct soap*, const char*, int, const lkf2__updateProductByInfoResponse *, const char*);
SOAP_FMAC3 lkf2__updateProductByInfoResponse * SOAP_FMAC4 soap_in_lkf2__updateProductByInfoResponse(struct soap*, const char*, lkf2__updateProductByInfoResponse *, const char*);
SOAP_FMAC1 lkf2__updateProductByInfoResponse * SOAP_FMAC2 soap_instantiate_lkf2__updateProductByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateProductByInfoResponse * soap_new_lkf2__updateProductByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateProductByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateProductByInfoResponse * soap_new_req_lkf2__updateProductByInfoResponse(
	struct soap *soap)
{
	lkf2__updateProductByInfoResponse *_p = ::soap_new_lkf2__updateProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateProductByInfoResponse * soap_new_set_lkf2__updateProductByInfoResponse(
	struct soap *soap)
{
	lkf2__updateProductByInfoResponse *_p = ::soap_new_lkf2__updateProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__updateProductByInfoResponse(struct soap *soap, lkf2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateProductByInfoResponse(struct soap *soap, const char *URL, lkf2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateProductByInfoResponse(struct soap *soap, const char *URL, lkf2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateProductByInfoResponse(struct soap *soap, const char *URL, lkf2__updateProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateProductByInfoResponse * SOAP_FMAC4 soap_get_lkf2__updateProductByInfoResponse(struct soap*, lkf2__updateProductByInfoResponse *, const char*, const char*);

inline int soap_read_lkf2__updateProductByInfoResponse(struct soap *soap, lkf2__updateProductByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateProductByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateProductByInfoResponse(struct soap *soap, const char *URL, lkf2__updateProductByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateProductByInfoResponse(struct soap *soap, lkf2__updateProductByInfoResponse *p)
{
	if (::soap_read_lkf2__updateProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateProductByInfo_DEFINED
#define SOAP_TYPE_lkf2__updateProductByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateProductByInfo(struct soap*, const char*, int, const lkf2__updateProductByInfo *, const char*);
SOAP_FMAC3 lkf2__updateProductByInfo * SOAP_FMAC4 soap_in_lkf2__updateProductByInfo(struct soap*, const char*, lkf2__updateProductByInfo *, const char*);
SOAP_FMAC1 lkf2__updateProductByInfo * SOAP_FMAC2 soap_instantiate_lkf2__updateProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateProductByInfo * soap_new_lkf2__updateProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateProductByInfo(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateProductByInfo * soap_new_req_lkf2__updateProductByInfo(
	struct soap *soap)
{
	lkf2__updateProductByInfo *_p = ::soap_new_lkf2__updateProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateProductByInfo * soap_new_set_lkf2__updateProductByInfo(
	struct soap *soap,
	lkf2__product *arg0)
{
	lkf2__updateProductByInfo *_p = ::soap_new_lkf2__updateProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__updateProductByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__updateProductByInfo(struct soap *soap, lkf2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateProductByInfo(struct soap *soap, const char *URL, lkf2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateProductByInfo(struct soap *soap, const char *URL, lkf2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateProductByInfo(struct soap *soap, const char *URL, lkf2__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__updateProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateProductByInfo * SOAP_FMAC4 soap_get_lkf2__updateProductByInfo(struct soap*, lkf2__updateProductByInfo *, const char*, const char*);

inline int soap_read_lkf2__updateProductByInfo(struct soap *soap, lkf2__updateProductByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateProductByInfo(struct soap *soap, const char *URL, lkf2__updateProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateProductByInfo(struct soap *soap, lkf2__updateProductByInfo *p)
{
	if (::soap_read_lkf2__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addProductTypeResponse_DEFINED
#define SOAP_TYPE_lkf2__addProductTypeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addProductTypeResponse(struct soap*, const char*, int, const lkf2__addProductTypeResponse *, const char*);
SOAP_FMAC3 lkf2__addProductTypeResponse * SOAP_FMAC4 soap_in_lkf2__addProductTypeResponse(struct soap*, const char*, lkf2__addProductTypeResponse *, const char*);
SOAP_FMAC1 lkf2__addProductTypeResponse * SOAP_FMAC2 soap_instantiate_lkf2__addProductTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addProductTypeResponse * soap_new_lkf2__addProductTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addProductTypeResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__addProductTypeResponse * soap_new_req_lkf2__addProductTypeResponse(
	struct soap *soap)
{
	lkf2__addProductTypeResponse *_p = ::soap_new_lkf2__addProductTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addProductTypeResponse * soap_new_set_lkf2__addProductTypeResponse(
	struct soap *soap)
{
	lkf2__addProductTypeResponse *_p = ::soap_new_lkf2__addProductTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__addProductTypeResponse(struct soap *soap, lkf2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addProductTypeResponse(struct soap *soap, const char *URL, lkf2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addProductTypeResponse(struct soap *soap, const char *URL, lkf2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addProductTypeResponse(struct soap *soap, const char *URL, lkf2__addProductTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductTypeResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addProductTypeResponse * SOAP_FMAC4 soap_get_lkf2__addProductTypeResponse(struct soap*, lkf2__addProductTypeResponse *, const char*, const char*);

inline int soap_read_lkf2__addProductTypeResponse(struct soap *soap, lkf2__addProductTypeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addProductTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addProductTypeResponse(struct soap *soap, const char *URL, lkf2__addProductTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addProductTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addProductTypeResponse(struct soap *soap, lkf2__addProductTypeResponse *p)
{
	if (::soap_read_lkf2__addProductTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addProductType_DEFINED
#define SOAP_TYPE_lkf2__addProductType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addProductType(struct soap*, const char*, int, const lkf2__addProductType *, const char*);
SOAP_FMAC3 lkf2__addProductType * SOAP_FMAC4 soap_in_lkf2__addProductType(struct soap*, const char*, lkf2__addProductType *, const char*);
SOAP_FMAC1 lkf2__addProductType * SOAP_FMAC2 soap_instantiate_lkf2__addProductType(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addProductType * soap_new_lkf2__addProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addProductType(soap, n, NULL, NULL, NULL);
}

inline lkf2__addProductType * soap_new_req_lkf2__addProductType(
	struct soap *soap)
{
	lkf2__addProductType *_p = ::soap_new_lkf2__addProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addProductType * soap_new_set_lkf2__addProductType(
	struct soap *soap,
	lkf2__productType *arg0)
{
	lkf2__addProductType *_p = ::soap_new_lkf2__addProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__addProductType::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__addProductType(struct soap *soap, lkf2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductType", p->soap_type() == SOAP_TYPE_lkf2__addProductType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addProductType(struct soap *soap, const char *URL, lkf2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductType", p->soap_type() == SOAP_TYPE_lkf2__addProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addProductType(struct soap *soap, const char *URL, lkf2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductType", p->soap_type() == SOAP_TYPE_lkf2__addProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addProductType(struct soap *soap, const char *URL, lkf2__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductType", p->soap_type() == SOAP_TYPE_lkf2__addProductType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addProductType * SOAP_FMAC4 soap_get_lkf2__addProductType(struct soap*, lkf2__addProductType *, const char*, const char*);

inline int soap_read_lkf2__addProductType(struct soap *soap, lkf2__addProductType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addProductType(struct soap *soap, const char *URL, lkf2__addProductType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addProductType(struct soap *soap, lkf2__addProductType *p)
{
	if (::soap_read_lkf2__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderListByInfoResponse_DEFINED
#define SOAP_TYPE_lkf2__getOrderListByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderListByInfoResponse(struct soap*, const char*, int, const lkf2__getOrderListByInfoResponse *, const char*);
SOAP_FMAC3 lkf2__getOrderListByInfoResponse * SOAP_FMAC4 soap_in_lkf2__getOrderListByInfoResponse(struct soap*, const char*, lkf2__getOrderListByInfoResponse *, const char*);
SOAP_FMAC1 lkf2__getOrderListByInfoResponse * SOAP_FMAC2 soap_instantiate_lkf2__getOrderListByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderListByInfoResponse * soap_new_lkf2__getOrderListByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderListByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderListByInfoResponse * soap_new_req_lkf2__getOrderListByInfoResponse(
	struct soap *soap)
{
	lkf2__getOrderListByInfoResponse *_p = ::soap_new_lkf2__getOrderListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderListByInfoResponse * soap_new_set_lkf2__getOrderListByInfoResponse(
	struct soap *soap,
	const std::vector<lkf2__order *> & return_)
{
	lkf2__getOrderListByInfoResponse *_p = ::soap_new_lkf2__getOrderListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderListByInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderListByInfoResponse(struct soap *soap, lkf2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderListByInfoResponse(struct soap *soap, const char *URL, lkf2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderListByInfoResponse(struct soap *soap, const char *URL, lkf2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderListByInfoResponse(struct soap *soap, const char *URL, lkf2__getOrderListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderListByInfoResponse * SOAP_FMAC4 soap_get_lkf2__getOrderListByInfoResponse(struct soap*, lkf2__getOrderListByInfoResponse *, const char*, const char*);

inline int soap_read_lkf2__getOrderListByInfoResponse(struct soap *soap, lkf2__getOrderListByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderListByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderListByInfoResponse(struct soap *soap, const char *URL, lkf2__getOrderListByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderListByInfoResponse(struct soap *soap, lkf2__getOrderListByInfoResponse *p)
{
	if (::soap_read_lkf2__getOrderListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderListByInfo_DEFINED
#define SOAP_TYPE_lkf2__getOrderListByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderListByInfo(struct soap*, const char*, int, const lkf2__getOrderListByInfo *, const char*);
SOAP_FMAC3 lkf2__getOrderListByInfo * SOAP_FMAC4 soap_in_lkf2__getOrderListByInfo(struct soap*, const char*, lkf2__getOrderListByInfo *, const char*);
SOAP_FMAC1 lkf2__getOrderListByInfo * SOAP_FMAC2 soap_instantiate_lkf2__getOrderListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderListByInfo * soap_new_lkf2__getOrderListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderListByInfo(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderListByInfo * soap_new_req_lkf2__getOrderListByInfo(
	struct soap *soap)
{
	lkf2__getOrderListByInfo *_p = ::soap_new_lkf2__getOrderListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderListByInfo * soap_new_set_lkf2__getOrderListByInfo(
	struct soap *soap,
	lkf2__order *arg0)
{
	lkf2__getOrderListByInfo *_p = ::soap_new_lkf2__getOrderListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderListByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderListByInfo(struct soap *soap, lkf2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderListByInfo(struct soap *soap, const char *URL, lkf2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderListByInfo(struct soap *soap, const char *URL, lkf2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderListByInfo(struct soap *soap, const char *URL, lkf2__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getOrderListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderListByInfo * SOAP_FMAC4 soap_get_lkf2__getOrderListByInfo(struct soap*, lkf2__getOrderListByInfo *, const char*, const char*);

inline int soap_read_lkf2__getOrderListByInfo(struct soap *soap, lkf2__getOrderListByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderListByInfo(struct soap *soap, const char *URL, lkf2__getOrderListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderListByInfo(struct soap *soap, lkf2__getOrderListByInfo *p)
{
	if (::soap_read_lkf2__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientListResponse_DEFINED
#define SOAP_TYPE_lkf2__getClientListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientListResponse(struct soap*, const char*, int, const lkf2__getClientListResponse *, const char*);
SOAP_FMAC3 lkf2__getClientListResponse * SOAP_FMAC4 soap_in_lkf2__getClientListResponse(struct soap*, const char*, lkf2__getClientListResponse *, const char*);
SOAP_FMAC1 lkf2__getClientListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getClientListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientListResponse * soap_new_lkf2__getClientListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientListResponse * soap_new_req_lkf2__getClientListResponse(
	struct soap *soap)
{
	lkf2__getClientListResponse *_p = ::soap_new_lkf2__getClientListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientListResponse * soap_new_set_lkf2__getClientListResponse(
	struct soap *soap,
	const std::vector<lkf2__client *> & return_)
{
	lkf2__getClientListResponse *_p = ::soap_new_lkf2__getClientListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getClientListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getClientListResponse(struct soap *soap, lkf2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientListResponse(struct soap *soap, const char *URL, lkf2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientListResponse(struct soap *soap, const char *URL, lkf2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientListResponse(struct soap *soap, const char *URL, lkf2__getClientListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientListResponse * SOAP_FMAC4 soap_get_lkf2__getClientListResponse(struct soap*, lkf2__getClientListResponse *, const char*, const char*);

inline int soap_read_lkf2__getClientListResponse(struct soap *soap, lkf2__getClientListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientListResponse(struct soap *soap, const char *URL, lkf2__getClientListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientListResponse(struct soap *soap, lkf2__getClientListResponse *p)
{
	if (::soap_read_lkf2__getClientListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientList_DEFINED
#define SOAP_TYPE_lkf2__getClientList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientList(struct soap*, const char*, int, const lkf2__getClientList *, const char*);
SOAP_FMAC3 lkf2__getClientList * SOAP_FMAC4 soap_in_lkf2__getClientList(struct soap*, const char*, lkf2__getClientList *, const char*);
SOAP_FMAC1 lkf2__getClientList * SOAP_FMAC2 soap_instantiate_lkf2__getClientList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientList * soap_new_lkf2__getClientList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientList * soap_new_req_lkf2__getClientList(
	struct soap *soap)
{
	lkf2__getClientList *_p = ::soap_new_lkf2__getClientList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientList * soap_new_set_lkf2__getClientList(
	struct soap *soap)
{
	lkf2__getClientList *_p = ::soap_new_lkf2__getClientList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__getClientList(struct soap *soap, lkf2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientList", p->soap_type() == SOAP_TYPE_lkf2__getClientList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientList(struct soap *soap, const char *URL, lkf2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientList", p->soap_type() == SOAP_TYPE_lkf2__getClientList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientList(struct soap *soap, const char *URL, lkf2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientList", p->soap_type() == SOAP_TYPE_lkf2__getClientList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientList(struct soap *soap, const char *URL, lkf2__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientList", p->soap_type() == SOAP_TYPE_lkf2__getClientList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientList * SOAP_FMAC4 soap_get_lkf2__getClientList(struct soap*, lkf2__getClientList *, const char*, const char*);

inline int soap_read_lkf2__getClientList(struct soap *soap, lkf2__getClientList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientList(struct soap *soap, const char *URL, lkf2__getClientList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientList(struct soap *soap, lkf2__getClientList *p)
{
	if (::soap_read_lkf2__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__productType_DEFINED
#define SOAP_TYPE_lkf2__productType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__productType(struct soap*, const char*, int, const lkf2__productType *, const char*);
SOAP_FMAC3 lkf2__productType * SOAP_FMAC4 soap_in_lkf2__productType(struct soap*, const char*, lkf2__productType *, const char*);
SOAP_FMAC1 lkf2__productType * SOAP_FMAC2 soap_instantiate_lkf2__productType(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__productType * soap_new_lkf2__productType(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__productType(soap, n, NULL, NULL, NULL);
}

inline lkf2__productType * soap_new_req_lkf2__productType(
	struct soap *soap,
	int typeId,
	int typeProductId)
{
	lkf2__productType *_p = ::soap_new_lkf2__productType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__productType::typeId = typeId;
		_p->lkf2__productType::typeProductId = typeProductId;
	}
	return _p;
}

inline lkf2__productType * soap_new_set_lkf2__productType(
	struct soap *soap,
	int typeId,
	std::string *typeName,
	std::string *typeProduct,
	int typeProductId)
{
	lkf2__productType *_p = ::soap_new_lkf2__productType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__productType::typeId = typeId;
		_p->lkf2__productType::typeName = typeName;
		_p->lkf2__productType::typeProduct = typeProduct;
		_p->lkf2__productType::typeProductId = typeProductId;
	}
	return _p;
}

inline int soap_write_lkf2__productType(struct soap *soap, lkf2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:productType", p->soap_type() == SOAP_TYPE_lkf2__productType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__productType(struct soap *soap, const char *URL, lkf2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:productType", p->soap_type() == SOAP_TYPE_lkf2__productType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__productType(struct soap *soap, const char *URL, lkf2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:productType", p->soap_type() == SOAP_TYPE_lkf2__productType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__productType(struct soap *soap, const char *URL, lkf2__productType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:productType", p->soap_type() == SOAP_TYPE_lkf2__productType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__productType * SOAP_FMAC4 soap_get_lkf2__productType(struct soap*, lkf2__productType *, const char*, const char*);

inline int soap_read_lkf2__productType(struct soap *soap, lkf2__productType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__productType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__productType(struct soap *soap, const char *URL, lkf2__productType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__productType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__productType(struct soap *soap, lkf2__productType *p)
{
	if (::soap_read_lkf2__productType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductTypeByProNameResponse_DEFINED
#define SOAP_TYPE_lkf2__getProductTypeByProNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductTypeByProNameResponse(struct soap*, const char*, int, const lkf2__getProductTypeByProNameResponse *, const char*);
SOAP_FMAC3 lkf2__getProductTypeByProNameResponse * SOAP_FMAC4 soap_in_lkf2__getProductTypeByProNameResponse(struct soap*, const char*, lkf2__getProductTypeByProNameResponse *, const char*);
SOAP_FMAC1 lkf2__getProductTypeByProNameResponse * SOAP_FMAC2 soap_instantiate_lkf2__getProductTypeByProNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductTypeByProNameResponse * soap_new_lkf2__getProductTypeByProNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductTypeByProNameResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductTypeByProNameResponse * soap_new_req_lkf2__getProductTypeByProNameResponse(
	struct soap *soap)
{
	lkf2__getProductTypeByProNameResponse *_p = ::soap_new_lkf2__getProductTypeByProNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductTypeByProNameResponse * soap_new_set_lkf2__getProductTypeByProNameResponse(
	struct soap *soap,
	const std::vector<lkf2__productType *> & return_)
{
	lkf2__getProductTypeByProNameResponse *_p = ::soap_new_lkf2__getProductTypeByProNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductTypeByProNameResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getProductTypeByProNameResponse(struct soap *soap, lkf2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, lkf2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, lkf2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, lkf2__getProductTypeByProNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProNameResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductTypeByProNameResponse * SOAP_FMAC4 soap_get_lkf2__getProductTypeByProNameResponse(struct soap*, lkf2__getProductTypeByProNameResponse *, const char*, const char*);

inline int soap_read_lkf2__getProductTypeByProNameResponse(struct soap *soap, lkf2__getProductTypeByProNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductTypeByProNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductTypeByProNameResponse(struct soap *soap, const char *URL, lkf2__getProductTypeByProNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductTypeByProNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductTypeByProNameResponse(struct soap *soap, lkf2__getProductTypeByProNameResponse *p)
{
	if (::soap_read_lkf2__getProductTypeByProNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductTypeByProName_DEFINED
#define SOAP_TYPE_lkf2__getProductTypeByProName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductTypeByProName(struct soap*, const char*, int, const lkf2__getProductTypeByProName *, const char*);
SOAP_FMAC3 lkf2__getProductTypeByProName * SOAP_FMAC4 soap_in_lkf2__getProductTypeByProName(struct soap*, const char*, lkf2__getProductTypeByProName *, const char*);
SOAP_FMAC1 lkf2__getProductTypeByProName * SOAP_FMAC2 soap_instantiate_lkf2__getProductTypeByProName(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductTypeByProName * soap_new_lkf2__getProductTypeByProName(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductTypeByProName(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductTypeByProName * soap_new_req_lkf2__getProductTypeByProName(
	struct soap *soap)
{
	lkf2__getProductTypeByProName *_p = ::soap_new_lkf2__getProductTypeByProName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductTypeByProName * soap_new_set_lkf2__getProductTypeByProName(
	struct soap *soap,
	std::string *arg0)
{
	lkf2__getProductTypeByProName *_p = ::soap_new_lkf2__getProductTypeByProName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductTypeByProName::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getProductTypeByProName(struct soap *soap, lkf2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductTypeByProName(struct soap *soap, const char *URL, lkf2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductTypeByProName(struct soap *soap, const char *URL, lkf2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductTypeByProName(struct soap *soap, const char *URL, lkf2__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductTypeByProName", p->soap_type() == SOAP_TYPE_lkf2__getProductTypeByProName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductTypeByProName * SOAP_FMAC4 soap_get_lkf2__getProductTypeByProName(struct soap*, lkf2__getProductTypeByProName *, const char*, const char*);

inline int soap_read_lkf2__getProductTypeByProName(struct soap *soap, lkf2__getProductTypeByProName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductTypeByProName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductTypeByProName(struct soap *soap, const char *URL, lkf2__getProductTypeByProName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductTypeByProName(struct soap *soap, lkf2__getProductTypeByProName *p)
{
	if (::soap_read_lkf2__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientLikeListResponse_DEFINED
#define SOAP_TYPE_lkf2__getClientLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientLikeListResponse(struct soap*, const char*, int, const lkf2__getClientLikeListResponse *, const char*);
SOAP_FMAC3 lkf2__getClientLikeListResponse * SOAP_FMAC4 soap_in_lkf2__getClientLikeListResponse(struct soap*, const char*, lkf2__getClientLikeListResponse *, const char*);
SOAP_FMAC1 lkf2__getClientLikeListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getClientLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientLikeListResponse * soap_new_lkf2__getClientLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientLikeListResponse * soap_new_req_lkf2__getClientLikeListResponse(
	struct soap *soap)
{
	lkf2__getClientLikeListResponse *_p = ::soap_new_lkf2__getClientLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientLikeListResponse * soap_new_set_lkf2__getClientLikeListResponse(
	struct soap *soap,
	const std::vector<lkf2__client *> & return_)
{
	lkf2__getClientLikeListResponse *_p = ::soap_new_lkf2__getClientLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getClientLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getClientLikeListResponse(struct soap *soap, lkf2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientLikeListResponse(struct soap *soap, const char *URL, lkf2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientLikeListResponse(struct soap *soap, const char *URL, lkf2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientLikeListResponse(struct soap *soap, const char *URL, lkf2__getClientLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientLikeListResponse * SOAP_FMAC4 soap_get_lkf2__getClientLikeListResponse(struct soap*, lkf2__getClientLikeListResponse *, const char*, const char*);

inline int soap_read_lkf2__getClientLikeListResponse(struct soap *soap, lkf2__getClientLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientLikeListResponse(struct soap *soap, const char *URL, lkf2__getClientLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientLikeListResponse(struct soap *soap, lkf2__getClientLikeListResponse *p)
{
	if (::soap_read_lkf2__getClientLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getClientLikeList_DEFINED
#define SOAP_TYPE_lkf2__getClientLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getClientLikeList(struct soap*, const char*, int, const lkf2__getClientLikeList *, const char*);
SOAP_FMAC3 lkf2__getClientLikeList * SOAP_FMAC4 soap_in_lkf2__getClientLikeList(struct soap*, const char*, lkf2__getClientLikeList *, const char*);
SOAP_FMAC1 lkf2__getClientLikeList * SOAP_FMAC2 soap_instantiate_lkf2__getClientLikeList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getClientLikeList * soap_new_lkf2__getClientLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getClientLikeList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getClientLikeList * soap_new_req_lkf2__getClientLikeList(
	struct soap *soap)
{
	lkf2__getClientLikeList *_p = ::soap_new_lkf2__getClientLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getClientLikeList * soap_new_set_lkf2__getClientLikeList(
	struct soap *soap,
	std::string *arg0)
{
	lkf2__getClientLikeList *_p = ::soap_new_lkf2__getClientLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getClientLikeList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getClientLikeList(struct soap *soap, lkf2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeList", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getClientLikeList(struct soap *soap, const char *URL, lkf2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeList", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getClientLikeList(struct soap *soap, const char *URL, lkf2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeList", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getClientLikeList(struct soap *soap, const char *URL, lkf2__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getClientLikeList", p->soap_type() == SOAP_TYPE_lkf2__getClientLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getClientLikeList * SOAP_FMAC4 soap_get_lkf2__getClientLikeList(struct soap*, lkf2__getClientLikeList *, const char*, const char*);

inline int soap_read_lkf2__getClientLikeList(struct soap *soap, lkf2__getClientLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getClientLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getClientLikeList(struct soap *soap, const char *URL, lkf2__getClientLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getClientLikeList(struct soap *soap, lkf2__getClientLikeList *p)
{
	if (::soap_read_lkf2__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderLikeListResponse_DEFINED
#define SOAP_TYPE_lkf2__getOrderLikeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderLikeListResponse(struct soap*, const char*, int, const lkf2__getOrderLikeListResponse *, const char*);
SOAP_FMAC3 lkf2__getOrderLikeListResponse * SOAP_FMAC4 soap_in_lkf2__getOrderLikeListResponse(struct soap*, const char*, lkf2__getOrderLikeListResponse *, const char*);
SOAP_FMAC1 lkf2__getOrderLikeListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getOrderLikeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderLikeListResponse * soap_new_lkf2__getOrderLikeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderLikeListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderLikeListResponse * soap_new_req_lkf2__getOrderLikeListResponse(
	struct soap *soap)
{
	lkf2__getOrderLikeListResponse *_p = ::soap_new_lkf2__getOrderLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderLikeListResponse * soap_new_set_lkf2__getOrderLikeListResponse(
	struct soap *soap,
	const std::vector<lkf2__order *> & return_)
{
	lkf2__getOrderLikeListResponse *_p = ::soap_new_lkf2__getOrderLikeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderLikeListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderLikeListResponse(struct soap *soap, lkf2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderLikeListResponse(struct soap *soap, const char *URL, lkf2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderLikeListResponse(struct soap *soap, const char *URL, lkf2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderLikeListResponse(struct soap *soap, const char *URL, lkf2__getOrderLikeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderLikeListResponse * SOAP_FMAC4 soap_get_lkf2__getOrderLikeListResponse(struct soap*, lkf2__getOrderLikeListResponse *, const char*, const char*);

inline int soap_read_lkf2__getOrderLikeListResponse(struct soap *soap, lkf2__getOrderLikeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderLikeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderLikeListResponse(struct soap *soap, const char *URL, lkf2__getOrderLikeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderLikeListResponse(struct soap *soap, lkf2__getOrderLikeListResponse *p)
{
	if (::soap_read_lkf2__getOrderLikeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderLikeList_DEFINED
#define SOAP_TYPE_lkf2__getOrderLikeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderLikeList(struct soap*, const char*, int, const lkf2__getOrderLikeList *, const char*);
SOAP_FMAC3 lkf2__getOrderLikeList * SOAP_FMAC4 soap_in_lkf2__getOrderLikeList(struct soap*, const char*, lkf2__getOrderLikeList *, const char*);
SOAP_FMAC1 lkf2__getOrderLikeList * SOAP_FMAC2 soap_instantiate_lkf2__getOrderLikeList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderLikeList * soap_new_lkf2__getOrderLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderLikeList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderLikeList * soap_new_req_lkf2__getOrderLikeList(
	struct soap *soap)
{
	lkf2__getOrderLikeList *_p = ::soap_new_lkf2__getOrderLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderLikeList * soap_new_set_lkf2__getOrderLikeList(
	struct soap *soap,
	std::string *arg0)
{
	lkf2__getOrderLikeList *_p = ::soap_new_lkf2__getOrderLikeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderLikeList::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderLikeList(struct soap *soap, lkf2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeList", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderLikeList(struct soap *soap, const char *URL, lkf2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeList", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderLikeList(struct soap *soap, const char *URL, lkf2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeList", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderLikeList(struct soap *soap, const char *URL, lkf2__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderLikeList", p->soap_type() == SOAP_TYPE_lkf2__getOrderLikeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderLikeList * SOAP_FMAC4 soap_get_lkf2__getOrderLikeList(struct soap*, lkf2__getOrderLikeList *, const char*, const char*);

inline int soap_read_lkf2__getOrderLikeList(struct soap *soap, lkf2__getOrderLikeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderLikeList(struct soap *soap, const char *URL, lkf2__getOrderLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderLikeList(struct soap *soap, lkf2__getOrderLikeList *p)
{
	if (::soap_read_lkf2__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteProductByInfoResponse_DEFINED
#define SOAP_TYPE_lkf2__deleteProductByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteProductByInfoResponse(struct soap*, const char*, int, const lkf2__deleteProductByInfoResponse *, const char*);
SOAP_FMAC3 lkf2__deleteProductByInfoResponse * SOAP_FMAC4 soap_in_lkf2__deleteProductByInfoResponse(struct soap*, const char*, lkf2__deleteProductByInfoResponse *, const char*);
SOAP_FMAC1 lkf2__deleteProductByInfoResponse * SOAP_FMAC2 soap_instantiate_lkf2__deleteProductByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteProductByInfoResponse * soap_new_lkf2__deleteProductByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteProductByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteProductByInfoResponse * soap_new_req_lkf2__deleteProductByInfoResponse(
	struct soap *soap)
{
	lkf2__deleteProductByInfoResponse *_p = ::soap_new_lkf2__deleteProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteProductByInfoResponse * soap_new_set_lkf2__deleteProductByInfoResponse(
	struct soap *soap)
{
	lkf2__deleteProductByInfoResponse *_p = ::soap_new_lkf2__deleteProductByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__deleteProductByInfoResponse(struct soap *soap, lkf2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteProductByInfoResponse(struct soap *soap, const char *URL, lkf2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteProductByInfoResponse(struct soap *soap, const char *URL, lkf2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteProductByInfoResponse(struct soap *soap, const char *URL, lkf2__deleteProductByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteProductByInfoResponse * SOAP_FMAC4 soap_get_lkf2__deleteProductByInfoResponse(struct soap*, lkf2__deleteProductByInfoResponse *, const char*, const char*);

inline int soap_read_lkf2__deleteProductByInfoResponse(struct soap *soap, lkf2__deleteProductByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteProductByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteProductByInfoResponse(struct soap *soap, const char *URL, lkf2__deleteProductByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteProductByInfoResponse(struct soap *soap, lkf2__deleteProductByInfoResponse *p)
{
	if (::soap_read_lkf2__deleteProductByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteProductByInfo_DEFINED
#define SOAP_TYPE_lkf2__deleteProductByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteProductByInfo(struct soap*, const char*, int, const lkf2__deleteProductByInfo *, const char*);
SOAP_FMAC3 lkf2__deleteProductByInfo * SOAP_FMAC4 soap_in_lkf2__deleteProductByInfo(struct soap*, const char*, lkf2__deleteProductByInfo *, const char*);
SOAP_FMAC1 lkf2__deleteProductByInfo * SOAP_FMAC2 soap_instantiate_lkf2__deleteProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteProductByInfo * soap_new_lkf2__deleteProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteProductByInfo(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteProductByInfo * soap_new_req_lkf2__deleteProductByInfo(
	struct soap *soap)
{
	lkf2__deleteProductByInfo *_p = ::soap_new_lkf2__deleteProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteProductByInfo * soap_new_set_lkf2__deleteProductByInfo(
	struct soap *soap,
	lkf2__product *arg0)
{
	lkf2__deleteProductByInfo *_p = ::soap_new_lkf2__deleteProductByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__deleteProductByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__deleteProductByInfo(struct soap *soap, lkf2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteProductByInfo(struct soap *soap, const char *URL, lkf2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteProductByInfo(struct soap *soap, const char *URL, lkf2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteProductByInfo(struct soap *soap, const char *URL, lkf2__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductByInfo", p->soap_type() == SOAP_TYPE_lkf2__deleteProductByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteProductByInfo * SOAP_FMAC4 soap_get_lkf2__deleteProductByInfo(struct soap*, lkf2__deleteProductByInfo *, const char*, const char*);

inline int soap_read_lkf2__deleteProductByInfo(struct soap *soap, lkf2__deleteProductByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteProductByInfo(struct soap *soap, const char *URL, lkf2__deleteProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteProductByInfo(struct soap *soap, lkf2__deleteProductByInfo *p)
{
	if (::soap_read_lkf2__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse_DEFINED
#define SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteClientByNameAndPwdResponse(struct soap*, const char*, int, const lkf2__deleteClientByNameAndPwdResponse *, const char*);
SOAP_FMAC3 lkf2__deleteClientByNameAndPwdResponse * SOAP_FMAC4 soap_in_lkf2__deleteClientByNameAndPwdResponse(struct soap*, const char*, lkf2__deleteClientByNameAndPwdResponse *, const char*);
SOAP_FMAC1 lkf2__deleteClientByNameAndPwdResponse * SOAP_FMAC2 soap_instantiate_lkf2__deleteClientByNameAndPwdResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteClientByNameAndPwdResponse * soap_new_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteClientByNameAndPwdResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteClientByNameAndPwdResponse * soap_new_req_lkf2__deleteClientByNameAndPwdResponse(
	struct soap *soap)
{
	lkf2__deleteClientByNameAndPwdResponse *_p = ::soap_new_lkf2__deleteClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteClientByNameAndPwdResponse * soap_new_set_lkf2__deleteClientByNameAndPwdResponse(
	struct soap *soap)
{
	lkf2__deleteClientByNameAndPwdResponse *_p = ::soap_new_lkf2__deleteClientByNameAndPwdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, lkf2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwdResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteClientByNameAndPwdResponse * SOAP_FMAC4 soap_get_lkf2__deleteClientByNameAndPwdResponse(struct soap*, lkf2__deleteClientByNameAndPwdResponse *, const char*, const char*);

inline int soap_read_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, lkf2__deleteClientByNameAndPwdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteClientByNameAndPwdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteClientByNameAndPwdResponse(struct soap *soap, lkf2__deleteClientByNameAndPwdResponse *p)
{
	if (::soap_read_lkf2__deleteClientByNameAndPwdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE_lkf2__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteClientByNameAndPwd(struct soap*, const char*, int, const lkf2__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC3 lkf2__deleteClientByNameAndPwd * SOAP_FMAC4 soap_in_lkf2__deleteClientByNameAndPwd(struct soap*, const char*, lkf2__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC1 lkf2__deleteClientByNameAndPwd * SOAP_FMAC2 soap_instantiate_lkf2__deleteClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteClientByNameAndPwd * soap_new_lkf2__deleteClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteClientByNameAndPwd * soap_new_req_lkf2__deleteClientByNameAndPwd(
	struct soap *soap)
{
	lkf2__deleteClientByNameAndPwd *_p = ::soap_new_lkf2__deleteClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteClientByNameAndPwd * soap_new_set_lkf2__deleteClientByNameAndPwd(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	lkf2__deleteClientByNameAndPwd *_p = ::soap_new_lkf2__deleteClientByNameAndPwd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__deleteClientByNameAndPwd::arg0 = arg0;
		_p->lkf2__deleteClientByNameAndPwd::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_lkf2__deleteClientByNameAndPwd(struct soap *soap, lkf2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteClientByNameAndPwd", p->soap_type() == SOAP_TYPE_lkf2__deleteClientByNameAndPwd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteClientByNameAndPwd * SOAP_FMAC4 soap_get_lkf2__deleteClientByNameAndPwd(struct soap*, lkf2__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_read_lkf2__deleteClientByNameAndPwd(struct soap *soap, lkf2__deleteClientByNameAndPwd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteClientByNameAndPwd(struct soap *soap, const char *URL, lkf2__deleteClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteClientByNameAndPwd(struct soap *soap, lkf2__deleteClientByNameAndPwd *p)
{
	if (::soap_read_lkf2__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateClientResponse_DEFINED
#define SOAP_TYPE_lkf2__updateClientResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateClientResponse(struct soap*, const char*, int, const lkf2__updateClientResponse *, const char*);
SOAP_FMAC3 lkf2__updateClientResponse * SOAP_FMAC4 soap_in_lkf2__updateClientResponse(struct soap*, const char*, lkf2__updateClientResponse *, const char*);
SOAP_FMAC1 lkf2__updateClientResponse * SOAP_FMAC2 soap_instantiate_lkf2__updateClientResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateClientResponse * soap_new_lkf2__updateClientResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateClientResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateClientResponse * soap_new_req_lkf2__updateClientResponse(
	struct soap *soap)
{
	lkf2__updateClientResponse *_p = ::soap_new_lkf2__updateClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateClientResponse * soap_new_set_lkf2__updateClientResponse(
	struct soap *soap)
{
	lkf2__updateClientResponse *_p = ::soap_new_lkf2__updateClientResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__updateClientResponse(struct soap *soap, lkf2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClientResponse", p->soap_type() == SOAP_TYPE_lkf2__updateClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateClientResponse(struct soap *soap, const char *URL, lkf2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClientResponse", p->soap_type() == SOAP_TYPE_lkf2__updateClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateClientResponse(struct soap *soap, const char *URL, lkf2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClientResponse", p->soap_type() == SOAP_TYPE_lkf2__updateClientResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateClientResponse(struct soap *soap, const char *URL, lkf2__updateClientResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClientResponse", p->soap_type() == SOAP_TYPE_lkf2__updateClientResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateClientResponse * SOAP_FMAC4 soap_get_lkf2__updateClientResponse(struct soap*, lkf2__updateClientResponse *, const char*, const char*);

inline int soap_read_lkf2__updateClientResponse(struct soap *soap, lkf2__updateClientResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateClientResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateClientResponse(struct soap *soap, const char *URL, lkf2__updateClientResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateClientResponse(struct soap *soap, lkf2__updateClientResponse *p)
{
	if (::soap_read_lkf2__updateClientResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__client_DEFINED
#define SOAP_TYPE_lkf2__client_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__client(struct soap*, const char*, int, const lkf2__client *, const char*);
SOAP_FMAC3 lkf2__client * SOAP_FMAC4 soap_in_lkf2__client(struct soap*, const char*, lkf2__client *, const char*);
SOAP_FMAC1 lkf2__client * SOAP_FMAC2 soap_instantiate_lkf2__client(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__client * soap_new_lkf2__client(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__client(soap, n, NULL, NULL, NULL);
}

inline lkf2__client * soap_new_req_lkf2__client(
	struct soap *soap,
	int clientBought,
	int clientId)
{
	lkf2__client *_p = ::soap_new_lkf2__client(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__client::clientBought = clientBought;
		_p->lkf2__client::clientId = clientId;
	}
	return _p;
}

inline lkf2__client * soap_new_set_lkf2__client(
	struct soap *soap,
	int clientBought,
	std::string *clientEmail,
	int clientId,
	std::string *clientImage,
	std::string *clientName,
	std::string *clientPhone,
	std::string *clientPwd,
	time_t *clientSignTime)
{
	lkf2__client *_p = ::soap_new_lkf2__client(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__client::clientBought = clientBought;
		_p->lkf2__client::clientEmail = clientEmail;
		_p->lkf2__client::clientId = clientId;
		_p->lkf2__client::clientImage = clientImage;
		_p->lkf2__client::clientName = clientName;
		_p->lkf2__client::clientPhone = clientPhone;
		_p->lkf2__client::clientPwd = clientPwd;
		_p->lkf2__client::clientSignTime = clientSignTime;
	}
	return _p;
}

inline int soap_write_lkf2__client(struct soap *soap, lkf2__client const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:client", p->soap_type() == SOAP_TYPE_lkf2__client ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__client(struct soap *soap, const char *URL, lkf2__client const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:client", p->soap_type() == SOAP_TYPE_lkf2__client ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__client(struct soap *soap, const char *URL, lkf2__client const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:client", p->soap_type() == SOAP_TYPE_lkf2__client ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__client(struct soap *soap, const char *URL, lkf2__client const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:client", p->soap_type() == SOAP_TYPE_lkf2__client ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__client * SOAP_FMAC4 soap_get_lkf2__client(struct soap*, lkf2__client *, const char*, const char*);

inline int soap_read_lkf2__client(struct soap *soap, lkf2__client *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__client(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__client(struct soap *soap, const char *URL, lkf2__client *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__client(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__client(struct soap *soap, lkf2__client *p)
{
	if (::soap_read_lkf2__client(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__updateClient_DEFINED
#define SOAP_TYPE_lkf2__updateClient_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__updateClient(struct soap*, const char*, int, const lkf2__updateClient *, const char*);
SOAP_FMAC3 lkf2__updateClient * SOAP_FMAC4 soap_in_lkf2__updateClient(struct soap*, const char*, lkf2__updateClient *, const char*);
SOAP_FMAC1 lkf2__updateClient * SOAP_FMAC2 soap_instantiate_lkf2__updateClient(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__updateClient * soap_new_lkf2__updateClient(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__updateClient(soap, n, NULL, NULL, NULL);
}

inline lkf2__updateClient * soap_new_req_lkf2__updateClient(
	struct soap *soap)
{
	lkf2__updateClient *_p = ::soap_new_lkf2__updateClient(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__updateClient * soap_new_set_lkf2__updateClient(
	struct soap *soap,
	lkf2__client *arg0)
{
	lkf2__updateClient *_p = ::soap_new_lkf2__updateClient(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__updateClient::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__updateClient(struct soap *soap, lkf2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClient", p->soap_type() == SOAP_TYPE_lkf2__updateClient ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__updateClient(struct soap *soap, const char *URL, lkf2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClient", p->soap_type() == SOAP_TYPE_lkf2__updateClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__updateClient(struct soap *soap, const char *URL, lkf2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClient", p->soap_type() == SOAP_TYPE_lkf2__updateClient ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__updateClient(struct soap *soap, const char *URL, lkf2__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:updateClient", p->soap_type() == SOAP_TYPE_lkf2__updateClient ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__updateClient * SOAP_FMAC4 soap_get_lkf2__updateClient(struct soap*, lkf2__updateClient *, const char*, const char*);

inline int soap_read_lkf2__updateClient(struct soap *soap, lkf2__updateClient *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__updateClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__updateClient(struct soap *soap, const char *URL, lkf2__updateClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__updateClient(struct soap *soap, lkf2__updateClient *p)
{
	if (::soap_read_lkf2__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductListByInfoResponse_DEFINED
#define SOAP_TYPE_lkf2__getProductListByInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductListByInfoResponse(struct soap*, const char*, int, const lkf2__getProductListByInfoResponse *, const char*);
SOAP_FMAC3 lkf2__getProductListByInfoResponse * SOAP_FMAC4 soap_in_lkf2__getProductListByInfoResponse(struct soap*, const char*, lkf2__getProductListByInfoResponse *, const char*);
SOAP_FMAC1 lkf2__getProductListByInfoResponse * SOAP_FMAC2 soap_instantiate_lkf2__getProductListByInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductListByInfoResponse * soap_new_lkf2__getProductListByInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductListByInfoResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductListByInfoResponse * soap_new_req_lkf2__getProductListByInfoResponse(
	struct soap *soap)
{
	lkf2__getProductListByInfoResponse *_p = ::soap_new_lkf2__getProductListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductListByInfoResponse * soap_new_set_lkf2__getProductListByInfoResponse(
	struct soap *soap,
	const std::vector<lkf2__product *> & return_)
{
	lkf2__getProductListByInfoResponse *_p = ::soap_new_lkf2__getProductListByInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductListByInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getProductListByInfoResponse(struct soap *soap, lkf2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductListByInfoResponse(struct soap *soap, const char *URL, lkf2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductListByInfoResponse(struct soap *soap, const char *URL, lkf2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductListByInfoResponse(struct soap *soap, const char *URL, lkf2__getProductListByInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfoResponse", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductListByInfoResponse * SOAP_FMAC4 soap_get_lkf2__getProductListByInfoResponse(struct soap*, lkf2__getProductListByInfoResponse *, const char*, const char*);

inline int soap_read_lkf2__getProductListByInfoResponse(struct soap *soap, lkf2__getProductListByInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductListByInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductListByInfoResponse(struct soap *soap, const char *URL, lkf2__getProductListByInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductListByInfoResponse(struct soap *soap, lkf2__getProductListByInfoResponse *p)
{
	if (::soap_read_lkf2__getProductListByInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getProductListByInfo_DEFINED
#define SOAP_TYPE_lkf2__getProductListByInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getProductListByInfo(struct soap*, const char*, int, const lkf2__getProductListByInfo *, const char*);
SOAP_FMAC3 lkf2__getProductListByInfo * SOAP_FMAC4 soap_in_lkf2__getProductListByInfo(struct soap*, const char*, lkf2__getProductListByInfo *, const char*);
SOAP_FMAC1 lkf2__getProductListByInfo * SOAP_FMAC2 soap_instantiate_lkf2__getProductListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getProductListByInfo * soap_new_lkf2__getProductListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getProductListByInfo(soap, n, NULL, NULL, NULL);
}

inline lkf2__getProductListByInfo * soap_new_req_lkf2__getProductListByInfo(
	struct soap *soap)
{
	lkf2__getProductListByInfo *_p = ::soap_new_lkf2__getProductListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getProductListByInfo * soap_new_set_lkf2__getProductListByInfo(
	struct soap *soap,
	lkf2__product *arg0)
{
	lkf2__getProductListByInfo *_p = ::soap_new_lkf2__getProductListByInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getProductListByInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__getProductListByInfo(struct soap *soap, lkf2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getProductListByInfo(struct soap *soap, const char *URL, lkf2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getProductListByInfo(struct soap *soap, const char *URL, lkf2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getProductListByInfo(struct soap *soap, const char *URL, lkf2__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getProductListByInfo", p->soap_type() == SOAP_TYPE_lkf2__getProductListByInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getProductListByInfo * SOAP_FMAC4 soap_get_lkf2__getProductListByInfo(struct soap*, lkf2__getProductListByInfo *, const char*, const char*);

inline int soap_read_lkf2__getProductListByInfo(struct soap *soap, lkf2__getProductListByInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getProductListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getProductListByInfo(struct soap *soap, const char *URL, lkf2__getProductListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getProductListByInfo(struct soap *soap, lkf2__getProductListByInfo *p)
{
	if (::soap_read_lkf2__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__order_DEFINED
#define SOAP_TYPE_lkf2__order_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__order(struct soap*, const char*, int, const lkf2__order *, const char*);
SOAP_FMAC3 lkf2__order * SOAP_FMAC4 soap_in_lkf2__order(struct soap*, const char*, lkf2__order *, const char*);
SOAP_FMAC1 lkf2__order * SOAP_FMAC2 soap_instantiate_lkf2__order(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__order * soap_new_lkf2__order(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__order(soap, n, NULL, NULL, NULL);
}

inline lkf2__order * soap_new_req_lkf2__order(
	struct soap *soap,
	int orderCheck,
	int orderClientId,
	int orderHide,
	int orderId,
	int orderProductId,
	int orderProductNum)
{
	lkf2__order *_p = ::soap_new_lkf2__order(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__order::orderCheck = orderCheck;
		_p->lkf2__order::orderClientId = orderClientId;
		_p->lkf2__order::orderHide = orderHide;
		_p->lkf2__order::orderId = orderId;
		_p->lkf2__order::orderProductId = orderProductId;
		_p->lkf2__order::orderProductNum = orderProductNum;
	}
	return _p;
}

inline lkf2__order * soap_new_set_lkf2__order(
	struct soap *soap,
	int orderCheck,
	std::string *orderClient,
	int orderClientId,
	std::string *orderCost,
	int orderHide,
	int orderId,
	int orderProductId,
	std::string *orderProductName,
	int orderProductNum,
	std::string *orderProductStyle,
	time_t *orderTime)
{
	lkf2__order *_p = ::soap_new_lkf2__order(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__order::orderCheck = orderCheck;
		_p->lkf2__order::orderClient = orderClient;
		_p->lkf2__order::orderClientId = orderClientId;
		_p->lkf2__order::orderCost = orderCost;
		_p->lkf2__order::orderHide = orderHide;
		_p->lkf2__order::orderId = orderId;
		_p->lkf2__order::orderProductId = orderProductId;
		_p->lkf2__order::orderProductName = orderProductName;
		_p->lkf2__order::orderProductNum = orderProductNum;
		_p->lkf2__order::orderProductStyle = orderProductStyle;
		_p->lkf2__order::orderTime = orderTime;
	}
	return _p;
}

inline int soap_write_lkf2__order(struct soap *soap, lkf2__order const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:order", p->soap_type() == SOAP_TYPE_lkf2__order ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__order(struct soap *soap, const char *URL, lkf2__order const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:order", p->soap_type() == SOAP_TYPE_lkf2__order ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__order(struct soap *soap, const char *URL, lkf2__order const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:order", p->soap_type() == SOAP_TYPE_lkf2__order ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__order(struct soap *soap, const char *URL, lkf2__order const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:order", p->soap_type() == SOAP_TYPE_lkf2__order ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__order * SOAP_FMAC4 soap_get_lkf2__order(struct soap*, lkf2__order *, const char*, const char*);

inline int soap_read_lkf2__order(struct soap *soap, lkf2__order *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__order(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__order(struct soap *soap, const char *URL, lkf2__order *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__order(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__order(struct soap *soap, lkf2__order *p)
{
	if (::soap_read_lkf2__order(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderListResponse_DEFINED
#define SOAP_TYPE_lkf2__getOrderListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderListResponse(struct soap*, const char*, int, const lkf2__getOrderListResponse *, const char*);
SOAP_FMAC3 lkf2__getOrderListResponse * SOAP_FMAC4 soap_in_lkf2__getOrderListResponse(struct soap*, const char*, lkf2__getOrderListResponse *, const char*);
SOAP_FMAC1 lkf2__getOrderListResponse * SOAP_FMAC2 soap_instantiate_lkf2__getOrderListResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderListResponse * soap_new_lkf2__getOrderListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderListResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderListResponse * soap_new_req_lkf2__getOrderListResponse(
	struct soap *soap)
{
	lkf2__getOrderListResponse *_p = ::soap_new_lkf2__getOrderListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderListResponse * soap_new_set_lkf2__getOrderListResponse(
	struct soap *soap,
	const std::vector<lkf2__order *> & return_)
{
	lkf2__getOrderListResponse *_p = ::soap_new_lkf2__getOrderListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__getOrderListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_lkf2__getOrderListResponse(struct soap *soap, lkf2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderListResponse(struct soap *soap, const char *URL, lkf2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderListResponse(struct soap *soap, const char *URL, lkf2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderListResponse(struct soap *soap, const char *URL, lkf2__getOrderListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderListResponse", p->soap_type() == SOAP_TYPE_lkf2__getOrderListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderListResponse * SOAP_FMAC4 soap_get_lkf2__getOrderListResponse(struct soap*, lkf2__getOrderListResponse *, const char*, const char*);

inline int soap_read_lkf2__getOrderListResponse(struct soap *soap, lkf2__getOrderListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderListResponse(struct soap *soap, const char *URL, lkf2__getOrderListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderListResponse(struct soap *soap, lkf2__getOrderListResponse *p)
{
	if (::soap_read_lkf2__getOrderListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__getOrderList_DEFINED
#define SOAP_TYPE_lkf2__getOrderList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__getOrderList(struct soap*, const char*, int, const lkf2__getOrderList *, const char*);
SOAP_FMAC3 lkf2__getOrderList * SOAP_FMAC4 soap_in_lkf2__getOrderList(struct soap*, const char*, lkf2__getOrderList *, const char*);
SOAP_FMAC1 lkf2__getOrderList * SOAP_FMAC2 soap_instantiate_lkf2__getOrderList(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__getOrderList * soap_new_lkf2__getOrderList(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__getOrderList(soap, n, NULL, NULL, NULL);
}

inline lkf2__getOrderList * soap_new_req_lkf2__getOrderList(
	struct soap *soap)
{
	lkf2__getOrderList *_p = ::soap_new_lkf2__getOrderList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__getOrderList * soap_new_set_lkf2__getOrderList(
	struct soap *soap)
{
	lkf2__getOrderList *_p = ::soap_new_lkf2__getOrderList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__getOrderList(struct soap *soap, lkf2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderList", p->soap_type() == SOAP_TYPE_lkf2__getOrderList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__getOrderList(struct soap *soap, const char *URL, lkf2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderList", p->soap_type() == SOAP_TYPE_lkf2__getOrderList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__getOrderList(struct soap *soap, const char *URL, lkf2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderList", p->soap_type() == SOAP_TYPE_lkf2__getOrderList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__getOrderList(struct soap *soap, const char *URL, lkf2__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:getOrderList", p->soap_type() == SOAP_TYPE_lkf2__getOrderList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__getOrderList * SOAP_FMAC4 soap_get_lkf2__getOrderList(struct soap*, lkf2__getOrderList *, const char*, const char*);

inline int soap_read_lkf2__getOrderList(struct soap *soap, lkf2__getOrderList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__getOrderList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__getOrderList(struct soap *soap, const char *URL, lkf2__getOrderList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__getOrderList(struct soap *soap, lkf2__getOrderList *p)
{
	if (::soap_read_lkf2__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteProductTypeByNameResponse_DEFINED
#define SOAP_TYPE_lkf2__deleteProductTypeByNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteProductTypeByNameResponse(struct soap*, const char*, int, const lkf2__deleteProductTypeByNameResponse *, const char*);
SOAP_FMAC3 lkf2__deleteProductTypeByNameResponse * SOAP_FMAC4 soap_in_lkf2__deleteProductTypeByNameResponse(struct soap*, const char*, lkf2__deleteProductTypeByNameResponse *, const char*);
SOAP_FMAC1 lkf2__deleteProductTypeByNameResponse * SOAP_FMAC2 soap_instantiate_lkf2__deleteProductTypeByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteProductTypeByNameResponse * soap_new_lkf2__deleteProductTypeByNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteProductTypeByNameResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteProductTypeByNameResponse * soap_new_req_lkf2__deleteProductTypeByNameResponse(
	struct soap *soap)
{
	lkf2__deleteProductTypeByNameResponse *_p = ::soap_new_lkf2__deleteProductTypeByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteProductTypeByNameResponse * soap_new_set_lkf2__deleteProductTypeByNameResponse(
	struct soap *soap)
{
	lkf2__deleteProductTypeByNameResponse *_p = ::soap_new_lkf2__deleteProductTypeByNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__deleteProductTypeByNameResponse(struct soap *soap, lkf2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, lkf2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, lkf2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, lkf2__deleteProductTypeByNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByNameResponse", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteProductTypeByNameResponse * SOAP_FMAC4 soap_get_lkf2__deleteProductTypeByNameResponse(struct soap*, lkf2__deleteProductTypeByNameResponse *, const char*, const char*);

inline int soap_read_lkf2__deleteProductTypeByNameResponse(struct soap *soap, lkf2__deleteProductTypeByNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteProductTypeByNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteProductTypeByNameResponse(struct soap *soap, const char *URL, lkf2__deleteProductTypeByNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteProductTypeByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteProductTypeByNameResponse(struct soap *soap, lkf2__deleteProductTypeByNameResponse *p)
{
	if (::soap_read_lkf2__deleteProductTypeByNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__deleteProductTypeByName_DEFINED
#define SOAP_TYPE_lkf2__deleteProductTypeByName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__deleteProductTypeByName(struct soap*, const char*, int, const lkf2__deleteProductTypeByName *, const char*);
SOAP_FMAC3 lkf2__deleteProductTypeByName * SOAP_FMAC4 soap_in_lkf2__deleteProductTypeByName(struct soap*, const char*, lkf2__deleteProductTypeByName *, const char*);
SOAP_FMAC1 lkf2__deleteProductTypeByName * SOAP_FMAC2 soap_instantiate_lkf2__deleteProductTypeByName(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__deleteProductTypeByName * soap_new_lkf2__deleteProductTypeByName(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__deleteProductTypeByName(soap, n, NULL, NULL, NULL);
}

inline lkf2__deleteProductTypeByName * soap_new_req_lkf2__deleteProductTypeByName(
	struct soap *soap)
{
	lkf2__deleteProductTypeByName *_p = ::soap_new_lkf2__deleteProductTypeByName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__deleteProductTypeByName * soap_new_set_lkf2__deleteProductTypeByName(
	struct soap *soap,
	std::string *arg0)
{
	lkf2__deleteProductTypeByName *_p = ::soap_new_lkf2__deleteProductTypeByName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__deleteProductTypeByName::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__deleteProductTypeByName(struct soap *soap, lkf2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__deleteProductTypeByName(struct soap *soap, const char *URL, lkf2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__deleteProductTypeByName(struct soap *soap, const char *URL, lkf2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__deleteProductTypeByName(struct soap *soap, const char *URL, lkf2__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:deleteProductTypeByName", p->soap_type() == SOAP_TYPE_lkf2__deleteProductTypeByName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__deleteProductTypeByName * SOAP_FMAC4 soap_get_lkf2__deleteProductTypeByName(struct soap*, lkf2__deleteProductTypeByName *, const char*, const char*);

inline int soap_read_lkf2__deleteProductTypeByName(struct soap *soap, lkf2__deleteProductTypeByName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__deleteProductTypeByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__deleteProductTypeByName(struct soap *soap, const char *URL, lkf2__deleteProductTypeByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__deleteProductTypeByName(struct soap *soap, lkf2__deleteProductTypeByName *p)
{
	if (::soap_read_lkf2__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addProductResponse_DEFINED
#define SOAP_TYPE_lkf2__addProductResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addProductResponse(struct soap*, const char*, int, const lkf2__addProductResponse *, const char*);
SOAP_FMAC3 lkf2__addProductResponse * SOAP_FMAC4 soap_in_lkf2__addProductResponse(struct soap*, const char*, lkf2__addProductResponse *, const char*);
SOAP_FMAC1 lkf2__addProductResponse * SOAP_FMAC2 soap_instantiate_lkf2__addProductResponse(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addProductResponse * soap_new_lkf2__addProductResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addProductResponse(soap, n, NULL, NULL, NULL);
}

inline lkf2__addProductResponse * soap_new_req_lkf2__addProductResponse(
	struct soap *soap)
{
	lkf2__addProductResponse *_p = ::soap_new_lkf2__addProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addProductResponse * soap_new_set_lkf2__addProductResponse(
	struct soap *soap)
{
	lkf2__addProductResponse *_p = ::soap_new_lkf2__addProductResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_lkf2__addProductResponse(struct soap *soap, lkf2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addProductResponse(struct soap *soap, const char *URL, lkf2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addProductResponse(struct soap *soap, const char *URL, lkf2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addProductResponse(struct soap *soap, const char *URL, lkf2__addProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProductResponse", p->soap_type() == SOAP_TYPE_lkf2__addProductResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addProductResponse * SOAP_FMAC4 soap_get_lkf2__addProductResponse(struct soap*, lkf2__addProductResponse *, const char*, const char*);

inline int soap_read_lkf2__addProductResponse(struct soap *soap, lkf2__addProductResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addProductResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addProductResponse(struct soap *soap, const char *URL, lkf2__addProductResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addProductResponse(struct soap *soap, lkf2__addProductResponse *p)
{
	if (::soap_read_lkf2__addProductResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__product_DEFINED
#define SOAP_TYPE_lkf2__product_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__product(struct soap*, const char*, int, const lkf2__product *, const char*);
SOAP_FMAC3 lkf2__product * SOAP_FMAC4 soap_in_lkf2__product(struct soap*, const char*, lkf2__product *, const char*);
SOAP_FMAC1 lkf2__product * SOAP_FMAC2 soap_instantiate_lkf2__product(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__product * soap_new_lkf2__product(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__product(soap, n, NULL, NULL, NULL);
}

inline lkf2__product * soap_new_req_lkf2__product(
	struct soap *soap,
	int productBuyNum,
	float productDiscount,
	int productId,
	int productNum,
	int productPrice)
{
	lkf2__product *_p = ::soap_new_lkf2__product(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__product::productBuyNum = productBuyNum;
		_p->lkf2__product::productDiscount = productDiscount;
		_p->lkf2__product::productId = productId;
		_p->lkf2__product::productNum = productNum;
		_p->lkf2__product::productPrice = productPrice;
	}
	return _p;
}

inline lkf2__product * soap_new_set_lkf2__product(
	struct soap *soap,
	int productBuyNum,
	float productDiscount,
	int productId,
	std::string *productImage,
	std::string *productName,
	int productNum,
	int productPrice)
{
	lkf2__product *_p = ::soap_new_lkf2__product(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__product::productBuyNum = productBuyNum;
		_p->lkf2__product::productDiscount = productDiscount;
		_p->lkf2__product::productId = productId;
		_p->lkf2__product::productImage = productImage;
		_p->lkf2__product::productName = productName;
		_p->lkf2__product::productNum = productNum;
		_p->lkf2__product::productPrice = productPrice;
	}
	return _p;
}

inline int soap_write_lkf2__product(struct soap *soap, lkf2__product const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:product", p->soap_type() == SOAP_TYPE_lkf2__product ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__product(struct soap *soap, const char *URL, lkf2__product const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:product", p->soap_type() == SOAP_TYPE_lkf2__product ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__product(struct soap *soap, const char *URL, lkf2__product const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:product", p->soap_type() == SOAP_TYPE_lkf2__product ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__product(struct soap *soap, const char *URL, lkf2__product const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:product", p->soap_type() == SOAP_TYPE_lkf2__product ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__product * SOAP_FMAC4 soap_get_lkf2__product(struct soap*, lkf2__product *, const char*, const char*);

inline int soap_read_lkf2__product(struct soap *soap, lkf2__product *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__product(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__product(struct soap *soap, const char *URL, lkf2__product *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__product(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__product(struct soap *soap, lkf2__product *p)
{
	if (::soap_read_lkf2__product(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_lkf2__addProduct_DEFINED
#define SOAP_TYPE_lkf2__addProduct_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_lkf2__addProduct(struct soap*, const char*, int, const lkf2__addProduct *, const char*);
SOAP_FMAC3 lkf2__addProduct * SOAP_FMAC4 soap_in_lkf2__addProduct(struct soap*, const char*, lkf2__addProduct *, const char*);
SOAP_FMAC1 lkf2__addProduct * SOAP_FMAC2 soap_instantiate_lkf2__addProduct(struct soap*, int, const char*, const char*, size_t*);

inline lkf2__addProduct * soap_new_lkf2__addProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate_lkf2__addProduct(soap, n, NULL, NULL, NULL);
}

inline lkf2__addProduct * soap_new_req_lkf2__addProduct(
	struct soap *soap)
{
	lkf2__addProduct *_p = ::soap_new_lkf2__addProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline lkf2__addProduct * soap_new_set_lkf2__addProduct(
	struct soap *soap,
	lkf2__product *arg0)
{
	lkf2__addProduct *_p = ::soap_new_lkf2__addProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->lkf2__addProduct::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_lkf2__addProduct(struct soap *soap, lkf2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProduct", p->soap_type() == SOAP_TYPE_lkf2__addProduct ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_lkf2__addProduct(struct soap *soap, const char *URL, lkf2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProduct", p->soap_type() == SOAP_TYPE_lkf2__addProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_lkf2__addProduct(struct soap *soap, const char *URL, lkf2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProduct", p->soap_type() == SOAP_TYPE_lkf2__addProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_lkf2__addProduct(struct soap *soap, const char *URL, lkf2__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "lkf2:addProduct", p->soap_type() == SOAP_TYPE_lkf2__addProduct ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 lkf2__addProduct * SOAP_FMAC4 soap_get_lkf2__addProduct(struct soap*, lkf2__addProduct *, const char*, const char*);

inline int soap_read_lkf2__addProduct(struct soap *soap, lkf2__addProduct *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_lkf2__addProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_lkf2__addProduct(struct soap *soap, const char *URL, lkf2__addProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_lkf2__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_lkf2__addProduct(struct soap *soap, lkf2__addProduct *p)
{
	if (::soap_read_lkf2__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___lkf1__updateHistory_DEFINED
#define SOAP_TYPE___lkf1__updateHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__updateHistory(struct soap*, struct __lkf1__updateHistory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__updateHistory(struct soap*, const struct __lkf1__updateHistory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__updateHistory(struct soap*, const char*, int, const struct __lkf1__updateHistory *, const char*);
SOAP_FMAC3 struct __lkf1__updateHistory * SOAP_FMAC4 soap_in___lkf1__updateHistory(struct soap*, const char*, struct __lkf1__updateHistory *, const char*);
SOAP_FMAC1 struct __lkf1__updateHistory * SOAP_FMAC2 soap_instantiate___lkf1__updateHistory(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__updateHistory * soap_new___lkf1__updateHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__updateHistory(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__updateHistory * soap_new_req___lkf1__updateHistory(
	struct soap *soap)
{
	struct __lkf1__updateHistory *_p = ::soap_new___lkf1__updateHistory(soap);
	if (_p)
	{	::soap_default___lkf1__updateHistory(soap, _p);
	}
	return _p;
}

inline struct __lkf1__updateHistory * soap_new_set___lkf1__updateHistory(
	struct soap *soap,
	lkf2__updateHistory *lkf2__updateHistory_)
{
	struct __lkf1__updateHistory *_p = ::soap_new___lkf1__updateHistory(soap);
	if (_p)
	{	::soap_default___lkf1__updateHistory(soap, _p);
		_p->lkf2__updateHistory_ = lkf2__updateHistory_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__updateHistory(struct soap*, const struct __lkf1__updateHistory *, const char*, const char*);

inline int soap_write___lkf1__updateHistory(struct soap *soap, struct __lkf1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__updateHistory(soap, p), 0) || ::soap_put___lkf1__updateHistory(soap, p, "-lkf1:updateHistory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__updateHistory(struct soap *soap, const char *URL, struct __lkf1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateHistory(soap, p), 0) || ::soap_put___lkf1__updateHistory(soap, p, "-lkf1:updateHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__updateHistory(struct soap *soap, const char *URL, struct __lkf1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateHistory(soap, p), 0) || ::soap_put___lkf1__updateHistory(soap, p, "-lkf1:updateHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__updateHistory(struct soap *soap, const char *URL, struct __lkf1__updateHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateHistory(soap, p), 0) || ::soap_put___lkf1__updateHistory(soap, p, "-lkf1:updateHistory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__updateHistory * SOAP_FMAC4 soap_get___lkf1__updateHistory(struct soap*, struct __lkf1__updateHistory *, const char*, const char*);

inline int soap_read___lkf1__updateHistory(struct soap *soap, struct __lkf1__updateHistory *p)
{
	if (p)
	{	::soap_default___lkf1__updateHistory(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__updateHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__updateHistory(struct soap *soap, const char *URL, struct __lkf1__updateHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__updateHistory(struct soap *soap, struct __lkf1__updateHistory *p)
{
	if (::soap_read___lkf1__updateHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getOrderListHistory_DEFINED
#define SOAP_TYPE___lkf1__getOrderListHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getOrderListHistory(struct soap*, struct __lkf1__getOrderListHistory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getOrderListHistory(struct soap*, const struct __lkf1__getOrderListHistory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getOrderListHistory(struct soap*, const char*, int, const struct __lkf1__getOrderListHistory *, const char*);
SOAP_FMAC3 struct __lkf1__getOrderListHistory * SOAP_FMAC4 soap_in___lkf1__getOrderListHistory(struct soap*, const char*, struct __lkf1__getOrderListHistory *, const char*);
SOAP_FMAC1 struct __lkf1__getOrderListHistory * SOAP_FMAC2 soap_instantiate___lkf1__getOrderListHistory(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getOrderListHistory * soap_new___lkf1__getOrderListHistory(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getOrderListHistory(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getOrderListHistory * soap_new_req___lkf1__getOrderListHistory(
	struct soap *soap)
{
	struct __lkf1__getOrderListHistory *_p = ::soap_new___lkf1__getOrderListHistory(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderListHistory(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getOrderListHistory * soap_new_set___lkf1__getOrderListHistory(
	struct soap *soap,
	lkf2__getOrderListHistory *lkf2__getOrderListHistory_)
{
	struct __lkf1__getOrderListHistory *_p = ::soap_new___lkf1__getOrderListHistory(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderListHistory(soap, _p);
		_p->lkf2__getOrderListHistory_ = lkf2__getOrderListHistory_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getOrderListHistory(struct soap*, const struct __lkf1__getOrderListHistory *, const char*, const char*);

inline int soap_write___lkf1__getOrderListHistory(struct soap *soap, struct __lkf1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getOrderListHistory(soap, p), 0) || ::soap_put___lkf1__getOrderListHistory(soap, p, "-lkf1:getOrderListHistory", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getOrderListHistory(struct soap *soap, const char *URL, struct __lkf1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListHistory(soap, p), 0) || ::soap_put___lkf1__getOrderListHistory(soap, p, "-lkf1:getOrderListHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getOrderListHistory(struct soap *soap, const char *URL, struct __lkf1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListHistory(soap, p), 0) || ::soap_put___lkf1__getOrderListHistory(soap, p, "-lkf1:getOrderListHistory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getOrderListHistory(struct soap *soap, const char *URL, struct __lkf1__getOrderListHistory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListHistory(soap, p), 0) || ::soap_put___lkf1__getOrderListHistory(soap, p, "-lkf1:getOrderListHistory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getOrderListHistory * SOAP_FMAC4 soap_get___lkf1__getOrderListHistory(struct soap*, struct __lkf1__getOrderListHistory *, const char*, const char*);

inline int soap_read___lkf1__getOrderListHistory(struct soap *soap, struct __lkf1__getOrderListHistory *p)
{
	if (p)
	{	::soap_default___lkf1__getOrderListHistory(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getOrderListHistory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getOrderListHistory(struct soap *soap, const char *URL, struct __lkf1__getOrderListHistory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getOrderListHistory(struct soap *soap, struct __lkf1__getOrderListHistory *p)
{
	if (::soap_read___lkf1__getOrderListHistory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__InsertClient_DEFINED
#define SOAP_TYPE___lkf1__InsertClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__InsertClient(struct soap*, struct __lkf1__InsertClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__InsertClient(struct soap*, const struct __lkf1__InsertClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__InsertClient(struct soap*, const char*, int, const struct __lkf1__InsertClient *, const char*);
SOAP_FMAC3 struct __lkf1__InsertClient * SOAP_FMAC4 soap_in___lkf1__InsertClient(struct soap*, const char*, struct __lkf1__InsertClient *, const char*);
SOAP_FMAC1 struct __lkf1__InsertClient * SOAP_FMAC2 soap_instantiate___lkf1__InsertClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__InsertClient * soap_new___lkf1__InsertClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__InsertClient(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__InsertClient * soap_new_req___lkf1__InsertClient(
	struct soap *soap)
{
	struct __lkf1__InsertClient *_p = ::soap_new___lkf1__InsertClient(soap);
	if (_p)
	{	::soap_default___lkf1__InsertClient(soap, _p);
	}
	return _p;
}

inline struct __lkf1__InsertClient * soap_new_set___lkf1__InsertClient(
	struct soap *soap,
	lkf2__InsertClient *lkf2__InsertClient_)
{
	struct __lkf1__InsertClient *_p = ::soap_new___lkf1__InsertClient(soap);
	if (_p)
	{	::soap_default___lkf1__InsertClient(soap, _p);
		_p->lkf2__InsertClient_ = lkf2__InsertClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__InsertClient(struct soap*, const struct __lkf1__InsertClient *, const char*, const char*);

inline int soap_write___lkf1__InsertClient(struct soap *soap, struct __lkf1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__InsertClient(soap, p), 0) || ::soap_put___lkf1__InsertClient(soap, p, "-lkf1:InsertClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__InsertClient(struct soap *soap, const char *URL, struct __lkf1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__InsertClient(soap, p), 0) || ::soap_put___lkf1__InsertClient(soap, p, "-lkf1:InsertClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__InsertClient(struct soap *soap, const char *URL, struct __lkf1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__InsertClient(soap, p), 0) || ::soap_put___lkf1__InsertClient(soap, p, "-lkf1:InsertClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__InsertClient(struct soap *soap, const char *URL, struct __lkf1__InsertClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__InsertClient(soap, p), 0) || ::soap_put___lkf1__InsertClient(soap, p, "-lkf1:InsertClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__InsertClient * SOAP_FMAC4 soap_get___lkf1__InsertClient(struct soap*, struct __lkf1__InsertClient *, const char*, const char*);

inline int soap_read___lkf1__InsertClient(struct soap *soap, struct __lkf1__InsertClient *p)
{
	if (p)
	{	::soap_default___lkf1__InsertClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__InsertClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__InsertClient(struct soap *soap, const char *URL, struct __lkf1__InsertClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__InsertClient(struct soap *soap, struct __lkf1__InsertClient *p)
{
	if (::soap_read___lkf1__InsertClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getProductList_DEFINED
#define SOAP_TYPE___lkf1__getProductList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getProductList(struct soap*, struct __lkf1__getProductList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getProductList(struct soap*, const struct __lkf1__getProductList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getProductList(struct soap*, const char*, int, const struct __lkf1__getProductList *, const char*);
SOAP_FMAC3 struct __lkf1__getProductList * SOAP_FMAC4 soap_in___lkf1__getProductList(struct soap*, const char*, struct __lkf1__getProductList *, const char*);
SOAP_FMAC1 struct __lkf1__getProductList * SOAP_FMAC2 soap_instantiate___lkf1__getProductList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getProductList * soap_new___lkf1__getProductList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getProductList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getProductList * soap_new_req___lkf1__getProductList(
	struct soap *soap)
{
	struct __lkf1__getProductList *_p = ::soap_new___lkf1__getProductList(soap);
	if (_p)
	{	::soap_default___lkf1__getProductList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getProductList * soap_new_set___lkf1__getProductList(
	struct soap *soap,
	lkf2__getProductList *lkf2__getProductList_)
{
	struct __lkf1__getProductList *_p = ::soap_new___lkf1__getProductList(soap);
	if (_p)
	{	::soap_default___lkf1__getProductList(soap, _p);
		_p->lkf2__getProductList_ = lkf2__getProductList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getProductList(struct soap*, const struct __lkf1__getProductList *, const char*, const char*);

inline int soap_write___lkf1__getProductList(struct soap *soap, struct __lkf1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getProductList(soap, p), 0) || ::soap_put___lkf1__getProductList(soap, p, "-lkf1:getProductList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getProductList(struct soap *soap, const char *URL, struct __lkf1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductList(soap, p), 0) || ::soap_put___lkf1__getProductList(soap, p, "-lkf1:getProductList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getProductList(struct soap *soap, const char *URL, struct __lkf1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductList(soap, p), 0) || ::soap_put___lkf1__getProductList(soap, p, "-lkf1:getProductList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getProductList(struct soap *soap, const char *URL, struct __lkf1__getProductList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductList(soap, p), 0) || ::soap_put___lkf1__getProductList(soap, p, "-lkf1:getProductList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getProductList * SOAP_FMAC4 soap_get___lkf1__getProductList(struct soap*, struct __lkf1__getProductList *, const char*, const char*);

inline int soap_read___lkf1__getProductList(struct soap *soap, struct __lkf1__getProductList *p)
{
	if (p)
	{	::soap_default___lkf1__getProductList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getProductList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getProductList(struct soap *soap, const char *URL, struct __lkf1__getProductList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getProductList(struct soap *soap, struct __lkf1__getProductList *p)
{
	if (::soap_read___lkf1__getProductList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__deleteShoppingCart_DEFINED
#define SOAP_TYPE___lkf1__deleteShoppingCart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__deleteShoppingCart(struct soap*, struct __lkf1__deleteShoppingCart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__deleteShoppingCart(struct soap*, const struct __lkf1__deleteShoppingCart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__deleteShoppingCart(struct soap*, const char*, int, const struct __lkf1__deleteShoppingCart *, const char*);
SOAP_FMAC3 struct __lkf1__deleteShoppingCart * SOAP_FMAC4 soap_in___lkf1__deleteShoppingCart(struct soap*, const char*, struct __lkf1__deleteShoppingCart *, const char*);
SOAP_FMAC1 struct __lkf1__deleteShoppingCart * SOAP_FMAC2 soap_instantiate___lkf1__deleteShoppingCart(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__deleteShoppingCart * soap_new___lkf1__deleteShoppingCart(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__deleteShoppingCart(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__deleteShoppingCart * soap_new_req___lkf1__deleteShoppingCart(
	struct soap *soap)
{
	struct __lkf1__deleteShoppingCart *_p = ::soap_new___lkf1__deleteShoppingCart(soap);
	if (_p)
	{	::soap_default___lkf1__deleteShoppingCart(soap, _p);
	}
	return _p;
}

inline struct __lkf1__deleteShoppingCart * soap_new_set___lkf1__deleteShoppingCart(
	struct soap *soap,
	lkf2__deleteShoppingCart *lkf2__deleteShoppingCart_)
{
	struct __lkf1__deleteShoppingCart *_p = ::soap_new___lkf1__deleteShoppingCart(soap);
	if (_p)
	{	::soap_default___lkf1__deleteShoppingCart(soap, _p);
		_p->lkf2__deleteShoppingCart_ = lkf2__deleteShoppingCart_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__deleteShoppingCart(struct soap*, const struct __lkf1__deleteShoppingCart *, const char*, const char*);

inline int soap_write___lkf1__deleteShoppingCart(struct soap *soap, struct __lkf1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__deleteShoppingCart(soap, p), 0) || ::soap_put___lkf1__deleteShoppingCart(soap, p, "-lkf1:deleteShoppingCart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__deleteShoppingCart(struct soap *soap, const char *URL, struct __lkf1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteShoppingCart(soap, p), 0) || ::soap_put___lkf1__deleteShoppingCart(soap, p, "-lkf1:deleteShoppingCart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__deleteShoppingCart(struct soap *soap, const char *URL, struct __lkf1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteShoppingCart(soap, p), 0) || ::soap_put___lkf1__deleteShoppingCart(soap, p, "-lkf1:deleteShoppingCart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__deleteShoppingCart(struct soap *soap, const char *URL, struct __lkf1__deleteShoppingCart const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteShoppingCart(soap, p), 0) || ::soap_put___lkf1__deleteShoppingCart(soap, p, "-lkf1:deleteShoppingCart", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__deleteShoppingCart * SOAP_FMAC4 soap_get___lkf1__deleteShoppingCart(struct soap*, struct __lkf1__deleteShoppingCart *, const char*, const char*);

inline int soap_read___lkf1__deleteShoppingCart(struct soap *soap, struct __lkf1__deleteShoppingCart *p)
{
	if (p)
	{	::soap_default___lkf1__deleteShoppingCart(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__deleteShoppingCart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__deleteShoppingCart(struct soap *soap, const char *URL, struct __lkf1__deleteShoppingCart *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__deleteShoppingCart(struct soap *soap, struct __lkf1__deleteShoppingCart *p)
{
	if (::soap_read___lkf1__deleteShoppingCart(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE___lkf1__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getClientByNameAndPwd(struct soap*, struct __lkf1__getClientByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getClientByNameAndPwd(struct soap*, const struct __lkf1__getClientByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getClientByNameAndPwd(struct soap*, const char*, int, const struct __lkf1__getClientByNameAndPwd *, const char*);
SOAP_FMAC3 struct __lkf1__getClientByNameAndPwd * SOAP_FMAC4 soap_in___lkf1__getClientByNameAndPwd(struct soap*, const char*, struct __lkf1__getClientByNameAndPwd *, const char*);
SOAP_FMAC1 struct __lkf1__getClientByNameAndPwd * SOAP_FMAC2 soap_instantiate___lkf1__getClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getClientByNameAndPwd * soap_new___lkf1__getClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getClientByNameAndPwd * soap_new_req___lkf1__getClientByNameAndPwd(
	struct soap *soap)
{
	struct __lkf1__getClientByNameAndPwd *_p = ::soap_new___lkf1__getClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___lkf1__getClientByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getClientByNameAndPwd * soap_new_set___lkf1__getClientByNameAndPwd(
	struct soap *soap,
	lkf2__getClientByNameAndPwd *lkf2__getClientByNameAndPwd_)
{
	struct __lkf1__getClientByNameAndPwd *_p = ::soap_new___lkf1__getClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___lkf1__getClientByNameAndPwd(soap, _p);
		_p->lkf2__getClientByNameAndPwd_ = lkf2__getClientByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getClientByNameAndPwd(struct soap*, const struct __lkf1__getClientByNameAndPwd *, const char*, const char*);

inline int soap_write___lkf1__getClientByNameAndPwd(struct soap *soap, struct __lkf1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__getClientByNameAndPwd(soap, p, "-lkf1:getClientByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__getClientByNameAndPwd(soap, p, "-lkf1:getClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__getClientByNameAndPwd(soap, p, "-lkf1:getClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__getClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__getClientByNameAndPwd(soap, p, "-lkf1:getClientByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getClientByNameAndPwd * SOAP_FMAC4 soap_get___lkf1__getClientByNameAndPwd(struct soap*, struct __lkf1__getClientByNameAndPwd *, const char*, const char*);

inline int soap_read___lkf1__getClientByNameAndPwd(struct soap *soap, struct __lkf1__getClientByNameAndPwd *p)
{
	if (p)
	{	::soap_default___lkf1__getClientByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__getClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getClientByNameAndPwd(struct soap *soap, struct __lkf1__getClientByNameAndPwd *p)
{
	if (::soap_read___lkf1__getClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__addOrder_DEFINED
#define SOAP_TYPE___lkf1__addOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__addOrder(struct soap*, struct __lkf1__addOrder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__addOrder(struct soap*, const struct __lkf1__addOrder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__addOrder(struct soap*, const char*, int, const struct __lkf1__addOrder *, const char*);
SOAP_FMAC3 struct __lkf1__addOrder * SOAP_FMAC4 soap_in___lkf1__addOrder(struct soap*, const char*, struct __lkf1__addOrder *, const char*);
SOAP_FMAC1 struct __lkf1__addOrder * SOAP_FMAC2 soap_instantiate___lkf1__addOrder(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__addOrder * soap_new___lkf1__addOrder(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__addOrder(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__addOrder * soap_new_req___lkf1__addOrder(
	struct soap *soap)
{
	struct __lkf1__addOrder *_p = ::soap_new___lkf1__addOrder(soap);
	if (_p)
	{	::soap_default___lkf1__addOrder(soap, _p);
	}
	return _p;
}

inline struct __lkf1__addOrder * soap_new_set___lkf1__addOrder(
	struct soap *soap,
	lkf2__addOrder *lkf2__addOrder_)
{
	struct __lkf1__addOrder *_p = ::soap_new___lkf1__addOrder(soap);
	if (_p)
	{	::soap_default___lkf1__addOrder(soap, _p);
		_p->lkf2__addOrder_ = lkf2__addOrder_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__addOrder(struct soap*, const struct __lkf1__addOrder *, const char*, const char*);

inline int soap_write___lkf1__addOrder(struct soap *soap, struct __lkf1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__addOrder(soap, p), 0) || ::soap_put___lkf1__addOrder(soap, p, "-lkf1:addOrder", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__addOrder(struct soap *soap, const char *URL, struct __lkf1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addOrder(soap, p), 0) || ::soap_put___lkf1__addOrder(soap, p, "-lkf1:addOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__addOrder(struct soap *soap, const char *URL, struct __lkf1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addOrder(soap, p), 0) || ::soap_put___lkf1__addOrder(soap, p, "-lkf1:addOrder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__addOrder(struct soap *soap, const char *URL, struct __lkf1__addOrder const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addOrder(soap, p), 0) || ::soap_put___lkf1__addOrder(soap, p, "-lkf1:addOrder", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__addOrder * SOAP_FMAC4 soap_get___lkf1__addOrder(struct soap*, struct __lkf1__addOrder *, const char*, const char*);

inline int soap_read___lkf1__addOrder(struct soap *soap, struct __lkf1__addOrder *p)
{
	if (p)
	{	::soap_default___lkf1__addOrder(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__addOrder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__addOrder(struct soap *soap, const char *URL, struct __lkf1__addOrder *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__addOrder(struct soap *soap, struct __lkf1__addOrder *p)
{
	if (::soap_read___lkf1__addOrder(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getProductLikeList_DEFINED
#define SOAP_TYPE___lkf1__getProductLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getProductLikeList(struct soap*, struct __lkf1__getProductLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getProductLikeList(struct soap*, const struct __lkf1__getProductLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getProductLikeList(struct soap*, const char*, int, const struct __lkf1__getProductLikeList *, const char*);
SOAP_FMAC3 struct __lkf1__getProductLikeList * SOAP_FMAC4 soap_in___lkf1__getProductLikeList(struct soap*, const char*, struct __lkf1__getProductLikeList *, const char*);
SOAP_FMAC1 struct __lkf1__getProductLikeList * SOAP_FMAC2 soap_instantiate___lkf1__getProductLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getProductLikeList * soap_new___lkf1__getProductLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getProductLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getProductLikeList * soap_new_req___lkf1__getProductLikeList(
	struct soap *soap)
{
	struct __lkf1__getProductLikeList *_p = ::soap_new___lkf1__getProductLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getProductLikeList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getProductLikeList * soap_new_set___lkf1__getProductLikeList(
	struct soap *soap,
	lkf2__getProductLikeList *lkf2__getProductLikeList_)
{
	struct __lkf1__getProductLikeList *_p = ::soap_new___lkf1__getProductLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getProductLikeList(soap, _p);
		_p->lkf2__getProductLikeList_ = lkf2__getProductLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getProductLikeList(struct soap*, const struct __lkf1__getProductLikeList *, const char*, const char*);

inline int soap_write___lkf1__getProductLikeList(struct soap *soap, struct __lkf1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getProductLikeList(soap, p), 0) || ::soap_put___lkf1__getProductLikeList(soap, p, "-lkf1:getProductLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getProductLikeList(struct soap *soap, const char *URL, struct __lkf1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductLikeList(soap, p), 0) || ::soap_put___lkf1__getProductLikeList(soap, p, "-lkf1:getProductLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getProductLikeList(struct soap *soap, const char *URL, struct __lkf1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductLikeList(soap, p), 0) || ::soap_put___lkf1__getProductLikeList(soap, p, "-lkf1:getProductLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getProductLikeList(struct soap *soap, const char *URL, struct __lkf1__getProductLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductLikeList(soap, p), 0) || ::soap_put___lkf1__getProductLikeList(soap, p, "-lkf1:getProductLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getProductLikeList * SOAP_FMAC4 soap_get___lkf1__getProductLikeList(struct soap*, struct __lkf1__getProductLikeList *, const char*, const char*);

inline int soap_read___lkf1__getProductLikeList(struct soap *soap, struct __lkf1__getProductLikeList *p)
{
	if (p)
	{	::soap_default___lkf1__getProductLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getProductLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getProductLikeList(struct soap *soap, const char *URL, struct __lkf1__getProductLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getProductLikeList(struct soap *soap, struct __lkf1__getProductLikeList *p)
{
	if (::soap_read___lkf1__getProductLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__updateProductByInfo_DEFINED
#define SOAP_TYPE___lkf1__updateProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__updateProductByInfo(struct soap*, struct __lkf1__updateProductByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__updateProductByInfo(struct soap*, const struct __lkf1__updateProductByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__updateProductByInfo(struct soap*, const char*, int, const struct __lkf1__updateProductByInfo *, const char*);
SOAP_FMAC3 struct __lkf1__updateProductByInfo * SOAP_FMAC4 soap_in___lkf1__updateProductByInfo(struct soap*, const char*, struct __lkf1__updateProductByInfo *, const char*);
SOAP_FMAC1 struct __lkf1__updateProductByInfo * SOAP_FMAC2 soap_instantiate___lkf1__updateProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__updateProductByInfo * soap_new___lkf1__updateProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__updateProductByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__updateProductByInfo * soap_new_req___lkf1__updateProductByInfo(
	struct soap *soap)
{
	struct __lkf1__updateProductByInfo *_p = ::soap_new___lkf1__updateProductByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__updateProductByInfo(soap, _p);
	}
	return _p;
}

inline struct __lkf1__updateProductByInfo * soap_new_set___lkf1__updateProductByInfo(
	struct soap *soap,
	lkf2__updateProductByInfo *lkf2__updateProductByInfo_)
{
	struct __lkf1__updateProductByInfo *_p = ::soap_new___lkf1__updateProductByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__updateProductByInfo(soap, _p);
		_p->lkf2__updateProductByInfo_ = lkf2__updateProductByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__updateProductByInfo(struct soap*, const struct __lkf1__updateProductByInfo *, const char*, const char*);

inline int soap_write___lkf1__updateProductByInfo(struct soap *soap, struct __lkf1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__updateProductByInfo(soap, p), 0) || ::soap_put___lkf1__updateProductByInfo(soap, p, "-lkf1:updateProductByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__updateProductByInfo(struct soap *soap, const char *URL, struct __lkf1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateProductByInfo(soap, p), 0) || ::soap_put___lkf1__updateProductByInfo(soap, p, "-lkf1:updateProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__updateProductByInfo(struct soap *soap, const char *URL, struct __lkf1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateProductByInfo(soap, p), 0) || ::soap_put___lkf1__updateProductByInfo(soap, p, "-lkf1:updateProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__updateProductByInfo(struct soap *soap, const char *URL, struct __lkf1__updateProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateProductByInfo(soap, p), 0) || ::soap_put___lkf1__updateProductByInfo(soap, p, "-lkf1:updateProductByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__updateProductByInfo * SOAP_FMAC4 soap_get___lkf1__updateProductByInfo(struct soap*, struct __lkf1__updateProductByInfo *, const char*, const char*);

inline int soap_read___lkf1__updateProductByInfo(struct soap *soap, struct __lkf1__updateProductByInfo *p)
{
	if (p)
	{	::soap_default___lkf1__updateProductByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__updateProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__updateProductByInfo(struct soap *soap, const char *URL, struct __lkf1__updateProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__updateProductByInfo(struct soap *soap, struct __lkf1__updateProductByInfo *p)
{
	if (::soap_read___lkf1__updateProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__addProductType_DEFINED
#define SOAP_TYPE___lkf1__addProductType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__addProductType(struct soap*, struct __lkf1__addProductType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__addProductType(struct soap*, const struct __lkf1__addProductType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__addProductType(struct soap*, const char*, int, const struct __lkf1__addProductType *, const char*);
SOAP_FMAC3 struct __lkf1__addProductType * SOAP_FMAC4 soap_in___lkf1__addProductType(struct soap*, const char*, struct __lkf1__addProductType *, const char*);
SOAP_FMAC1 struct __lkf1__addProductType * SOAP_FMAC2 soap_instantiate___lkf1__addProductType(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__addProductType * soap_new___lkf1__addProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__addProductType(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__addProductType * soap_new_req___lkf1__addProductType(
	struct soap *soap)
{
	struct __lkf1__addProductType *_p = ::soap_new___lkf1__addProductType(soap);
	if (_p)
	{	::soap_default___lkf1__addProductType(soap, _p);
	}
	return _p;
}

inline struct __lkf1__addProductType * soap_new_set___lkf1__addProductType(
	struct soap *soap,
	lkf2__addProductType *lkf2__addProductType_)
{
	struct __lkf1__addProductType *_p = ::soap_new___lkf1__addProductType(soap);
	if (_p)
	{	::soap_default___lkf1__addProductType(soap, _p);
		_p->lkf2__addProductType_ = lkf2__addProductType_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__addProductType(struct soap*, const struct __lkf1__addProductType *, const char*, const char*);

inline int soap_write___lkf1__addProductType(struct soap *soap, struct __lkf1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__addProductType(soap, p), 0) || ::soap_put___lkf1__addProductType(soap, p, "-lkf1:addProductType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__addProductType(struct soap *soap, const char *URL, struct __lkf1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProductType(soap, p), 0) || ::soap_put___lkf1__addProductType(soap, p, "-lkf1:addProductType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__addProductType(struct soap *soap, const char *URL, struct __lkf1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProductType(soap, p), 0) || ::soap_put___lkf1__addProductType(soap, p, "-lkf1:addProductType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__addProductType(struct soap *soap, const char *URL, struct __lkf1__addProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProductType(soap, p), 0) || ::soap_put___lkf1__addProductType(soap, p, "-lkf1:addProductType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__addProductType * SOAP_FMAC4 soap_get___lkf1__addProductType(struct soap*, struct __lkf1__addProductType *, const char*, const char*);

inline int soap_read___lkf1__addProductType(struct soap *soap, struct __lkf1__addProductType *p)
{
	if (p)
	{	::soap_default___lkf1__addProductType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__addProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__addProductType(struct soap *soap, const char *URL, struct __lkf1__addProductType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__addProductType(struct soap *soap, struct __lkf1__addProductType *p)
{
	if (::soap_read___lkf1__addProductType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getOrderListByInfo_DEFINED
#define SOAP_TYPE___lkf1__getOrderListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getOrderListByInfo(struct soap*, struct __lkf1__getOrderListByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getOrderListByInfo(struct soap*, const struct __lkf1__getOrderListByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getOrderListByInfo(struct soap*, const char*, int, const struct __lkf1__getOrderListByInfo *, const char*);
SOAP_FMAC3 struct __lkf1__getOrderListByInfo * SOAP_FMAC4 soap_in___lkf1__getOrderListByInfo(struct soap*, const char*, struct __lkf1__getOrderListByInfo *, const char*);
SOAP_FMAC1 struct __lkf1__getOrderListByInfo * SOAP_FMAC2 soap_instantiate___lkf1__getOrderListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getOrderListByInfo * soap_new___lkf1__getOrderListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getOrderListByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getOrderListByInfo * soap_new_req___lkf1__getOrderListByInfo(
	struct soap *soap)
{
	struct __lkf1__getOrderListByInfo *_p = ::soap_new___lkf1__getOrderListByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderListByInfo(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getOrderListByInfo * soap_new_set___lkf1__getOrderListByInfo(
	struct soap *soap,
	lkf2__getOrderListByInfo *lkf2__getOrderListByInfo_)
{
	struct __lkf1__getOrderListByInfo *_p = ::soap_new___lkf1__getOrderListByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderListByInfo(soap, _p);
		_p->lkf2__getOrderListByInfo_ = lkf2__getOrderListByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getOrderListByInfo(struct soap*, const struct __lkf1__getOrderListByInfo *, const char*, const char*);

inline int soap_write___lkf1__getOrderListByInfo(struct soap *soap, struct __lkf1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getOrderListByInfo(soap, p), 0) || ::soap_put___lkf1__getOrderListByInfo(soap, p, "-lkf1:getOrderListByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getOrderListByInfo(struct soap *soap, const char *URL, struct __lkf1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListByInfo(soap, p), 0) || ::soap_put___lkf1__getOrderListByInfo(soap, p, "-lkf1:getOrderListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getOrderListByInfo(struct soap *soap, const char *URL, struct __lkf1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListByInfo(soap, p), 0) || ::soap_put___lkf1__getOrderListByInfo(soap, p, "-lkf1:getOrderListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getOrderListByInfo(struct soap *soap, const char *URL, struct __lkf1__getOrderListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderListByInfo(soap, p), 0) || ::soap_put___lkf1__getOrderListByInfo(soap, p, "-lkf1:getOrderListByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getOrderListByInfo * SOAP_FMAC4 soap_get___lkf1__getOrderListByInfo(struct soap*, struct __lkf1__getOrderListByInfo *, const char*, const char*);

inline int soap_read___lkf1__getOrderListByInfo(struct soap *soap, struct __lkf1__getOrderListByInfo *p)
{
	if (p)
	{	::soap_default___lkf1__getOrderListByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getOrderListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getOrderListByInfo(struct soap *soap, const char *URL, struct __lkf1__getOrderListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getOrderListByInfo(struct soap *soap, struct __lkf1__getOrderListByInfo *p)
{
	if (::soap_read___lkf1__getOrderListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getClientList_DEFINED
#define SOAP_TYPE___lkf1__getClientList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getClientList(struct soap*, struct __lkf1__getClientList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getClientList(struct soap*, const struct __lkf1__getClientList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getClientList(struct soap*, const char*, int, const struct __lkf1__getClientList *, const char*);
SOAP_FMAC3 struct __lkf1__getClientList * SOAP_FMAC4 soap_in___lkf1__getClientList(struct soap*, const char*, struct __lkf1__getClientList *, const char*);
SOAP_FMAC1 struct __lkf1__getClientList * SOAP_FMAC2 soap_instantiate___lkf1__getClientList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getClientList * soap_new___lkf1__getClientList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getClientList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getClientList * soap_new_req___lkf1__getClientList(
	struct soap *soap)
{
	struct __lkf1__getClientList *_p = ::soap_new___lkf1__getClientList(soap);
	if (_p)
	{	::soap_default___lkf1__getClientList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getClientList * soap_new_set___lkf1__getClientList(
	struct soap *soap,
	lkf2__getClientList *lkf2__getClientList_)
{
	struct __lkf1__getClientList *_p = ::soap_new___lkf1__getClientList(soap);
	if (_p)
	{	::soap_default___lkf1__getClientList(soap, _p);
		_p->lkf2__getClientList_ = lkf2__getClientList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getClientList(struct soap*, const struct __lkf1__getClientList *, const char*, const char*);

inline int soap_write___lkf1__getClientList(struct soap *soap, struct __lkf1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getClientList(soap, p), 0) || ::soap_put___lkf1__getClientList(soap, p, "-lkf1:getClientList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getClientList(struct soap *soap, const char *URL, struct __lkf1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientList(soap, p), 0) || ::soap_put___lkf1__getClientList(soap, p, "-lkf1:getClientList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getClientList(struct soap *soap, const char *URL, struct __lkf1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientList(soap, p), 0) || ::soap_put___lkf1__getClientList(soap, p, "-lkf1:getClientList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getClientList(struct soap *soap, const char *URL, struct __lkf1__getClientList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientList(soap, p), 0) || ::soap_put___lkf1__getClientList(soap, p, "-lkf1:getClientList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getClientList * SOAP_FMAC4 soap_get___lkf1__getClientList(struct soap*, struct __lkf1__getClientList *, const char*, const char*);

inline int soap_read___lkf1__getClientList(struct soap *soap, struct __lkf1__getClientList *p)
{
	if (p)
	{	::soap_default___lkf1__getClientList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getClientList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getClientList(struct soap *soap, const char *URL, struct __lkf1__getClientList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getClientList(struct soap *soap, struct __lkf1__getClientList *p)
{
	if (::soap_read___lkf1__getClientList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getProductTypeByProName_DEFINED
#define SOAP_TYPE___lkf1__getProductTypeByProName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getProductTypeByProName(struct soap*, struct __lkf1__getProductTypeByProName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getProductTypeByProName(struct soap*, const struct __lkf1__getProductTypeByProName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getProductTypeByProName(struct soap*, const char*, int, const struct __lkf1__getProductTypeByProName *, const char*);
SOAP_FMAC3 struct __lkf1__getProductTypeByProName * SOAP_FMAC4 soap_in___lkf1__getProductTypeByProName(struct soap*, const char*, struct __lkf1__getProductTypeByProName *, const char*);
SOAP_FMAC1 struct __lkf1__getProductTypeByProName * SOAP_FMAC2 soap_instantiate___lkf1__getProductTypeByProName(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getProductTypeByProName * soap_new___lkf1__getProductTypeByProName(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getProductTypeByProName(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getProductTypeByProName * soap_new_req___lkf1__getProductTypeByProName(
	struct soap *soap)
{
	struct __lkf1__getProductTypeByProName *_p = ::soap_new___lkf1__getProductTypeByProName(soap);
	if (_p)
	{	::soap_default___lkf1__getProductTypeByProName(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getProductTypeByProName * soap_new_set___lkf1__getProductTypeByProName(
	struct soap *soap,
	lkf2__getProductTypeByProName *lkf2__getProductTypeByProName_)
{
	struct __lkf1__getProductTypeByProName *_p = ::soap_new___lkf1__getProductTypeByProName(soap);
	if (_p)
	{	::soap_default___lkf1__getProductTypeByProName(soap, _p);
		_p->lkf2__getProductTypeByProName_ = lkf2__getProductTypeByProName_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getProductTypeByProName(struct soap*, const struct __lkf1__getProductTypeByProName *, const char*, const char*);

inline int soap_write___lkf1__getProductTypeByProName(struct soap *soap, struct __lkf1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getProductTypeByProName(soap, p), 0) || ::soap_put___lkf1__getProductTypeByProName(soap, p, "-lkf1:getProductTypeByProName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getProductTypeByProName(struct soap *soap, const char *URL, struct __lkf1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductTypeByProName(soap, p), 0) || ::soap_put___lkf1__getProductTypeByProName(soap, p, "-lkf1:getProductTypeByProName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getProductTypeByProName(struct soap *soap, const char *URL, struct __lkf1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductTypeByProName(soap, p), 0) || ::soap_put___lkf1__getProductTypeByProName(soap, p, "-lkf1:getProductTypeByProName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getProductTypeByProName(struct soap *soap, const char *URL, struct __lkf1__getProductTypeByProName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductTypeByProName(soap, p), 0) || ::soap_put___lkf1__getProductTypeByProName(soap, p, "-lkf1:getProductTypeByProName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getProductTypeByProName * SOAP_FMAC4 soap_get___lkf1__getProductTypeByProName(struct soap*, struct __lkf1__getProductTypeByProName *, const char*, const char*);

inline int soap_read___lkf1__getProductTypeByProName(struct soap *soap, struct __lkf1__getProductTypeByProName *p)
{
	if (p)
	{	::soap_default___lkf1__getProductTypeByProName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getProductTypeByProName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getProductTypeByProName(struct soap *soap, const char *URL, struct __lkf1__getProductTypeByProName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getProductTypeByProName(struct soap *soap, struct __lkf1__getProductTypeByProName *p)
{
	if (::soap_read___lkf1__getProductTypeByProName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getClientLikeList_DEFINED
#define SOAP_TYPE___lkf1__getClientLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getClientLikeList(struct soap*, struct __lkf1__getClientLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getClientLikeList(struct soap*, const struct __lkf1__getClientLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getClientLikeList(struct soap*, const char*, int, const struct __lkf1__getClientLikeList *, const char*);
SOAP_FMAC3 struct __lkf1__getClientLikeList * SOAP_FMAC4 soap_in___lkf1__getClientLikeList(struct soap*, const char*, struct __lkf1__getClientLikeList *, const char*);
SOAP_FMAC1 struct __lkf1__getClientLikeList * SOAP_FMAC2 soap_instantiate___lkf1__getClientLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getClientLikeList * soap_new___lkf1__getClientLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getClientLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getClientLikeList * soap_new_req___lkf1__getClientLikeList(
	struct soap *soap)
{
	struct __lkf1__getClientLikeList *_p = ::soap_new___lkf1__getClientLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getClientLikeList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getClientLikeList * soap_new_set___lkf1__getClientLikeList(
	struct soap *soap,
	lkf2__getClientLikeList *lkf2__getClientLikeList_)
{
	struct __lkf1__getClientLikeList *_p = ::soap_new___lkf1__getClientLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getClientLikeList(soap, _p);
		_p->lkf2__getClientLikeList_ = lkf2__getClientLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getClientLikeList(struct soap*, const struct __lkf1__getClientLikeList *, const char*, const char*);

inline int soap_write___lkf1__getClientLikeList(struct soap *soap, struct __lkf1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getClientLikeList(soap, p), 0) || ::soap_put___lkf1__getClientLikeList(soap, p, "-lkf1:getClientLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getClientLikeList(struct soap *soap, const char *URL, struct __lkf1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientLikeList(soap, p), 0) || ::soap_put___lkf1__getClientLikeList(soap, p, "-lkf1:getClientLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getClientLikeList(struct soap *soap, const char *URL, struct __lkf1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientLikeList(soap, p), 0) || ::soap_put___lkf1__getClientLikeList(soap, p, "-lkf1:getClientLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getClientLikeList(struct soap *soap, const char *URL, struct __lkf1__getClientLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getClientLikeList(soap, p), 0) || ::soap_put___lkf1__getClientLikeList(soap, p, "-lkf1:getClientLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getClientLikeList * SOAP_FMAC4 soap_get___lkf1__getClientLikeList(struct soap*, struct __lkf1__getClientLikeList *, const char*, const char*);

inline int soap_read___lkf1__getClientLikeList(struct soap *soap, struct __lkf1__getClientLikeList *p)
{
	if (p)
	{	::soap_default___lkf1__getClientLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getClientLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getClientLikeList(struct soap *soap, const char *URL, struct __lkf1__getClientLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getClientLikeList(struct soap *soap, struct __lkf1__getClientLikeList *p)
{
	if (::soap_read___lkf1__getClientLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getOrderLikeList_DEFINED
#define SOAP_TYPE___lkf1__getOrderLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getOrderLikeList(struct soap*, struct __lkf1__getOrderLikeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getOrderLikeList(struct soap*, const struct __lkf1__getOrderLikeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getOrderLikeList(struct soap*, const char*, int, const struct __lkf1__getOrderLikeList *, const char*);
SOAP_FMAC3 struct __lkf1__getOrderLikeList * SOAP_FMAC4 soap_in___lkf1__getOrderLikeList(struct soap*, const char*, struct __lkf1__getOrderLikeList *, const char*);
SOAP_FMAC1 struct __lkf1__getOrderLikeList * SOAP_FMAC2 soap_instantiate___lkf1__getOrderLikeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getOrderLikeList * soap_new___lkf1__getOrderLikeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getOrderLikeList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getOrderLikeList * soap_new_req___lkf1__getOrderLikeList(
	struct soap *soap)
{
	struct __lkf1__getOrderLikeList *_p = ::soap_new___lkf1__getOrderLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderLikeList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getOrderLikeList * soap_new_set___lkf1__getOrderLikeList(
	struct soap *soap,
	lkf2__getOrderLikeList *lkf2__getOrderLikeList_)
{
	struct __lkf1__getOrderLikeList *_p = ::soap_new___lkf1__getOrderLikeList(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderLikeList(soap, _p);
		_p->lkf2__getOrderLikeList_ = lkf2__getOrderLikeList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getOrderLikeList(struct soap*, const struct __lkf1__getOrderLikeList *, const char*, const char*);

inline int soap_write___lkf1__getOrderLikeList(struct soap *soap, struct __lkf1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getOrderLikeList(soap, p), 0) || ::soap_put___lkf1__getOrderLikeList(soap, p, "-lkf1:getOrderLikeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getOrderLikeList(struct soap *soap, const char *URL, struct __lkf1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderLikeList(soap, p), 0) || ::soap_put___lkf1__getOrderLikeList(soap, p, "-lkf1:getOrderLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getOrderLikeList(struct soap *soap, const char *URL, struct __lkf1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderLikeList(soap, p), 0) || ::soap_put___lkf1__getOrderLikeList(soap, p, "-lkf1:getOrderLikeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getOrderLikeList(struct soap *soap, const char *URL, struct __lkf1__getOrderLikeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderLikeList(soap, p), 0) || ::soap_put___lkf1__getOrderLikeList(soap, p, "-lkf1:getOrderLikeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getOrderLikeList * SOAP_FMAC4 soap_get___lkf1__getOrderLikeList(struct soap*, struct __lkf1__getOrderLikeList *, const char*, const char*);

inline int soap_read___lkf1__getOrderLikeList(struct soap *soap, struct __lkf1__getOrderLikeList *p)
{
	if (p)
	{	::soap_default___lkf1__getOrderLikeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getOrderLikeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getOrderLikeList(struct soap *soap, const char *URL, struct __lkf1__getOrderLikeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getOrderLikeList(struct soap *soap, struct __lkf1__getOrderLikeList *p)
{
	if (::soap_read___lkf1__getOrderLikeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__deleteProductByInfo_DEFINED
#define SOAP_TYPE___lkf1__deleteProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__deleteProductByInfo(struct soap*, struct __lkf1__deleteProductByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__deleteProductByInfo(struct soap*, const struct __lkf1__deleteProductByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__deleteProductByInfo(struct soap*, const char*, int, const struct __lkf1__deleteProductByInfo *, const char*);
SOAP_FMAC3 struct __lkf1__deleteProductByInfo * SOAP_FMAC4 soap_in___lkf1__deleteProductByInfo(struct soap*, const char*, struct __lkf1__deleteProductByInfo *, const char*);
SOAP_FMAC1 struct __lkf1__deleteProductByInfo * SOAP_FMAC2 soap_instantiate___lkf1__deleteProductByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__deleteProductByInfo * soap_new___lkf1__deleteProductByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__deleteProductByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__deleteProductByInfo * soap_new_req___lkf1__deleteProductByInfo(
	struct soap *soap)
{
	struct __lkf1__deleteProductByInfo *_p = ::soap_new___lkf1__deleteProductByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__deleteProductByInfo(soap, _p);
	}
	return _p;
}

inline struct __lkf1__deleteProductByInfo * soap_new_set___lkf1__deleteProductByInfo(
	struct soap *soap,
	lkf2__deleteProductByInfo *lkf2__deleteProductByInfo_)
{
	struct __lkf1__deleteProductByInfo *_p = ::soap_new___lkf1__deleteProductByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__deleteProductByInfo(soap, _p);
		_p->lkf2__deleteProductByInfo_ = lkf2__deleteProductByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__deleteProductByInfo(struct soap*, const struct __lkf1__deleteProductByInfo *, const char*, const char*);

inline int soap_write___lkf1__deleteProductByInfo(struct soap *soap, struct __lkf1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__deleteProductByInfo(soap, p), 0) || ::soap_put___lkf1__deleteProductByInfo(soap, p, "-lkf1:deleteProductByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__deleteProductByInfo(struct soap *soap, const char *URL, struct __lkf1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductByInfo(soap, p), 0) || ::soap_put___lkf1__deleteProductByInfo(soap, p, "-lkf1:deleteProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__deleteProductByInfo(struct soap *soap, const char *URL, struct __lkf1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductByInfo(soap, p), 0) || ::soap_put___lkf1__deleteProductByInfo(soap, p, "-lkf1:deleteProductByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__deleteProductByInfo(struct soap *soap, const char *URL, struct __lkf1__deleteProductByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductByInfo(soap, p), 0) || ::soap_put___lkf1__deleteProductByInfo(soap, p, "-lkf1:deleteProductByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__deleteProductByInfo * SOAP_FMAC4 soap_get___lkf1__deleteProductByInfo(struct soap*, struct __lkf1__deleteProductByInfo *, const char*, const char*);

inline int soap_read___lkf1__deleteProductByInfo(struct soap *soap, struct __lkf1__deleteProductByInfo *p)
{
	if (p)
	{	::soap_default___lkf1__deleteProductByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__deleteProductByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__deleteProductByInfo(struct soap *soap, const char *URL, struct __lkf1__deleteProductByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__deleteProductByInfo(struct soap *soap, struct __lkf1__deleteProductByInfo *p)
{
	if (::soap_read___lkf1__deleteProductByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE___lkf1__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__deleteClientByNameAndPwd(struct soap*, struct __lkf1__deleteClientByNameAndPwd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__deleteClientByNameAndPwd(struct soap*, const struct __lkf1__deleteClientByNameAndPwd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__deleteClientByNameAndPwd(struct soap*, const char*, int, const struct __lkf1__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC3 struct __lkf1__deleteClientByNameAndPwd * SOAP_FMAC4 soap_in___lkf1__deleteClientByNameAndPwd(struct soap*, const char*, struct __lkf1__deleteClientByNameAndPwd *, const char*);
SOAP_FMAC1 struct __lkf1__deleteClientByNameAndPwd * SOAP_FMAC2 soap_instantiate___lkf1__deleteClientByNameAndPwd(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__deleteClientByNameAndPwd * soap_new___lkf1__deleteClientByNameAndPwd(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__deleteClientByNameAndPwd(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__deleteClientByNameAndPwd * soap_new_req___lkf1__deleteClientByNameAndPwd(
	struct soap *soap)
{
	struct __lkf1__deleteClientByNameAndPwd *_p = ::soap_new___lkf1__deleteClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___lkf1__deleteClientByNameAndPwd(soap, _p);
	}
	return _p;
}

inline struct __lkf1__deleteClientByNameAndPwd * soap_new_set___lkf1__deleteClientByNameAndPwd(
	struct soap *soap,
	lkf2__deleteClientByNameAndPwd *lkf2__deleteClientByNameAndPwd_)
{
	struct __lkf1__deleteClientByNameAndPwd *_p = ::soap_new___lkf1__deleteClientByNameAndPwd(soap);
	if (_p)
	{	::soap_default___lkf1__deleteClientByNameAndPwd(soap, _p);
		_p->lkf2__deleteClientByNameAndPwd_ = lkf2__deleteClientByNameAndPwd_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__deleteClientByNameAndPwd(struct soap*, const struct __lkf1__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_write___lkf1__deleteClientByNameAndPwd(struct soap *soap, struct __lkf1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__deleteClientByNameAndPwd(soap, p, "-lkf1:deleteClientByNameAndPwd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__deleteClientByNameAndPwd(soap, p, "-lkf1:deleteClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__deleteClientByNameAndPwd(soap, p, "-lkf1:deleteClientByNameAndPwd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__deleteClientByNameAndPwd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteClientByNameAndPwd(soap, p), 0) || ::soap_put___lkf1__deleteClientByNameAndPwd(soap, p, "-lkf1:deleteClientByNameAndPwd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__deleteClientByNameAndPwd * SOAP_FMAC4 soap_get___lkf1__deleteClientByNameAndPwd(struct soap*, struct __lkf1__deleteClientByNameAndPwd *, const char*, const char*);

inline int soap_read___lkf1__deleteClientByNameAndPwd(struct soap *soap, struct __lkf1__deleteClientByNameAndPwd *p)
{
	if (p)
	{	::soap_default___lkf1__deleteClientByNameAndPwd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__deleteClientByNameAndPwd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__deleteClientByNameAndPwd(struct soap *soap, const char *URL, struct __lkf1__deleteClientByNameAndPwd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__deleteClientByNameAndPwd(struct soap *soap, struct __lkf1__deleteClientByNameAndPwd *p)
{
	if (::soap_read___lkf1__deleteClientByNameAndPwd(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__updateClient_DEFINED
#define SOAP_TYPE___lkf1__updateClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__updateClient(struct soap*, struct __lkf1__updateClient *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__updateClient(struct soap*, const struct __lkf1__updateClient *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__updateClient(struct soap*, const char*, int, const struct __lkf1__updateClient *, const char*);
SOAP_FMAC3 struct __lkf1__updateClient * SOAP_FMAC4 soap_in___lkf1__updateClient(struct soap*, const char*, struct __lkf1__updateClient *, const char*);
SOAP_FMAC1 struct __lkf1__updateClient * SOAP_FMAC2 soap_instantiate___lkf1__updateClient(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__updateClient * soap_new___lkf1__updateClient(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__updateClient(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__updateClient * soap_new_req___lkf1__updateClient(
	struct soap *soap)
{
	struct __lkf1__updateClient *_p = ::soap_new___lkf1__updateClient(soap);
	if (_p)
	{	::soap_default___lkf1__updateClient(soap, _p);
	}
	return _p;
}

inline struct __lkf1__updateClient * soap_new_set___lkf1__updateClient(
	struct soap *soap,
	lkf2__updateClient *lkf2__updateClient_)
{
	struct __lkf1__updateClient *_p = ::soap_new___lkf1__updateClient(soap);
	if (_p)
	{	::soap_default___lkf1__updateClient(soap, _p);
		_p->lkf2__updateClient_ = lkf2__updateClient_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__updateClient(struct soap*, const struct __lkf1__updateClient *, const char*, const char*);

inline int soap_write___lkf1__updateClient(struct soap *soap, struct __lkf1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__updateClient(soap, p), 0) || ::soap_put___lkf1__updateClient(soap, p, "-lkf1:updateClient", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__updateClient(struct soap *soap, const char *URL, struct __lkf1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateClient(soap, p), 0) || ::soap_put___lkf1__updateClient(soap, p, "-lkf1:updateClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__updateClient(struct soap *soap, const char *URL, struct __lkf1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateClient(soap, p), 0) || ::soap_put___lkf1__updateClient(soap, p, "-lkf1:updateClient", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__updateClient(struct soap *soap, const char *URL, struct __lkf1__updateClient const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__updateClient(soap, p), 0) || ::soap_put___lkf1__updateClient(soap, p, "-lkf1:updateClient", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__updateClient * SOAP_FMAC4 soap_get___lkf1__updateClient(struct soap*, struct __lkf1__updateClient *, const char*, const char*);

inline int soap_read___lkf1__updateClient(struct soap *soap, struct __lkf1__updateClient *p)
{
	if (p)
	{	::soap_default___lkf1__updateClient(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__updateClient(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__updateClient(struct soap *soap, const char *URL, struct __lkf1__updateClient *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__updateClient(struct soap *soap, struct __lkf1__updateClient *p)
{
	if (::soap_read___lkf1__updateClient(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getProductListByInfo_DEFINED
#define SOAP_TYPE___lkf1__getProductListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getProductListByInfo(struct soap*, struct __lkf1__getProductListByInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getProductListByInfo(struct soap*, const struct __lkf1__getProductListByInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getProductListByInfo(struct soap*, const char*, int, const struct __lkf1__getProductListByInfo *, const char*);
SOAP_FMAC3 struct __lkf1__getProductListByInfo * SOAP_FMAC4 soap_in___lkf1__getProductListByInfo(struct soap*, const char*, struct __lkf1__getProductListByInfo *, const char*);
SOAP_FMAC1 struct __lkf1__getProductListByInfo * SOAP_FMAC2 soap_instantiate___lkf1__getProductListByInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getProductListByInfo * soap_new___lkf1__getProductListByInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getProductListByInfo(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getProductListByInfo * soap_new_req___lkf1__getProductListByInfo(
	struct soap *soap)
{
	struct __lkf1__getProductListByInfo *_p = ::soap_new___lkf1__getProductListByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__getProductListByInfo(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getProductListByInfo * soap_new_set___lkf1__getProductListByInfo(
	struct soap *soap,
	lkf2__getProductListByInfo *lkf2__getProductListByInfo_)
{
	struct __lkf1__getProductListByInfo *_p = ::soap_new___lkf1__getProductListByInfo(soap);
	if (_p)
	{	::soap_default___lkf1__getProductListByInfo(soap, _p);
		_p->lkf2__getProductListByInfo_ = lkf2__getProductListByInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getProductListByInfo(struct soap*, const struct __lkf1__getProductListByInfo *, const char*, const char*);

inline int soap_write___lkf1__getProductListByInfo(struct soap *soap, struct __lkf1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getProductListByInfo(soap, p), 0) || ::soap_put___lkf1__getProductListByInfo(soap, p, "-lkf1:getProductListByInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getProductListByInfo(struct soap *soap, const char *URL, struct __lkf1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductListByInfo(soap, p), 0) || ::soap_put___lkf1__getProductListByInfo(soap, p, "-lkf1:getProductListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getProductListByInfo(struct soap *soap, const char *URL, struct __lkf1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductListByInfo(soap, p), 0) || ::soap_put___lkf1__getProductListByInfo(soap, p, "-lkf1:getProductListByInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getProductListByInfo(struct soap *soap, const char *URL, struct __lkf1__getProductListByInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getProductListByInfo(soap, p), 0) || ::soap_put___lkf1__getProductListByInfo(soap, p, "-lkf1:getProductListByInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getProductListByInfo * SOAP_FMAC4 soap_get___lkf1__getProductListByInfo(struct soap*, struct __lkf1__getProductListByInfo *, const char*, const char*);

inline int soap_read___lkf1__getProductListByInfo(struct soap *soap, struct __lkf1__getProductListByInfo *p)
{
	if (p)
	{	::soap_default___lkf1__getProductListByInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getProductListByInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getProductListByInfo(struct soap *soap, const char *URL, struct __lkf1__getProductListByInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getProductListByInfo(struct soap *soap, struct __lkf1__getProductListByInfo *p)
{
	if (::soap_read___lkf1__getProductListByInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__getOrderList_DEFINED
#define SOAP_TYPE___lkf1__getOrderList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__getOrderList(struct soap*, struct __lkf1__getOrderList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__getOrderList(struct soap*, const struct __lkf1__getOrderList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__getOrderList(struct soap*, const char*, int, const struct __lkf1__getOrderList *, const char*);
SOAP_FMAC3 struct __lkf1__getOrderList * SOAP_FMAC4 soap_in___lkf1__getOrderList(struct soap*, const char*, struct __lkf1__getOrderList *, const char*);
SOAP_FMAC1 struct __lkf1__getOrderList * SOAP_FMAC2 soap_instantiate___lkf1__getOrderList(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__getOrderList * soap_new___lkf1__getOrderList(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__getOrderList(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__getOrderList * soap_new_req___lkf1__getOrderList(
	struct soap *soap)
{
	struct __lkf1__getOrderList *_p = ::soap_new___lkf1__getOrderList(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderList(soap, _p);
	}
	return _p;
}

inline struct __lkf1__getOrderList * soap_new_set___lkf1__getOrderList(
	struct soap *soap,
	lkf2__getOrderList *lkf2__getOrderList_)
{
	struct __lkf1__getOrderList *_p = ::soap_new___lkf1__getOrderList(soap);
	if (_p)
	{	::soap_default___lkf1__getOrderList(soap, _p);
		_p->lkf2__getOrderList_ = lkf2__getOrderList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__getOrderList(struct soap*, const struct __lkf1__getOrderList *, const char*, const char*);

inline int soap_write___lkf1__getOrderList(struct soap *soap, struct __lkf1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__getOrderList(soap, p), 0) || ::soap_put___lkf1__getOrderList(soap, p, "-lkf1:getOrderList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__getOrderList(struct soap *soap, const char *URL, struct __lkf1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderList(soap, p), 0) || ::soap_put___lkf1__getOrderList(soap, p, "-lkf1:getOrderList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__getOrderList(struct soap *soap, const char *URL, struct __lkf1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderList(soap, p), 0) || ::soap_put___lkf1__getOrderList(soap, p, "-lkf1:getOrderList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__getOrderList(struct soap *soap, const char *URL, struct __lkf1__getOrderList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__getOrderList(soap, p), 0) || ::soap_put___lkf1__getOrderList(soap, p, "-lkf1:getOrderList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__getOrderList * SOAP_FMAC4 soap_get___lkf1__getOrderList(struct soap*, struct __lkf1__getOrderList *, const char*, const char*);

inline int soap_read___lkf1__getOrderList(struct soap *soap, struct __lkf1__getOrderList *p)
{
	if (p)
	{	::soap_default___lkf1__getOrderList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__getOrderList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__getOrderList(struct soap *soap, const char *URL, struct __lkf1__getOrderList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__getOrderList(struct soap *soap, struct __lkf1__getOrderList *p)
{
	if (::soap_read___lkf1__getOrderList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__deleteProductTypeByName_DEFINED
#define SOAP_TYPE___lkf1__deleteProductTypeByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__deleteProductTypeByName(struct soap*, struct __lkf1__deleteProductTypeByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__deleteProductTypeByName(struct soap*, const struct __lkf1__deleteProductTypeByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__deleteProductTypeByName(struct soap*, const char*, int, const struct __lkf1__deleteProductTypeByName *, const char*);
SOAP_FMAC3 struct __lkf1__deleteProductTypeByName * SOAP_FMAC4 soap_in___lkf1__deleteProductTypeByName(struct soap*, const char*, struct __lkf1__deleteProductTypeByName *, const char*);
SOAP_FMAC1 struct __lkf1__deleteProductTypeByName * SOAP_FMAC2 soap_instantiate___lkf1__deleteProductTypeByName(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__deleteProductTypeByName * soap_new___lkf1__deleteProductTypeByName(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__deleteProductTypeByName(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__deleteProductTypeByName * soap_new_req___lkf1__deleteProductTypeByName(
	struct soap *soap)
{
	struct __lkf1__deleteProductTypeByName *_p = ::soap_new___lkf1__deleteProductTypeByName(soap);
	if (_p)
	{	::soap_default___lkf1__deleteProductTypeByName(soap, _p);
	}
	return _p;
}

inline struct __lkf1__deleteProductTypeByName * soap_new_set___lkf1__deleteProductTypeByName(
	struct soap *soap,
	lkf2__deleteProductTypeByName *lkf2__deleteProductTypeByName_)
{
	struct __lkf1__deleteProductTypeByName *_p = ::soap_new___lkf1__deleteProductTypeByName(soap);
	if (_p)
	{	::soap_default___lkf1__deleteProductTypeByName(soap, _p);
		_p->lkf2__deleteProductTypeByName_ = lkf2__deleteProductTypeByName_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__deleteProductTypeByName(struct soap*, const struct __lkf1__deleteProductTypeByName *, const char*, const char*);

inline int soap_write___lkf1__deleteProductTypeByName(struct soap *soap, struct __lkf1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__deleteProductTypeByName(soap, p), 0) || ::soap_put___lkf1__deleteProductTypeByName(soap, p, "-lkf1:deleteProductTypeByName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __lkf1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductTypeByName(soap, p), 0) || ::soap_put___lkf1__deleteProductTypeByName(soap, p, "-lkf1:deleteProductTypeByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __lkf1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductTypeByName(soap, p), 0) || ::soap_put___lkf1__deleteProductTypeByName(soap, p, "-lkf1:deleteProductTypeByName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __lkf1__deleteProductTypeByName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__deleteProductTypeByName(soap, p), 0) || ::soap_put___lkf1__deleteProductTypeByName(soap, p, "-lkf1:deleteProductTypeByName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__deleteProductTypeByName * SOAP_FMAC4 soap_get___lkf1__deleteProductTypeByName(struct soap*, struct __lkf1__deleteProductTypeByName *, const char*, const char*);

inline int soap_read___lkf1__deleteProductTypeByName(struct soap *soap, struct __lkf1__deleteProductTypeByName *p)
{
	if (p)
	{	::soap_default___lkf1__deleteProductTypeByName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__deleteProductTypeByName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__deleteProductTypeByName(struct soap *soap, const char *URL, struct __lkf1__deleteProductTypeByName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__deleteProductTypeByName(struct soap *soap, struct __lkf1__deleteProductTypeByName *p)
{
	if (::soap_read___lkf1__deleteProductTypeByName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___lkf1__addProduct_DEFINED
#define SOAP_TYPE___lkf1__addProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___lkf1__addProduct(struct soap*, struct __lkf1__addProduct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___lkf1__addProduct(struct soap*, const struct __lkf1__addProduct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___lkf1__addProduct(struct soap*, const char*, int, const struct __lkf1__addProduct *, const char*);
SOAP_FMAC3 struct __lkf1__addProduct * SOAP_FMAC4 soap_in___lkf1__addProduct(struct soap*, const char*, struct __lkf1__addProduct *, const char*);
SOAP_FMAC1 struct __lkf1__addProduct * SOAP_FMAC2 soap_instantiate___lkf1__addProduct(struct soap*, int, const char*, const char*, size_t*);

inline struct __lkf1__addProduct * soap_new___lkf1__addProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate___lkf1__addProduct(soap, n, NULL, NULL, NULL);
}

inline struct __lkf1__addProduct * soap_new_req___lkf1__addProduct(
	struct soap *soap)
{
	struct __lkf1__addProduct *_p = ::soap_new___lkf1__addProduct(soap);
	if (_p)
	{	::soap_default___lkf1__addProduct(soap, _p);
	}
	return _p;
}

inline struct __lkf1__addProduct * soap_new_set___lkf1__addProduct(
	struct soap *soap,
	lkf2__addProduct *lkf2__addProduct_)
{
	struct __lkf1__addProduct *_p = ::soap_new___lkf1__addProduct(soap);
	if (_p)
	{	::soap_default___lkf1__addProduct(soap, _p);
		_p->lkf2__addProduct_ = lkf2__addProduct_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___lkf1__addProduct(struct soap*, const struct __lkf1__addProduct *, const char*, const char*);

inline int soap_write___lkf1__addProduct(struct soap *soap, struct __lkf1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___lkf1__addProduct(soap, p), 0) || ::soap_put___lkf1__addProduct(soap, p, "-lkf1:addProduct", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___lkf1__addProduct(struct soap *soap, const char *URL, struct __lkf1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProduct(soap, p), 0) || ::soap_put___lkf1__addProduct(soap, p, "-lkf1:addProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___lkf1__addProduct(struct soap *soap, const char *URL, struct __lkf1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProduct(soap, p), 0) || ::soap_put___lkf1__addProduct(soap, p, "-lkf1:addProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___lkf1__addProduct(struct soap *soap, const char *URL, struct __lkf1__addProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___lkf1__addProduct(soap, p), 0) || ::soap_put___lkf1__addProduct(soap, p, "-lkf1:addProduct", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __lkf1__addProduct * SOAP_FMAC4 soap_get___lkf1__addProduct(struct soap*, struct __lkf1__addProduct *, const char*, const char*);

inline int soap_read___lkf1__addProduct(struct soap *soap, struct __lkf1__addProduct *p)
{
	if (p)
	{	::soap_default___lkf1__addProduct(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___lkf1__addProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___lkf1__addProduct(struct soap *soap, const char *URL, struct __lkf1__addProduct *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___lkf1__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___lkf1__addProduct(struct soap *soap, struct __lkf1__addProduct *p)
{
	if (::soap_read___lkf1__addProduct(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTolkf2__updateHistory_DEFINED
#define SOAP_TYPE_PointerTolkf2__updateHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__updateHistory(struct soap*, lkf2__updateHistory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__updateHistory(struct soap*, const char *, int, lkf2__updateHistory *const*, const char *);
SOAP_FMAC3 lkf2__updateHistory ** SOAP_FMAC4 soap_in_PointerTolkf2__updateHistory(struct soap*, const char*, lkf2__updateHistory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__updateHistory(struct soap*, lkf2__updateHistory *const*, const char*, const char*);
SOAP_FMAC3 lkf2__updateHistory ** SOAP_FMAC4 soap_get_PointerTolkf2__updateHistory(struct soap*, lkf2__updateHistory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getOrderListHistory_DEFINED
#define SOAP_TYPE_PointerTolkf2__getOrderListHistory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getOrderListHistory(struct soap*, lkf2__getOrderListHistory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getOrderListHistory(struct soap*, const char *, int, lkf2__getOrderListHistory *const*, const char *);
SOAP_FMAC3 lkf2__getOrderListHistory ** SOAP_FMAC4 soap_in_PointerTolkf2__getOrderListHistory(struct soap*, const char*, lkf2__getOrderListHistory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getOrderListHistory(struct soap*, lkf2__getOrderListHistory *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getOrderListHistory ** SOAP_FMAC4 soap_get_PointerTolkf2__getOrderListHistory(struct soap*, lkf2__getOrderListHistory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__InsertClient_DEFINED
#define SOAP_TYPE_PointerTolkf2__InsertClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__InsertClient(struct soap*, lkf2__InsertClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__InsertClient(struct soap*, const char *, int, lkf2__InsertClient *const*, const char *);
SOAP_FMAC3 lkf2__InsertClient ** SOAP_FMAC4 soap_in_PointerTolkf2__InsertClient(struct soap*, const char*, lkf2__InsertClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__InsertClient(struct soap*, lkf2__InsertClient *const*, const char*, const char*);
SOAP_FMAC3 lkf2__InsertClient ** SOAP_FMAC4 soap_get_PointerTolkf2__InsertClient(struct soap*, lkf2__InsertClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getProductList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getProductList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getProductList(struct soap*, lkf2__getProductList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getProductList(struct soap*, const char *, int, lkf2__getProductList *const*, const char *);
SOAP_FMAC3 lkf2__getProductList ** SOAP_FMAC4 soap_in_PointerTolkf2__getProductList(struct soap*, const char*, lkf2__getProductList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getProductList(struct soap*, lkf2__getProductList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getProductList ** SOAP_FMAC4 soap_get_PointerTolkf2__getProductList(struct soap*, lkf2__getProductList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__deleteShoppingCart_DEFINED
#define SOAP_TYPE_PointerTolkf2__deleteShoppingCart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__deleteShoppingCart(struct soap*, lkf2__deleteShoppingCart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__deleteShoppingCart(struct soap*, const char *, int, lkf2__deleteShoppingCart *const*, const char *);
SOAP_FMAC3 lkf2__deleteShoppingCart ** SOAP_FMAC4 soap_in_PointerTolkf2__deleteShoppingCart(struct soap*, const char*, lkf2__deleteShoppingCart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__deleteShoppingCart(struct soap*, lkf2__deleteShoppingCart *const*, const char*, const char*);
SOAP_FMAC3 lkf2__deleteShoppingCart ** SOAP_FMAC4 soap_get_PointerTolkf2__deleteShoppingCart(struct soap*, lkf2__deleteShoppingCart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getClientByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTolkf2__getClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getClientByNameAndPwd(struct soap*, lkf2__getClientByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getClientByNameAndPwd(struct soap*, const char *, int, lkf2__getClientByNameAndPwd *const*, const char *);
SOAP_FMAC3 lkf2__getClientByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTolkf2__getClientByNameAndPwd(struct soap*, const char*, lkf2__getClientByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getClientByNameAndPwd(struct soap*, lkf2__getClientByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getClientByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTolkf2__getClientByNameAndPwd(struct soap*, lkf2__getClientByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__addOrder_DEFINED
#define SOAP_TYPE_PointerTolkf2__addOrder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__addOrder(struct soap*, lkf2__addOrder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__addOrder(struct soap*, const char *, int, lkf2__addOrder *const*, const char *);
SOAP_FMAC3 lkf2__addOrder ** SOAP_FMAC4 soap_in_PointerTolkf2__addOrder(struct soap*, const char*, lkf2__addOrder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__addOrder(struct soap*, lkf2__addOrder *const*, const char*, const char*);
SOAP_FMAC3 lkf2__addOrder ** SOAP_FMAC4 soap_get_PointerTolkf2__addOrder(struct soap*, lkf2__addOrder **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getProductLikeList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getProductLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getProductLikeList(struct soap*, lkf2__getProductLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getProductLikeList(struct soap*, const char *, int, lkf2__getProductLikeList *const*, const char *);
SOAP_FMAC3 lkf2__getProductLikeList ** SOAP_FMAC4 soap_in_PointerTolkf2__getProductLikeList(struct soap*, const char*, lkf2__getProductLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getProductLikeList(struct soap*, lkf2__getProductLikeList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getProductLikeList ** SOAP_FMAC4 soap_get_PointerTolkf2__getProductLikeList(struct soap*, lkf2__getProductLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__updateProductByInfo_DEFINED
#define SOAP_TYPE_PointerTolkf2__updateProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__updateProductByInfo(struct soap*, lkf2__updateProductByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__updateProductByInfo(struct soap*, const char *, int, lkf2__updateProductByInfo *const*, const char *);
SOAP_FMAC3 lkf2__updateProductByInfo ** SOAP_FMAC4 soap_in_PointerTolkf2__updateProductByInfo(struct soap*, const char*, lkf2__updateProductByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__updateProductByInfo(struct soap*, lkf2__updateProductByInfo *const*, const char*, const char*);
SOAP_FMAC3 lkf2__updateProductByInfo ** SOAP_FMAC4 soap_get_PointerTolkf2__updateProductByInfo(struct soap*, lkf2__updateProductByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__addProductType_DEFINED
#define SOAP_TYPE_PointerTolkf2__addProductType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__addProductType(struct soap*, lkf2__addProductType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__addProductType(struct soap*, const char *, int, lkf2__addProductType *const*, const char *);
SOAP_FMAC3 lkf2__addProductType ** SOAP_FMAC4 soap_in_PointerTolkf2__addProductType(struct soap*, const char*, lkf2__addProductType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__addProductType(struct soap*, lkf2__addProductType *const*, const char*, const char*);
SOAP_FMAC3 lkf2__addProductType ** SOAP_FMAC4 soap_get_PointerTolkf2__addProductType(struct soap*, lkf2__addProductType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getOrderListByInfo_DEFINED
#define SOAP_TYPE_PointerTolkf2__getOrderListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getOrderListByInfo(struct soap*, lkf2__getOrderListByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getOrderListByInfo(struct soap*, const char *, int, lkf2__getOrderListByInfo *const*, const char *);
SOAP_FMAC3 lkf2__getOrderListByInfo ** SOAP_FMAC4 soap_in_PointerTolkf2__getOrderListByInfo(struct soap*, const char*, lkf2__getOrderListByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getOrderListByInfo(struct soap*, lkf2__getOrderListByInfo *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getOrderListByInfo ** SOAP_FMAC4 soap_get_PointerTolkf2__getOrderListByInfo(struct soap*, lkf2__getOrderListByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getClientList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getClientList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getClientList(struct soap*, lkf2__getClientList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getClientList(struct soap*, const char *, int, lkf2__getClientList *const*, const char *);
SOAP_FMAC3 lkf2__getClientList ** SOAP_FMAC4 soap_in_PointerTolkf2__getClientList(struct soap*, const char*, lkf2__getClientList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getClientList(struct soap*, lkf2__getClientList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getClientList ** SOAP_FMAC4 soap_get_PointerTolkf2__getClientList(struct soap*, lkf2__getClientList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getProductTypeByProName_DEFINED
#define SOAP_TYPE_PointerTolkf2__getProductTypeByProName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getProductTypeByProName(struct soap*, lkf2__getProductTypeByProName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getProductTypeByProName(struct soap*, const char *, int, lkf2__getProductTypeByProName *const*, const char *);
SOAP_FMAC3 lkf2__getProductTypeByProName ** SOAP_FMAC4 soap_in_PointerTolkf2__getProductTypeByProName(struct soap*, const char*, lkf2__getProductTypeByProName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getProductTypeByProName(struct soap*, lkf2__getProductTypeByProName *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getProductTypeByProName ** SOAP_FMAC4 soap_get_PointerTolkf2__getProductTypeByProName(struct soap*, lkf2__getProductTypeByProName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getClientLikeList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getClientLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getClientLikeList(struct soap*, lkf2__getClientLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getClientLikeList(struct soap*, const char *, int, lkf2__getClientLikeList *const*, const char *);
SOAP_FMAC3 lkf2__getClientLikeList ** SOAP_FMAC4 soap_in_PointerTolkf2__getClientLikeList(struct soap*, const char*, lkf2__getClientLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getClientLikeList(struct soap*, lkf2__getClientLikeList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getClientLikeList ** SOAP_FMAC4 soap_get_PointerTolkf2__getClientLikeList(struct soap*, lkf2__getClientLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getOrderLikeList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getOrderLikeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getOrderLikeList(struct soap*, lkf2__getOrderLikeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getOrderLikeList(struct soap*, const char *, int, lkf2__getOrderLikeList *const*, const char *);
SOAP_FMAC3 lkf2__getOrderLikeList ** SOAP_FMAC4 soap_in_PointerTolkf2__getOrderLikeList(struct soap*, const char*, lkf2__getOrderLikeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getOrderLikeList(struct soap*, lkf2__getOrderLikeList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getOrderLikeList ** SOAP_FMAC4 soap_get_PointerTolkf2__getOrderLikeList(struct soap*, lkf2__getOrderLikeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__deleteProductByInfo_DEFINED
#define SOAP_TYPE_PointerTolkf2__deleteProductByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__deleteProductByInfo(struct soap*, lkf2__deleteProductByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__deleteProductByInfo(struct soap*, const char *, int, lkf2__deleteProductByInfo *const*, const char *);
SOAP_FMAC3 lkf2__deleteProductByInfo ** SOAP_FMAC4 soap_in_PointerTolkf2__deleteProductByInfo(struct soap*, const char*, lkf2__deleteProductByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__deleteProductByInfo(struct soap*, lkf2__deleteProductByInfo *const*, const char*, const char*);
SOAP_FMAC3 lkf2__deleteProductByInfo ** SOAP_FMAC4 soap_get_PointerTolkf2__deleteProductByInfo(struct soap*, lkf2__deleteProductByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__deleteClientByNameAndPwd_DEFINED
#define SOAP_TYPE_PointerTolkf2__deleteClientByNameAndPwd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__deleteClientByNameAndPwd(struct soap*, lkf2__deleteClientByNameAndPwd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__deleteClientByNameAndPwd(struct soap*, const char *, int, lkf2__deleteClientByNameAndPwd *const*, const char *);
SOAP_FMAC3 lkf2__deleteClientByNameAndPwd ** SOAP_FMAC4 soap_in_PointerTolkf2__deleteClientByNameAndPwd(struct soap*, const char*, lkf2__deleteClientByNameAndPwd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__deleteClientByNameAndPwd(struct soap*, lkf2__deleteClientByNameAndPwd *const*, const char*, const char*);
SOAP_FMAC3 lkf2__deleteClientByNameAndPwd ** SOAP_FMAC4 soap_get_PointerTolkf2__deleteClientByNameAndPwd(struct soap*, lkf2__deleteClientByNameAndPwd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__updateClient_DEFINED
#define SOAP_TYPE_PointerTolkf2__updateClient_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__updateClient(struct soap*, lkf2__updateClient *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__updateClient(struct soap*, const char *, int, lkf2__updateClient *const*, const char *);
SOAP_FMAC3 lkf2__updateClient ** SOAP_FMAC4 soap_in_PointerTolkf2__updateClient(struct soap*, const char*, lkf2__updateClient **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__updateClient(struct soap*, lkf2__updateClient *const*, const char*, const char*);
SOAP_FMAC3 lkf2__updateClient ** SOAP_FMAC4 soap_get_PointerTolkf2__updateClient(struct soap*, lkf2__updateClient **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getProductListByInfo_DEFINED
#define SOAP_TYPE_PointerTolkf2__getProductListByInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getProductListByInfo(struct soap*, lkf2__getProductListByInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getProductListByInfo(struct soap*, const char *, int, lkf2__getProductListByInfo *const*, const char *);
SOAP_FMAC3 lkf2__getProductListByInfo ** SOAP_FMAC4 soap_in_PointerTolkf2__getProductListByInfo(struct soap*, const char*, lkf2__getProductListByInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getProductListByInfo(struct soap*, lkf2__getProductListByInfo *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getProductListByInfo ** SOAP_FMAC4 soap_get_PointerTolkf2__getProductListByInfo(struct soap*, lkf2__getProductListByInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__getOrderList_DEFINED
#define SOAP_TYPE_PointerTolkf2__getOrderList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__getOrderList(struct soap*, lkf2__getOrderList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__getOrderList(struct soap*, const char *, int, lkf2__getOrderList *const*, const char *);
SOAP_FMAC3 lkf2__getOrderList ** SOAP_FMAC4 soap_in_PointerTolkf2__getOrderList(struct soap*, const char*, lkf2__getOrderList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__getOrderList(struct soap*, lkf2__getOrderList *const*, const char*, const char*);
SOAP_FMAC3 lkf2__getOrderList ** SOAP_FMAC4 soap_get_PointerTolkf2__getOrderList(struct soap*, lkf2__getOrderList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__deleteProductTypeByName_DEFINED
#define SOAP_TYPE_PointerTolkf2__deleteProductTypeByName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__deleteProductTypeByName(struct soap*, lkf2__deleteProductTypeByName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__deleteProductTypeByName(struct soap*, const char *, int, lkf2__deleteProductTypeByName *const*, const char *);
SOAP_FMAC3 lkf2__deleteProductTypeByName ** SOAP_FMAC4 soap_in_PointerTolkf2__deleteProductTypeByName(struct soap*, const char*, lkf2__deleteProductTypeByName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__deleteProductTypeByName(struct soap*, lkf2__deleteProductTypeByName *const*, const char*, const char*);
SOAP_FMAC3 lkf2__deleteProductTypeByName ** SOAP_FMAC4 soap_get_PointerTolkf2__deleteProductTypeByName(struct soap*, lkf2__deleteProductTypeByName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__addProduct_DEFINED
#define SOAP_TYPE_PointerTolkf2__addProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__addProduct(struct soap*, lkf2__addProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__addProduct(struct soap*, const char *, int, lkf2__addProduct *const*, const char *);
SOAP_FMAC3 lkf2__addProduct ** SOAP_FMAC4 soap_in_PointerTolkf2__addProduct(struct soap*, const char*, lkf2__addProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__addProduct(struct soap*, lkf2__addProduct *const*, const char*, const char*);
SOAP_FMAC3 lkf2__addProduct ** SOAP_FMAC4 soap_get_PointerTolkf2__addProduct(struct soap*, lkf2__addProduct **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__productType_DEFINED
#define SOAP_TYPE_PointerTolkf2__productType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__productType(struct soap*, lkf2__productType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__productType(struct soap*, const char *, int, lkf2__productType *const*, const char *);
SOAP_FMAC3 lkf2__productType ** SOAP_FMAC4 soap_in_PointerTolkf2__productType(struct soap*, const char*, lkf2__productType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__productType(struct soap*, lkf2__productType *const*, const char*, const char*);
SOAP_FMAC3 lkf2__productType ** SOAP_FMAC4 soap_get_PointerTolkf2__productType(struct soap*, lkf2__productType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__client_DEFINED
#define SOAP_TYPE_PointerTolkf2__client_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__client(struct soap*, lkf2__client *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__client(struct soap*, const char *, int, lkf2__client *const*, const char *);
SOAP_FMAC3 lkf2__client ** SOAP_FMAC4 soap_in_PointerTolkf2__client(struct soap*, const char*, lkf2__client **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__client(struct soap*, lkf2__client *const*, const char*, const char*);
SOAP_FMAC3 lkf2__client ** SOAP_FMAC4 soap_get_PointerTolkf2__client(struct soap*, lkf2__client **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__order_DEFINED
#define SOAP_TYPE_PointerTolkf2__order_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__order(struct soap*, lkf2__order *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__order(struct soap*, const char *, int, lkf2__order *const*, const char *);
SOAP_FMAC3 lkf2__order ** SOAP_FMAC4 soap_in_PointerTolkf2__order(struct soap*, const char*, lkf2__order **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__order(struct soap*, lkf2__order *const*, const char*, const char*);
SOAP_FMAC3 lkf2__order ** SOAP_FMAC4 soap_get_PointerTolkf2__order(struct soap*, lkf2__order **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolkf2__product_DEFINED
#define SOAP_TYPE_PointerTolkf2__product_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolkf2__product(struct soap*, lkf2__product *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolkf2__product(struct soap*, const char *, int, lkf2__product *const*, const char *);
SOAP_FMAC3 lkf2__product ** SOAP_FMAC4 soap_in_PointerTolkf2__product(struct soap*, const char*, lkf2__product **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolkf2__product(struct soap*, lkf2__product *const*, const char*, const char*);
SOAP_FMAC3 lkf2__product ** SOAP_FMAC4 soap_get_PointerTolkf2__product(struct soap*, lkf2__product **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__productType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__productType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTolkf2__productType(struct soap*, std::vector<lkf2__productType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTolkf2__productType(struct soap*, const std::vector<lkf2__productType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTolkf2__productType(struct soap*, const char*, int, const std::vector<lkf2__productType *> *, const char*);
SOAP_FMAC3 std::vector<lkf2__productType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTolkf2__productType(struct soap*, const char*, std::vector<lkf2__productType *> *, const char*);
SOAP_FMAC1 std::vector<lkf2__productType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTolkf2__productType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<lkf2__productType *>  * soap_new_std__vectorTemplateOfPointerTolkf2__productType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTolkf2__productType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__client_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__client_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTolkf2__client(struct soap*, std::vector<lkf2__client *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTolkf2__client(struct soap*, const std::vector<lkf2__client *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTolkf2__client(struct soap*, const char*, int, const std::vector<lkf2__client *> *, const char*);
SOAP_FMAC3 std::vector<lkf2__client *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTolkf2__client(struct soap*, const char*, std::vector<lkf2__client *> *, const char*);
SOAP_FMAC1 std::vector<lkf2__client *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTolkf2__client(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<lkf2__client *>  * soap_new_std__vectorTemplateOfPointerTolkf2__client(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTolkf2__client(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__product_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__product_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTolkf2__product(struct soap*, std::vector<lkf2__product *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTolkf2__product(struct soap*, const std::vector<lkf2__product *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTolkf2__product(struct soap*, const char*, int, const std::vector<lkf2__product *> *, const char*);
SOAP_FMAC3 std::vector<lkf2__product *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTolkf2__product(struct soap*, const char*, std::vector<lkf2__product *> *, const char*);
SOAP_FMAC1 std::vector<lkf2__product *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTolkf2__product(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<lkf2__product *>  * soap_new_std__vectorTemplateOfPointerTolkf2__product(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTolkf2__product(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__order_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTolkf2__order_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTolkf2__order(struct soap*, std::vector<lkf2__order *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTolkf2__order(struct soap*, const std::vector<lkf2__order *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTolkf2__order(struct soap*, const char*, int, const std::vector<lkf2__order *> *, const char*);
SOAP_FMAC3 std::vector<lkf2__order *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTolkf2__order(struct soap*, const char*, std::vector<lkf2__order *> *, const char*);
SOAP_FMAC1 std::vector<lkf2__order *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTolkf2__order(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<lkf2__order *>  * soap_new_std__vectorTemplateOfPointerTolkf2__order(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTolkf2__order(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
